<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Blog - Will Fuqua</title>
        <link>https://fuqua.io/blog/</link>
        <description></description>
        <language>en</language>
        <pubDate>Sun, 29 Aug 2021 17:00:00 GMT</pubDate>
        <docs>https://fuqua.io/blog/rss.xml</docs>
        <generator>acrylamid 0.7.10</generator>
        
            <item>
        <title>Analyzing Code Quality with LINQ and NDepend</title>
        <link>https://fuqua.io/blog/2021/08/analyzing-code-quality-with-linq-and-ndepend/</link>
        <description>&lt;p&gt;I&amp;#8217;ve been building an open-source personal project (&lt;a class=&#34;reference external&#34; href=&#34;https://github.com/waf/CSharpRepl&#34;&gt;C# &lt;span class=&#34;caps&#34;&gt;REPL&lt;/span&gt;&lt;/a&gt;) and spending a good chunk of time on code quality. I self-impose a zero-warning policy, use nullable reference types, track unit test coverage,&amp;nbsp;etc.&lt;/p&gt;
&lt;p&gt;After ensuring all the Visual Studio / Roslyn code analyzer warnings were fixed, I thought I&amp;#8217;d try out NDepend to get a second opinion, and also understand its capabilities. After downloading &lt;a class=&#34;reference external&#34; href=&#34;https://www.ndepend.com/download&#34;&gt;a free trial of NDepend&lt;/a&gt; and spending some time with it, I was pretty impressed with its technical underpinnings as they&amp;#8217;re exposed to the end user. Spoilers: &lt;em&gt;It&amp;#8217;s &lt;span class=&#34;caps&#34;&gt;LINQ&lt;/span&gt; all the way down&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;static-analysis-with-linq&#34;&gt;
&lt;h3&gt;Static Analysis with&amp;nbsp;&lt;span class=&#34;caps&#34;&gt;LINQ&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Out of the box, there&amp;#8217;s a large collection of static analysis rules; they&amp;#8217;re mostly focused on finding software design flaws. For example, it includes a rule that warns against assigning a field from too many methods; it&amp;#8217;s a sign that there&amp;#8217;s some bug-prone mutation, and a better design could be&amp;nbsp;possible:&lt;/p&gt;
&lt;img alt=&#34;A rule UI that says not to assign a field from many methods. It&#39;s a symptom of bug-prone code.&#34; class=&#34;align-center&#34; src=&#34;https://fuqua.io/blog/img/ndepend/1-too-many-methods.png&#34; style=&#34;width: 90%;&#34;/&gt;
&lt;p&gt;This screen may look like a typical static analysis rule, but there&amp;#8217;s more going on under-the-hood. If we click the &lt;cite&gt;View Source Code&lt;/cite&gt; button, we&amp;#8217;ll see the following, editable rule&amp;nbsp;code:&lt;/p&gt;
&lt;div class=&#34;figure align-center&#34;&gt;
&lt;a class=&#34;reference external image-reference&#34; href=&#34;https://www.ndepend.com/default-rules/NDepend-Rules-Explorer.html?ruleid=ND1906&#34;&gt;&lt;img alt=&#34;A LINQ statement. warnif count &amp;gt; 0 from f in JustMyCode.Fields where !f.IsEnumValue &amp;amp;&amp;amp; !f.IsImmutable &amp;amp;&amp;amp; !f.IsInitOnly &amp;amp;&amp;amp; !f.IsGeneratedByCompiler &amp;amp;&amp;amp; !f.IsEventDelegateObject let methodsAssigningMe = f.MethodsAssigningMe.Where(m =&amp;gt; !m.IsConstructor) where methodsAssigningMe.Count() &amp;gt;= (!f.IsStatic ? 4 : 2) select new { f, methodsAssigningMe, f.MethodsReadingMeButNotAssigningMe, f.MethodsUsingMe, Debt = (4+(f.IsStatic ? 10 : 5)).ToMinutes().ToDebt(), Severity = Severity.High}&#34; src=&#34;https://fuqua.io/blog/img/ndepend/2-too-many-methods-linq.png&#34; style=&#34;width: 90%;&#34;/&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;small class=&#34;align-center&#34; style=&#34;display:block;color:#888&#34;&gt;&lt;a href=&#34;https://www.ndepend.com/default-rules/NDepend-Rules-Explorer.html?ruleid=ND1906&#34;&gt;Rule &lt;span class=&#34;caps&#34;&gt;ND1906&lt;/span&gt;&lt;/a&gt; – click to view the full rule description and code&lt;/small&gt;&lt;p&gt;Hey, that&amp;#8217;s&amp;nbsp;&lt;span class=&#34;caps&#34;&gt;LINQ&lt;/span&gt;!&lt;/p&gt;
&lt;p&gt;Technically, it&amp;#8217;s called &lt;a class=&#34;reference external&#34; href=&#34;https://www.ndepend.com/docs/cqlinq-syntax#Introduction&#34;&gt;CQLinq&lt;/a&gt; (Code Query &lt;span class=&#34;caps&#34;&gt;LINQ&lt;/span&gt;), which is &lt;span class=&#34;caps&#34;&gt;LINQ&lt;/span&gt; with additional static analysis keywords, and running over an object model that represents a codebase. Conceptually, it&amp;#8217;s similar to Roslyn&amp;#8217;s syntax/semantic model, but with a bunch of nice affordances and predefined properties that make it simpler to do solution-wide static analysis. The CQLinq object model represents an entire&amp;nbsp;application.&lt;/p&gt;
&lt;p&gt;For example, here&amp;#8217;s a predefined calculation for cyclomatic complexity. It runs across all methods in the application using the &lt;tt class=&#34;docutils literal&#34;&gt;Application.Methods&lt;/tt&gt; property; there&amp;#8217;s no need to recursively find all files or&amp;nbsp;classes:&lt;/p&gt;
&lt;img alt=&#34;from m in Application.Methods where m.CyclomaticComplexity &amp;gt; 20 &amp;amp;&amp;amp; !m.IsAbstract orderby m.CyclomaticComplexity descending select new { m, m.CyclomaticComplexity }&#34; class=&#34;align-center&#34; src=&#34;https://fuqua.io/blog/img/ndepend/3-cyclomatic-complexity-query.png&#34; style=&#34;width: 90%;&#34;/&gt;
&lt;p&gt;Notice that the rule uses a &lt;tt class=&#34;docutils literal&#34;&gt;CyclomaticComplexity&lt;/tt&gt; property that already exists on the method. We can use intellisense to explore other properties in the CQLinq object&amp;nbsp;model:&lt;/p&gt;
&lt;img alt=&#34;The CQLinq query editor open, with an intellisense menu showing properties like ReadsMutableObjectState, PercentageCoverage, PercentageComment, ShouldBePublic, and many more.&#34; class=&#34;align-center&#34; src=&#34;https://fuqua.io/blog/img/ndepend/4-intellisense.png&#34; style=&#34;width: 94%;&#34;/&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;analyzing-code-evolution-over-time-with-linq&#34;&gt;
&lt;h3&gt;Analyzing code evolution over time with&amp;nbsp;&lt;span class=&#34;caps&#34;&gt;LINQ&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;CQLinq also supports comparing the current version of the code with past versions of the code. Analyzing code once will create a &lt;em&gt;baseline;&lt;/em&gt; future analyses can refer to this baseline with the &lt;tt class=&#34;docutils literal&#34;&gt;.OlderVersion()&lt;/tt&gt; helper method. Here&amp;#8217;s how we can identify mutability being introduced as part of a code&amp;nbsp;change:&lt;/p&gt;
&lt;a class=&#34;reference external image-reference&#34; href=&#34;https://www.ndepend.com/default-rules/NDepend-Rules-Explorer.html?ruleid=ND1108&#34;&gt;&lt;img alt=&#34;A CQLinq statement that reads: Avoid transforming an immutable type into a mutable one. warnif count &amp;gt; 0 from t in Application.Types where t.CodeWasChanged() &amp;amp;&amp;amp; t.OlderVersion().IsImmutable &amp;amp;&amp;amp; !t.IsImmutable &amp;amp;&amp;amp; !t.IsStatic let culpritFields = t.InstanceFields.Where(f =&amp;gt; !f.IsImmutable) select new { t, culpritFields, Debt = (10 + 10*culpritFields.Count()).ToMinutes().ToDebt(), Severity = Severity.High }&#34; class=&#34;align-center&#34; src=&#34;https://fuqua.io/blog/img/ndepend/5-baseline-mutability-detection.png&#34; style=&#34;width: 90%;&#34;/&gt;&lt;/a&gt;
&lt;small class=&#34;align-center&#34; style=&#34;display:block;color:#888&#34;&gt;&lt;a href=&#34;https://www.ndepend.com/default-rules/NDepend-Rules-Explorer.html?ruleid=ND1108&#34;&gt;Rule &lt;span class=&#34;caps&#34;&gt;ND1108&lt;/span&gt;&lt;/a&gt; – click to view the full rule description and code&lt;/small&gt;&lt;p&gt;There are a &lt;a class=&#34;reference external&#34; href=&#34;https://www.ndepend.com/default-rules/NDepend-Rules-Explorer.html?ruleid=ND1105#!&#34;&gt;bunch of prebuilt rules&lt;/a&gt; that take advantage of this baseline-comparison feature. For example, we can define and identify breaking changes in a code change to a library, so we don&amp;#8217;t accidentally break downstream users, and can better manage &lt;abbr title=&#34;Semantic Versioning&#34;&gt;semver&lt;/abbr&gt;:&lt;/p&gt;
&lt;a class=&#34;reference external image-reference&#34; href=&#34;https://www.ndepend.com/default-rules/NDepend-Rules-Explorer.html?ruleid=ND1500&#34;&gt;&lt;img alt=&#34;A CQLinq statement that fades out to white. warnif count &amp;gt; 0 from m in codeBase.OlderVersion().Application.Methods where m.IsPubliclyVisible &amp;amp;&amp;amp; ((m.WasRemoved() &amp;amp;&amp;amp; !m.ParentType.WasRemoved() &amp;amp;&amp;amp; !m.IsObsolete) || (!m.WasRemoved() &amp;amp;&amp;amp; !m.NewerVersion().IsPubliclyVisible &amp;amp;&amp;amp; m.ParentType.NewerVersion().IsPubliclyVisible) || (!m.WasRemoved() &amp;amp;&amp;amp; m.ReturnType != null &amp;amp;&amp;amp; m.NewerVersion().ReturnType != null &amp;amp;&amp;amp; m.ReturnType.FullName != m.NewerVersion().ReturnType.FullName))&#34; class=&#34;align-center&#34; src=&#34;https://fuqua.io/blog/img/ndepend/6-breaking-changes.png&#34; style=&#34;width: 100%;&#34;/&gt;&lt;/a&gt;
&lt;small class=&#34;align-center&#34; style=&#34;display:block;color:#888&#34;&gt;&lt;a href=&#34;https://www.ndepend.com/default-rules/NDepend-Rules-Explorer.html?ruleid=ND1500&#34;&gt;Rule &lt;span class=&#34;caps&#34;&gt;ND1500&lt;/span&gt;&lt;/a&gt; – click to view the full rule description and code&lt;/small&gt;&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;identifying-high-severity-issues-with-linq&#34;&gt;
&lt;h3&gt;Identifying high-severity issues with&amp;nbsp;&lt;span class=&#34;caps&#34;&gt;LINQ&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;The CQLinq object model doesn&amp;#8217;t just make our application source code queryable, it also makes static analysis rules and their violations queryable as well. This gets a bit meta; by using the &lt;tt class=&#34;docutils literal&#34;&gt;Issues&lt;/tt&gt; object model we can query for violations of rules defined by other &lt;span class=&#34;caps&#34;&gt;LINQ&lt;/span&gt;&amp;nbsp;statements:&lt;/p&gt;
&lt;img alt=&#34;from issue in Issues where issue.Severity &amp;gt; Severity.Info orderby issue.Severity descending select new { issue, issue.Severity, issue.CodeElement }&#34; class=&#34;align-center&#34; src=&#34;https://fuqua.io/blog/img/ndepend/7-issues-query.png&#34; style=&#34;width: 90%;&#34;/&gt;
&lt;p&gt;This can be combined with the previous section on code evolution to find new issues, or get an idea of how issues are being introduced or resolved over time. We can use the &lt;tt class=&#34;docutils literal&#34;&gt;failif&lt;/tt&gt; CQLinq keyword to set hard limits based on our issues and rules; these are known as &lt;cite&gt;Quality Gates&lt;/cite&gt; and are useful for continuous integration scenarios. The syntax is the same as the &lt;tt class=&#34;docutils literal&#34;&gt;warnif&lt;/tt&gt; keyword we saw in the earlier CQLinq&amp;nbsp;rules.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;using-the-ui-for-parameterized-linq-queries&#34;&gt;
&lt;h3&gt;Using the &lt;span class=&#34;caps&#34;&gt;UI&lt;/span&gt; for parameterized &lt;span class=&#34;caps&#34;&gt;LINQ&lt;/span&gt;&amp;nbsp;queries&lt;/h3&gt;
&lt;p&gt;So far we&amp;#8217;ve been focused on the code editor, but there&amp;#8217;s also a pretty slick &lt;span class=&#34;caps&#34;&gt;UI&lt;/span&gt;; by setting up our &lt;span class=&#34;caps&#34;&gt;LINQ&lt;/span&gt; statements to have parameters, we can explore ranges of these parameters in a live-updating, auto-generated&amp;nbsp;&lt;span class=&#34;caps&#34;&gt;UI&lt;/span&gt;:&lt;/p&gt;
&lt;img alt=&#34;A UI with several form elements, like input fields, dropdown lists, and sliders. Each form element corresponds to a highlighted placeholder in the LINQ query.&#34; class=&#34;align-center&#34; src=&#34;https://fuqua.io/blog/img/ndepend/8-coupling-queries.png&#34; style=&#34;width: 90%;&#34;/&gt;
&lt;p&gt;The NDepend &lt;span class=&#34;caps&#34;&gt;UI&lt;/span&gt; has a lot of prebuilt views for understanding, categorizing and prioritizing issues. In addition to the typical column views that we&amp;#8217;ve seen in this post, they also have some more &lt;a class=&#34;reference external&#34; href=&#34;https://www.ndepend.com/docs/visual-studio-dependency-graph&#34;&gt;advanced graphical dependency views&lt;/a&gt; that are also powered by CQLinq. All the typical static analysis workflows can be done via the &lt;span class=&#34;caps&#34;&gt;UI&lt;/span&gt; if you don&amp;#8217;t want to get into the &lt;span class=&#34;caps&#34;&gt;LINQ&lt;/span&gt; side of things&amp;#8212;but where&amp;#8217;s the fun in&amp;nbsp;that?&lt;/p&gt;
&lt;p&gt;If the command line is your preferred form of &lt;span class=&#34;caps&#34;&gt;UI&lt;/span&gt;, there&amp;#8217;s also a command line runner for all these CQLinq statements, which is also useful for integrating with other&amp;nbsp;software.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;summary&#34;&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;This blog post focused solely on the CQLinq part of NDepend, but there&amp;#8217;s a bunch more &lt;a class=&#34;reference external&#34; href=&#34;https://www.ndepend.com/default-rules/NDepend-Rules-Explorer.html&#34;&gt;rules&lt;/a&gt;, &lt;a class=&#34;reference external&#34; href=&#34;https://www.ndepend.com/sample-reports/&#34;&gt;reports&lt;/a&gt;, and &lt;a class=&#34;reference external&#34; href=&#34;https://www.ndepend.com/features/code-complexity#Diagrams&#34;&gt;data visualizations&lt;/a&gt;&amp;nbsp;available.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve personally always been interested in static analysis tools, programming language syntax trees, and &lt;span class=&#34;caps&#34;&gt;LINQ&lt;/span&gt;; so it was great to see NDepend use CQLinq to combine all three into a well-packaged static analysis&amp;nbsp;tool.&lt;/p&gt;
&lt;p&gt;More practically, it helped me identify a good set of fixes for C# &lt;span class=&#34;caps&#34;&gt;REPL&lt;/span&gt;. I was able to refactor towards immutability, better structure some confusing namespaces, and improve the general design of the&amp;nbsp;application.&lt;/p&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 29 Aug 2021 17:00:00 GMT</pubDate>
        <guid isPermaLink="false">tag:fuqua.io/blog,2021-08-30:/2021/08/analyzing-code-quality-with-linq-and-ndepend</guid>
    </item>
        
            <item>
        <title>Tips for using the Windows Command Line effectively</title>
        <link>https://fuqua.io/blog/2021/05/tips-for-using-the-windows-command-line-effectively/</link>
        <description>&lt;p&gt;Although the command line experience on Windows has historically been less than stellar, the last few years have seen rapid improvement. In this post, I&amp;#8217;ll cover three main areas of&amp;nbsp;improvement:&lt;/p&gt;
&lt;ol class=&#34;arabic simple&#34;&gt;
&lt;li&gt;The new Windows&amp;nbsp;Terminal&lt;/li&gt;
&lt;li&gt;Running PowerShell&amp;nbsp;Core&lt;/li&gt;
&lt;li&gt;Developing with Windows Subsystem for&amp;nbsp;Linux&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In case you&amp;#8217;re familiar with all three of these topics, I&amp;#8217;ll be including some concrete tips in each topic that are real timesavers; hopefully at least one of the tips will be&amp;nbsp;new.&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;the-new-windows-terminal&#34;&gt;
&lt;h3&gt;The new Windows&amp;nbsp;Terminal&lt;/h3&gt;
&lt;p&gt;Microsoft&amp;#8217;s release of Windows Terminal, a modern, &lt;span class=&#34;caps&#34;&gt;GPU&lt;/span&gt;-accelerated and open-source terminal application, is a real game changer. It can be installed and updated &lt;a class=&#34;reference external&#34; href=&#34;ms-windows-store://pdp/?ProductId=9n0dx20hk701&#34;&gt;from the Microsoft store&lt;/a&gt;, with other methods of installation available &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/microsoft/terminal&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Windows Terminal supports running various shells in tabs (and side-by-side panes). For example, we can use PowerShell in one tab, &lt;span class=&#34;caps&#34;&gt;ZSH&lt;/span&gt; under the Windows Subsystem for Linux in another tab, and to the side, a Command Prompt &lt;span class=&#34;strike&#34;&gt;pain&lt;/span&gt;&amp;nbsp;pane.&lt;/p&gt;
&lt;p&gt;Windows Terminal is ultra-configurable, and uses &lt;span class=&#34;caps&#34;&gt;JSON&lt;/span&gt; for its configuration store (with a work-in-progress Settings &lt;span class=&#34;caps&#34;&gt;UI&lt;/span&gt; layered on top). An example of this configurability is the &lt;tt class=&#34;docutils literal&#34;&gt;sendInput&lt;/tt&gt; command, which can send arbitrary keystrokes and escape sequences to the&amp;nbsp;terminal:&lt;/p&gt;
&lt;p&gt;For example, we could bind a frequently used &lt;tt class=&#34;docutils literal&#34;&gt;git log&lt;/tt&gt; command to &lt;cite&gt;Ctrl+Alt+L&lt;/cite&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;place&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;this&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;keybinding&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;`actions`&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;array&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;quot;action&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;sendInput&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;git log --all --decorate --oneline --graph\r\n&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;ctrl+alt+l&amp;quot;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Git, of course, has its own aliasing system, but it&amp;#8217;s nice to have a keyboard shortcut for it, too. I personally also keybind some frequent directory navigation commands, as well as some common compiler / build tool&amp;nbsp;commands.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;running-powershell-core&#34;&gt;
&lt;h3&gt;Running PowerShell&amp;nbsp;Core&lt;/h3&gt;
&lt;p&gt;When most people think of PowerShell, they probably think of the older PowerShell 5, which is the default version of PowerShell installed on Windows. This version of PowerShell is &lt;strong&gt;old&lt;/strong&gt; (the most recent point release was 5.1, in&amp;nbsp;2017).&lt;/p&gt;
&lt;p&gt;PowerShell Core, the cross-platform, open-source alternative, has been around since 2016 and is actively developed. It runs alongside PowerShell 5, instead of replacing it, so there&amp;#8217;s no risk in installing it. It can be installed from the &lt;a class=&#34;reference external&#34; href=&#34;ms-windows-store://pdp/?ProductId=9mz1snwt0n5d&#34;&gt;Microsoft Store&lt;/a&gt; or &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/PowerShell/PowerShell&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;PowerShell Core has a lot of nice improvements across the usability of its shell, its programming language, and its performance. It&amp;#8217;s worth upgrading just for the &lt;tt class=&#34;docutils literal&#34;&gt;cd -&lt;/tt&gt; and &lt;tt class=&#34;docutils literal&#34;&gt;cd +&lt;/tt&gt; features, which navigate back and forward through the working directory&amp;nbsp;history:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;gp&#34;&gt;will@home:~$&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; projects/death-ray

&lt;span class=&#34;gp&#34;&gt;will@home:~/projects/death-ray$&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; node_modules

&lt;span class=&#34;gp&#34;&gt;will@home:~/projects/death-ray/node_modules$&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; -

&lt;span class=&#34;gp&#34;&gt;will@home:~/projects/death-ray$&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; -

&lt;span class=&#34;gp&#34;&gt;will@home:~$&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; +

&lt;span class=&#34;gp&#34;&gt;will@home:~/projects/death-ray$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;developing-with-windows-subsystem-for-linux&#34;&gt;
&lt;h3&gt;Developing with Windows Subsystem for&amp;nbsp;Linux&lt;/h3&gt;
&lt;p&gt;Now, it might be odd for a &amp;quot;Windows Command Line&amp;quot; blog post to recommend installing Linux, but, well, here we are. The Linux / &lt;span class=&#34;caps&#34;&gt;BSD&lt;/span&gt; / Mac &lt;span class=&#34;caps&#34;&gt;OS&lt;/span&gt; communities have been setting the standard in command line efficiency, and we can get all that goodness on Windows 10,&amp;nbsp;too.&lt;/p&gt;
&lt;p&gt;The Windows Subsystem for Linux 2 (&lt;span class=&#34;caps&#34;&gt;WSL2&lt;/span&gt;) provides a real Linux command line inside Windows, with Linux kernel updates shipped via Windows Update (!!!). After &lt;a class=&#34;reference external&#34; href=&#34;https://docs.microsoft.com/en-us/windows/wsl/install-win10&#34;&gt;installing &lt;span class=&#34;caps&#34;&gt;WSL2&lt;/span&gt;&lt;/a&gt;, we can download distros like &lt;a class=&#34;reference external&#34; href=&#34;ms-windows-store://pdp/?ProductId=9nblggh4msv6&#34;&gt;Ubuntu from the Microsoft Store&lt;/a&gt;. From there, advanced shells like &lt;span class=&#34;caps&#34;&gt;ZSH&lt;/span&gt; and Fish are just an &lt;tt class=&#34;docutils literal&#34;&gt;apt install&lt;/tt&gt; away!&lt;/p&gt;
&lt;p&gt;While the typical &lt;span class=&#34;caps&#34;&gt;GNU&lt;/span&gt;/Linux command line tools, like &lt;tt class=&#34;docutils literal&#34;&gt;grep&lt;/tt&gt; and &lt;tt class=&#34;docutils literal&#34;&gt;sed&lt;/tt&gt;, are great, we can make our experience even better. When we run the &lt;tt class=&#34;docutils literal&#34;&gt;code&lt;/tt&gt; command inside &lt;span class=&#34;caps&#34;&gt;WSL2&lt;/span&gt;, it will launch Visual Studio Code on Windows, and set up a client/server bridge to &lt;span class=&#34;caps&#34;&gt;WSL2&lt;/span&gt; automatically. This allows us to use the Visual Studio Code front-end on Windows, with all the &lt;span class=&#34;caps&#34;&gt;IDE&lt;/span&gt; / editor features it supports, and it will communicate with our &lt;span class=&#34;caps&#34;&gt;WSL2&lt;/span&gt; backend to actually execute the&amp;nbsp;program.&lt;/p&gt;
&lt;p&gt;This way, we can use the &lt;span class=&#34;caps&#34;&gt;WSL2&lt;/span&gt; command line from Windows Terminal, with our code executing under &lt;span class=&#34;caps&#34;&gt;WSL2&lt;/span&gt;, but we get a graphical editing and debugging&amp;nbsp;experience:&lt;/p&gt;
&lt;img alt=&#34;/img/windows-terminal-vscode-with-wsl2.png&#34; src=&#34;https://fuqua.io/blog/img/windows-terminal-vscode-with-wsl2.png&#34; style=&#34;width: 100%;&#34;/&gt;
&lt;p&gt;This is especially useful when doing development in languages where Windows is a bit of a second-class citizen, like on NodeJS or&amp;nbsp;Python.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;enjoy-this-you-can-get-more&#34;&gt;
&lt;h3&gt;Enjoy this? You can get&amp;nbsp;more!&lt;/h3&gt;
&lt;p&gt;You can find all these tips and many more in my new book, &lt;a class=&#34;reference external&#34; href=&#34;https://packt.live/3gon3St&#34;&gt;Windows Terminal Tips, Tricks, and Productivity Hacks&lt;/a&gt;, which is currently $10 off on Amazon! Thanks for&amp;nbsp;reading.&lt;/p&gt;
&lt;embed&gt;
    &lt;style&gt;
        .strike { text-decoration: line-through; }
        li { margin: 8px 0 8px 0; }
    &lt;/style&gt;
&lt;/embed&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 09 May 2021 17:00:00 GMT</pubDate>
        <guid isPermaLink="false">tag:fuqua.io/blog,2021-05-10:/2021/05/tips-for-using-the-windows-command-line-effectively</guid>
    </item>
        
            <item>
        <title>A Lesser-Known C# Feature: Nested Object Initializers</title>
        <link>https://fuqua.io/blog/2020/12/a-lesser-known-csharp-feature-nested-object-initializers/</link>
        <description>&lt;p&gt;I&amp;#8217;ve been writing C# for quite some time now, but only recently found out about the &amp;quot;nested object initializers&amp;quot; syntax in C#. Nested object initializers elegantly solve problems for which I&amp;#8217;ve previously used workarounds. It&amp;#8217;s not a new feature; it was introduced in C# 3.0, under section 7.5.10.2 of the language&amp;nbsp;specification:&lt;/p&gt;
&lt;blockquote&gt;
An object initializer after the equals sign is a nested object initializer, i.e. an initialization of an embedded object. Instead of assigning a new value to the field or property, the assignments in the nested object initializer are treated as assignments to members of the field or property.&lt;/blockquote&gt;
&lt;p&gt;In case the above specification is not clear, we&amp;#8217;ll work through an example. C# has several types of initializer syntax, among which are object initializers and collection initializers. Nested object initializers could be considered a specialization of&amp;nbsp;both.&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;reviewing-object-and-collection-initializers&#34;&gt;
&lt;h3&gt;Reviewing Object and Collection&amp;nbsp;Initializers&lt;/h3&gt;
&lt;p&gt;Before diving into nested object initializers, let&amp;#8217;s review object initializers and collection initializers. These initializers provide a convenient syntax for object construction; they technically construct an &amp;quot;empty&amp;quot; object and then mutate that object as part of the initialization. Here&amp;#8217;s an example of&amp;nbsp;both:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// given classes defined like this:&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Company&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ceo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Employees&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Person&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// an object initializer for Company&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;apple&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Company&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// an object initializer for Person&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Ceo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Tim Cook&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// a collection initializer:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Employees&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Joe&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Janet&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;John&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the above example, the object initializer is used to initialize both the &lt;tt class=&#34;docutils literal&#34;&gt;Company&lt;/tt&gt; object and the &lt;tt class=&#34;docutils literal&#34;&gt;Person&lt;/tt&gt; objects. The collection initializer is used to create a new &lt;tt class=&#34;docutils literal&#34;&gt;List&amp;lt;Person&amp;gt;&lt;/tt&gt; and add 3 entries to it. Collection initializers can initialize any object that implements &lt;tt class=&#34;docutils literal&#34;&gt;IEnumerable&lt;/tt&gt; and contains an &lt;tt class=&#34;docutils literal&#34;&gt;Add&lt;/tt&gt; method (either as part of the type, or as an extension&amp;nbsp;method).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;nested-object-initializers&#34;&gt;
&lt;h3&gt;Nested Object&amp;nbsp;Initializers&lt;/h3&gt;
&lt;p&gt;Now, how do nested object initializers tie into this? In the previous code example, we were creating new objects (a new &lt;tt class=&#34;docutils literal&#34;&gt;Person&lt;/tt&gt; for the &lt;tt class=&#34;docutils literal&#34;&gt;Company.Ceo&lt;/tt&gt; property, and a new &lt;tt class=&#34;docutils literal&#34;&gt;List&amp;lt;Person&amp;gt;&lt;/tt&gt; for the &lt;tt class=&#34;docutils literal&#34;&gt;Company.Employees&lt;/tt&gt; property). Nested object initializers allow for &lt;strong&gt;mutating default values&lt;/strong&gt; in the&amp;nbsp;class.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s alter our class definition above. We all know that null values are a pain, so we could set default values for each property, and use nested object initializers during object&amp;nbsp;construction:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Company&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ceo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Employees&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;apple&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Company&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Ceo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Tim Cook&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Employees&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Joe&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Janet&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;John&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With the nested object initializer syntax, we remove the reference to the constructors for both properties, and it will mutate the existing, default&amp;nbsp;value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;where-is-this-useful&#34;&gt;
&lt;h3&gt;Where is this&amp;nbsp;useful?&lt;/h3&gt;
&lt;p&gt;The nested object initializer implies mutation of existing values, so it shouldn&amp;#8217;t be used everywhere; I prefer immutability where possible. However, there are still a few areas where this could be&amp;nbsp;useful.&lt;/p&gt;
&lt;p&gt;For nested object initializers with collection initializers, this helps resolve a conflict between wanting to use object initializers, and wanting to &lt;a class=&#34;reference external&#34; href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/guidelines-for-collections#collection-properties-and-return-values&#34;&gt;prefer empty collections over null collections&lt;/a&gt;. This was always a bit of a conflict for&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;For nested object initializers with object initializers, this could help in configuration scenarios, where we want to have some default configuration object. In this case, the nested object initializer could be used to override these default configuration&amp;nbsp;values.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;learning-more&#34;&gt;
&lt;h3&gt;Learning&amp;nbsp;more&lt;/h3&gt;
&lt;p&gt;The best documentation for this seems to be the &lt;a class=&#34;reference external&#34; href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/expressions#object-initializers&#34;&gt;C# Language Reference&lt;/a&gt;. There&amp;#8217;s also a &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/dotnet/docs/issues/12979&#34;&gt;GitHub issue&lt;/a&gt; asking for better documentation on this feature. I personally found the chat rooms available on gitter very helpful for learning more about this feature; special thanks to &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/HaloFour&#34;&gt;HaloFour&lt;/a&gt;, &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/Joe4evr&#34;&gt;Joe4evr&lt;/a&gt; and &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/jnm2&#34;&gt;jnm2&lt;/a&gt; for helping&amp;nbsp;out!&lt;/p&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 11 Dec 2020 17:00:00 GMT</pubDate>
        <guid isPermaLink="false">tag:fuqua.io/blog,2020-12-12:/2020/12/a-lesser-known-csharp-feature-nested-object-initializers</guid>
    </item>
        
            <item>
        <title>Microsoft Build 2020 – Highlights for .NET Developers</title>
        <link>https://fuqua.io/blog/2020/05/microsoft-build-2020-highlights-for-net-developers/</link>
        <description>&lt;p&gt;Over the course of the last three days, Microsoft Build 2020 released a flood of news and announcements.
For those of us who follow the .&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt; ecosystem, it can be difficult to wade through them&amp;nbsp;all!&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve collected a list of announcements that I think are interesting as a .&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt; developer, and added short
summaries. The announcements are grouped into four categories: &lt;span class=&#34;caps&#34;&gt;ASP&lt;/span&gt;.&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt;, .&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt;, Visual Studio and&amp;nbsp;Windows.&lt;/p&gt;
&lt;p&gt;In addition, each category is split into &amp;quot;released&amp;quot; (you can use it now!) or &amp;quot;preview / announced&amp;quot;
(you can test it out now, or&amp;nbsp;soon).&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;asp-net&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;caps&#34;&gt;ASP&lt;/span&gt;.&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&#34;section&#34; id=&#34;released&#34;&gt;
&lt;h4&gt;Released&lt;/h4&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;https://devblogs.microsoft.com/aspnet/blazor-webassembly-3-2-0-now-available/&#34;&gt;Blazor WebAssembly is released!&lt;/a&gt; - v3.2.0 is an official release &amp;#8211; it&amp;#8217;s not a preview anymore! It&amp;#8217;s considered ready for production use, but is not a Long Term Support&amp;nbsp;release.&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;https://devblogs.microsoft.com/aspnet/introducing-project-tye/&#34;&gt;Project Tye&lt;/a&gt; - a tool for deploying .&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt; core applications to&amp;nbsp;Kubernetes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;preview-announced&#34;&gt;
&lt;h4&gt;Preview /&amp;nbsp;Announced&lt;/h4&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-5-preview-4/&#34;&gt;&lt;span class=&#34;caps&#34;&gt;ASP&lt;/span&gt;.&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt; Core updates in .&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt; 5 Preview 4&lt;/a&gt; - Improved &lt;span class=&#34;caps&#34;&gt;HTTP&lt;/span&gt;/2 performance by adding support for HPack dynamic compression. Smaller docker image sizes by sharing layers between upstream&amp;nbsp;images.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;net&#34;&gt;
&lt;h3&gt;.&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&#34;section&#34; id=&#34;id1&#34;&gt;
&lt;h4&gt;Preview /&amp;nbsp;Announced&lt;/h4&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;https://devblogs.microsoft.com/dotnet/announcing-net-5-preview-4-and-our-journey-to-one-net/&#34;&gt;.&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt; 5 Preview 4&lt;/a&gt; - C# 9 and F# 5 previews, source generators for compile-time code generation / introspection. Also some updates on publishing to a single file application. &lt;span class=&#34;caps&#34;&gt;ARM&lt;/span&gt; processor support for Web / &lt;span class=&#34;caps&#34;&gt;UI&lt;/span&gt;&amp;nbsp;applications.&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;https://devblogs.microsoft.com/dotnet/welcome-to-c-9-0/&#34;&gt;C# 9 Preview&lt;/a&gt; - A lot of new functional features. This is just a preview &amp;#8211; features listed in this article might not make it into the final release, or might have different syntax after all the design issues have been figured out. But it&amp;#8217;s still exciting to see C# embrace&amp;nbsp;immutability!&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;https://devblogs.microsoft.com/dotnet/f-5-update-for-net-5-preview-4/&#34;&gt;F# 5 Preview&lt;/a&gt; - Better tooling, faster compiling, interoperability with C#&amp;#8217;s new &amp;quot;default interface member&amp;quot;&amp;nbsp;feature.&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;https://devblogs.microsoft.com/dotnet/introducing-net-multi-platform-app-ui/&#34;&gt;As part of .&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt; 5, Xamarin.Forms library is now called &lt;span class=&#34;caps&#34;&gt;MAUI&lt;/span&gt;&lt;/a&gt; - My guess is everyone will continue to call it Xamarin.Forms. This article also mentions that Xamarin.iOS and Xamarin.Android will be integrated into .&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt;&amp;nbsp;6.&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;https://devblogs.microsoft.com/dotnet/introducing-yarp-preview-1/&#34;&gt;&lt;span class=&#34;caps&#34;&gt;YARP&lt;/span&gt; Reverse Proxy Preview&lt;/a&gt; - High performance reverse proxy server. Think of it like an application load balancer / rewrite rules engine built as &lt;span class=&#34;caps&#34;&gt;ASP&lt;/span&gt;.&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt; Core&amp;nbsp;middleware.&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;https://github.com/microsoft/ProjectReunion&#34;&gt;Project Reunion&lt;/a&gt; - A polyfill library so you can use the same libraries (WinUI 3, WebView2, &lt;span class=&#34;caps&#34;&gt;MSIX&lt;/span&gt;) on both WinForms and &lt;span class=&#34;caps&#34;&gt;UWP&lt;/span&gt;&amp;nbsp;platforms.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;visual-studio&#34;&gt;
&lt;h3&gt;Visual&amp;nbsp;Studio&lt;/h3&gt;
&lt;div class=&#34;section&#34; id=&#34;id2&#34;&gt;
&lt;h4&gt;Released&lt;/h4&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;https://devblogs.microsoft.com/visualstudio/visual-studio-2019-v16-6-and-v16-7-preview-1-ship-today/&#34;&gt;&lt;span class=&#34;caps&#34;&gt;VS2019&lt;/span&gt; 16.6 released, with 16.7 in preview&lt;/a&gt; - &lt;span class=&#34;caps&#34;&gt;VS2019&lt;/span&gt; 16.6 contains a new &amp;quot;.&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt; Async Tool&amp;quot; for debugging applications. Better snapshot debugging and refactorings. Has a new &amp;quot;Web Tools for Azure&amp;quot; tool, as well as new C++ 20 standard library&amp;nbsp;features.&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;https://devblogs.microsoft.com/dotnet/windows-forms-designer-for-net-core-released/&#34;&gt;Windows Forms Designer for .&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt; Core&lt;/a&gt; - The WinForms designer now works with .&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt; Core WinForms&amp;nbsp;applications.&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;https://devblogs.microsoft.com/dotnet/ml-net-model-builder-is-now-a-part-of-visual-studio/&#34;&gt;&lt;span class=&#34;caps&#34;&gt;ML&lt;/span&gt;.&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt; Model Builder in Visual Studio&lt;/a&gt; - The existing &lt;span class=&#34;caps&#34;&gt;ML&lt;/span&gt;.&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt; Model Builder extension (which is super cool) is now integrated into Visual Studio. Add &amp;quot;Machine Learning&amp;quot; with just two clicks! &amp;#8230;plus years of&amp;nbsp;study.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;id3&#34;&gt;
&lt;h4&gt;Preview /&amp;nbsp;Announced&lt;/h4&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;https://devblogs.microsoft.com/visualstudio/expanding-visual-studio-2019-support-for-visual-studio-codespaces/&#34;&gt;Visual Studio 2019 can be used with Codespaces&lt;/a&gt; - Visual Studio Online is renamed to Visual Studio Codespaces. Visual Studio 2019 can now serve as a &amp;quot;client ui&amp;quot; to a codespace in the&amp;nbsp;cloud.&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;https://devblogs.microsoft.com/dotnet/using-visual-studio-codespaces-with-net-core/&#34;&gt;How to use .&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt; Core with Visual Studio Codespaces&lt;/a&gt; - A tour of the editing / testing / debugging experience of .&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt; Core with Visual Studio &lt;span class=&#34;strike&#34;&gt;Online&lt;/span&gt;&amp;nbsp;Codespaces.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;windows&#34;&gt;
&lt;h3&gt;Windows&lt;/h3&gt;
&lt;div class=&#34;section&#34; id=&#34;id4&#34;&gt;
&lt;h4&gt;Released&lt;/h4&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;https://devblogs.microsoft.com/commandline/windows-terminal-1-0/&#34;&gt;The new Windows Terminal hit 1.0&lt;/a&gt; - Supports tabs and split panes. &lt;span class=&#34;caps&#34;&gt;GPU&lt;/span&gt; accelerated rendering will display your compile errors blazing&amp;nbsp;fast.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;id5&#34;&gt;
&lt;h4&gt;Preview /&amp;nbsp;Announced&lt;/h4&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;https://devblogs.microsoft.com/commandline/windows-package-manager-preview/&#34;&gt;winget - a new windows package manager&lt;/a&gt; - Windows command line package manager like chocolately. As far as I can tell, it does not manage dependencies or updates&amp;nbsp;(yet?).&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;https://devblogs.microsoft.com/commandline/the-windows-subsystem-for-linux-build-2020-summary/&#34;&gt;Windows Subsystem For Linux (&lt;span class=&#34;caps&#34;&gt;WSL&lt;/span&gt;) 2&lt;/a&gt; - &lt;span class=&#34;caps&#34;&gt;WSL2&lt;/span&gt; will ship later this month in the Windows 10 May 2020 Update. Docker Desktop for Windows will replatform onto &lt;span class=&#34;caps&#34;&gt;WSL2&lt;/span&gt;. &lt;span class=&#34;caps&#34;&gt;GPU&lt;/span&gt; support for &lt;span class=&#34;caps&#34;&gt;GPU&lt;/span&gt; processing (think &lt;span class=&#34;caps&#34;&gt;CUDA&lt;/span&gt;, not intended for games). Linux &lt;span class=&#34;caps&#34;&gt;GUI&lt;/span&gt; app support via&amp;nbsp;wayland.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Whew! Even for a short summary, that still ended up being long. It&amp;#8217;s been an exciting few days for the .&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt; ecosystem, and .&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt; 5 promises to keep that excitement&amp;nbsp;alive.&lt;/p&gt;
&lt;embed&gt;
    &lt;style&gt;
        .strike { text-decoration: line-through; }
        li { margin: 8px 0 8px 0; }
    &lt;/style&gt;
&lt;/embed&gt;&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 21 May 2020 17:00:00 GMT</pubDate>
        <guid isPermaLink="false">tag:fuqua.io/blog,2020-05-22:/2020/05/microsoft-build-2020-highlights-for-net-developers</guid>
    </item>
        
            <item>
        <title>Native Websockets with Blazor WebAssembly</title>
        <link>https://fuqua.io/blog/2020/02/native-websockets-with-blazor-webassembly/</link>
        <description>&lt;p&gt;A couple of days ago, Blazor WebAssembly 3.2.0 Preview 1 was released (&lt;a class=&#34;reference external&#34; href=&#34;https://devblogs.microsoft.com/aspnet/blazor-webassembly-3-2-0-preview-1-release-now-available/&#34;&gt;announcement&lt;/a&gt;). I&amp;#8217;m personally excited about this release
because it&amp;#8217;s the first Blazor release that contains native support for client-side&amp;nbsp;websockets!&lt;/p&gt;
&lt;p&gt;Previously, if you wanted to use websockets, you either had to write your own wrapper, or use a larger library like
SignalR that did the wrapping for you. However, if you just wanted to use the normal &lt;tt class=&#34;docutils literal&#34;&gt;System.Net.WebSockets.ClientWebSocket&lt;/tt&gt; class that&amp;#8217;s built into .&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt;, you could&amp;nbsp;not.&lt;/p&gt;
&lt;p&gt;The Mono/&lt;span class=&#34;caps&#34;&gt;WASM&lt;/span&gt; project has actually supported &lt;tt class=&#34;docutils literal&#34;&gt;ClientWebSocket&lt;/tt&gt; for about a year (&lt;a class=&#34;reference external&#34; href=&#34;https://github.com/mono/mono/pull/12615&#34;&gt;&lt;span class=&#34;caps&#34;&gt;PR&lt;/span&gt; 12615&lt;/a&gt;). However, some recent changes in Blazor allowed the Blazor project to be able to consume them (&lt;a class=&#34;reference external&#34; href=&#34;https://github.com/dotnet/aspnetcore/issues/10489&#34;&gt;&lt;span class=&#34;caps&#34;&gt;PR&lt;/span&gt; 10489&lt;/a&gt;).
The ClientWebSocket implementation is ultimately just &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/mono/mono/blob/a2d1aec5d2c01483738dfa6e69202462bca68e2b/sdks/wasm/framework/src/WebAssembly.Net.WebSockets/ClientWebSocket.cs&#34;&gt;wrapping the &lt;span class=&#34;caps&#34;&gt;JS&lt;/span&gt; interop&lt;/a&gt; for you, but this greatly simplifies your code and removes third-party libraries from your&amp;nbsp;project.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s an example class that uses a ClientWebSocket in a Blazor chat client of mine, all bundled up neatly into the new &lt;tt class=&#34;docutils literal&#34;&gt;IAsyncEnumerable&lt;/tt&gt; feature of&amp;nbsp;C#8:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ChatClientConnection&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ClientWebSocket&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;websocket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Uri&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;websocketUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ChatClientConnection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ClientWebSocket&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;websocket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Uri&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;websocketUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;websocket&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;websocket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;websocketUrl&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;websocketUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;/// Connect to the websocket and begin yielding messages&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;/// received from the connection.&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IAsyncEnumerable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ConnectAsync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;        [EnumeratorCancellation]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CancellationToken&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cancellationToken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;websocket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ConnectAsync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;websocketUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cancellationToken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArraySegment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2048&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cancellationToken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IsCancellationRequested&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;WebSocketReceiveResult&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ms&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MemoryStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;websocket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReceiveAsync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cancellationToken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;ms&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Offset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EndOfMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

            &lt;span class=&#34;n&#34;&gt;ms&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Seek&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SeekOrigin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

            &lt;span class=&#34;k&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Encoding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span class=&#34;caps&#34;&gt;UTF8&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ms&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;

            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MessageType&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WebSocketMessageType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;/// Send a message on the websocket.&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;/// This method assumes you&amp;#39;ve already connected via ConnectAsync&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Task&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;SendStringAsync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CancellationToken&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cancellation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;encoded&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Encoding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span class=&#34;caps&#34;&gt;UTF8&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetBytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArraySegment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encoded&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;encoded&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;websocket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SendAsync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WebSocketMessageType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;endOfMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cancellation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What I love about this is it&amp;#8217;s just normal .&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt; code &amp;#8211; no third-party libraries at all, and it just works flawlessly when compiled to WebAssembly. Happy&amp;nbsp;WASMing!&lt;/p&gt;
</description>
        <pubDate>Fri, 31 Jan 2020 17:00:00 GMT</pubDate>
        <guid isPermaLink="false">tag:fuqua.io/blog,2020-02-01:/2020/02/native-websockets-with-blazor-webassembly</guid>
    </item>
        
            <item>
        <title>.NET Conf Thailand 2019</title>
        <link>https://fuqua.io/blog/2019/11/net-conf-thailand-2019/</link>
        <description>&lt;p&gt;.&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt; Conf Thailand 2019 was a huge success, thanks again to &lt;a class=&#34;reference external&#34; href=&#34;https://twitter.com/kidchenko&#34;&gt;Jose Barbosa&lt;/a&gt; and &lt;a class=&#34;reference external&#34; href=&#34;https://www.facebook.com/codesanookpage&#34;&gt;Theeranit (Aaron) Pongtongmuang&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I was invited to speak, and I covered the new features in C# 8.0. There are a&amp;nbsp;ton!&lt;/p&gt;
&lt;ol class=&#34;arabic simple&#34;&gt;
&lt;li&gt;Nullable Reference&amp;nbsp;Types&lt;/li&gt;
&lt;li&gt;Async&amp;nbsp;Enumerables&lt;/li&gt;
&lt;li&gt;Recursive&amp;nbsp;Patterns&lt;/li&gt;
&lt;li&gt;Indices and&amp;nbsp;Ranges&lt;/li&gt;
&lt;li&gt;Default Interface&amp;nbsp;Members&lt;/li&gt;
&lt;li&gt;Static Local&amp;nbsp;Functions&lt;/li&gt;
&lt;li&gt;Null Coallescing&amp;nbsp;Assignment&lt;/li&gt;
&lt;li&gt;Readonly&amp;nbsp;Members&lt;/li&gt;
&lt;li&gt;Using&amp;nbsp;Statements&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I have my presentation slides and code available &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/waf/DotNetConfThailand.2019.CSharp8&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can see my talk on &lt;a class=&#34;reference external&#34; href=&#34;https://www.facebook.com/dotnetconf/videos/487578191836482/&#34;&gt;the dotnetconf page&lt;/a&gt;, however the audio volume is too soft to hear. Oh well! You can get
similar content by watching Mads Torgersen&amp;#8217;s talk (&lt;a class=&#34;reference external&#34; href=&#34;https://channel9.msdn.com/Events/dotnetConf/NET-Conf-2019/Whats-new-in-C-8-Part-1&#34;&gt;Part 1&lt;/a&gt;) and Bill Wagner&amp;#8217;s talk (&lt;a class=&#34;reference external&#34; href=&#34;https://channel9.msdn.com/Events/dotnetConf/NET-Conf-2019/B103&#34;&gt;Part 2&lt;/a&gt;).&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Nov 2019 17:00:00 GMT</pubDate>
        <guid isPermaLink="false">tag:fuqua.io/blog,2019-11-02:/2019/11/net-conf-thailand-2019</guid>
    </item>
        
            <item>
        <title>Troubleshooting Assembly Binding Issues in .NET</title>
        <link>https://fuqua.io/blog/2019/03/troubleshooting-assembly-binding-issues-in-net/</link>
        <description>&lt;p&gt;If you&amp;#8217;ve developed .&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt; for any length of time, chances are you&amp;#8217;ve run into a gnarly error like&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;System.&lt;span class=&#34;caps&#34;&gt;IO&lt;/span&gt;.FileLoadException: Could not load file or assembly &amp;#8216;AcmeCorp.Foobar.Utilities, Version=1.2.0, Culture=neutral, PublicKeyToken=367d582291c765f7&amp;#8217; or one of its dependencies.
The located assembly&amp;#8217;s manifest definition does not match the assembly&amp;nbsp;reference.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a pretty puzzling error. It means that it &lt;strong&gt;found&lt;/strong&gt; version 1.2.0 of a &lt;span class=&#34;caps&#34;&gt;DLL&lt;/span&gt;, but did not use it because a different version was requested (e.g.&amp;nbsp;1.3.0).&lt;/p&gt;
&lt;p&gt;There are a couple of gotchas when troubleshooting these types of&amp;nbsp;errors.&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;ensure-you-don-t-have-any-version-mismatches&#34;&gt;
&lt;h3&gt;Ensure you don&amp;#8217;t have any version&amp;nbsp;mismatches&lt;/h3&gt;
&lt;p&gt;As a first step, ensure that all projects in your solution reference the same version of the problematic &lt;span class=&#34;caps&#34;&gt;DLL&lt;/span&gt; or NuGet package. This is by far the easiest fix. For NuGet packages in Visual Studio, you can right-click your Solution, choose &amp;quot;Manage NuGet Packages for Solution&amp;quot; and use the &amp;quot;Consolidate&amp;quot; tab to fix the&amp;nbsp;issue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;use-fusion-logs-to-better-understand-the-problem&#34;&gt;
&lt;h3&gt;Use Fusion Logs to better understand the&amp;nbsp;problem&lt;/h3&gt;
&lt;p&gt;.&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt; will log more details about the problem to the &amp;quot;Fusion Logs&amp;quot; system. By default, it&amp;#8217;s disabled. Enable it by opening your &amp;quot;Developer Command Prompt for Visual Studio&amp;quot; from the start menu &lt;strong&gt;as administrator&lt;/strong&gt;. Type the command &lt;tt class=&#34;docutils literal&#34;&gt;fuslogvw&lt;/tt&gt; to start the &amp;quot;Fusion Log&amp;nbsp;Viewer.&amp;quot;&lt;/p&gt;
&lt;img alt=&#34;/img/fuslogvw.png&#34; class=&#34;align-center&#34; src=&#34;https://fuqua.io/blog/img/fuslogvw.png&#34; style=&#34;width: 80%;&#34;/&gt;
&lt;p&gt;Click the settings button, choose &amp;quot;Log bind failures to disk&amp;quot; and then click &lt;span class=&#34;caps&#34;&gt;OK&lt;/span&gt;. Start your application again and you should see more details about the bind failures show up in the Fusion Log&amp;nbsp;Viewer.&lt;/p&gt;
&lt;p&gt;If you don&amp;#8217;t see any log entries show up, there are a few things you can&amp;nbsp;try:&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;First try restarting your application and, if you&amp;#8217;re developing a web application, restarting your App&amp;nbsp;Pool.&lt;/li&gt;
&lt;li&gt;The Fusion Log Viewer surprisingly uses the Internet Explorer cache, so you can try clearing the cache by going to &amp;quot;Internet Options → Browsing History → Delete&amp;quot; and deleting the Temporary Internet Files option. Weird but&amp;nbsp;true!&lt;/li&gt;
&lt;li&gt;If you&amp;#8217;re using &lt;span class=&#34;caps&#34;&gt;ASP&lt;/span&gt;.&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt;, you&amp;#8217;ll see additional error information on your &lt;span class=&#34;caps&#34;&gt;ASP&lt;/span&gt;.&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt; error page simply by having Fusion Logs&amp;nbsp;enabled.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Don&amp;#8217;t forget to disable Fusion Logs when you&amp;#8217;re done! There&amp;#8217;s a performance impact for having it&amp;nbsp;enabled.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;create-an-assembly-binding-redirect&#34;&gt;
&lt;h3&gt;Create an Assembly Binding&amp;nbsp;Redirect&lt;/h3&gt;
&lt;p&gt;Finally, you can add an &lt;a class=&#34;reference external&#34; href=&#34;https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/redirect-assembly-versions&#34;&gt;Assembly Binding Redirect&lt;/a&gt; to your App.config or Web.config of your entry project by using the &lt;a class=&#34;reference external&#34; href=&#34;https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/runtime/bindingredirect-element&#34;&gt;bindingRedirect&lt;/a&gt; element. This only works if there are no breaking changes between the two different versions of the&amp;nbsp;&lt;span class=&#34;caps&#34;&gt;DLL&lt;/span&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;lt;!-- the following should be placed under the hierarchy &amp;lt;configuration&amp;gt;&amp;lt;runtime&amp;gt;&amp;lt;assemblyBinding&amp;gt; --&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;dependentAssembly&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;assemblyIdentity&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;AcmeCorp.Foobar.Utilities&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;publicKeyToken=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;367d582291c765f7&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;culture=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;neutral&amp;quot;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;bindingRedirect&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;oldVersion=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;0.0.0.0-1.3.0.0&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;newVersion=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;1.3.0.0&amp;quot;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependentAssembly&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above configuration states &amp;quot;If you find an AcmeCorp.Foobar.Utilities.dll with a version between 0.0.0.0 and 1.3.0.0, redirect it to&amp;nbsp;1.3.0.0.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;publicKeyToken&lt;/strong&gt; can be retrieved using the &lt;tt class=&#34;docutils literal&#34;&gt;sn&lt;/tt&gt; utility. From your Developer Command Prompt, &lt;tt class=&#34;docutils literal&#34;&gt;cd&lt;/tt&gt; to the location of your &lt;span class=&#34;caps&#34;&gt;DLL&lt;/span&gt;, and run &lt;tt class=&#34;docutils literal&#34;&gt;sn &lt;span class=&#34;pre&#34;&gt;-T&lt;/span&gt; YourDll.dll&lt;/tt&gt;. It will display the public key&amp;nbsp;token.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;oldVersion / newVersion&lt;/strong&gt; can be confusing. There are many different types of versions that a &lt;span class=&#34;caps&#34;&gt;DLL&lt;/span&gt; can have. What we care about is version in the assembly manifest. From your Developer Command Prompt, &lt;tt class=&#34;docutils literal&#34;&gt;cd&lt;/tt&gt; to the location of your &lt;span class=&#34;caps&#34;&gt;DLL&lt;/span&gt; and run &lt;tt class=&#34;docutils literal&#34;&gt;ildasm YourDll.dll&lt;/tt&gt;. &lt;span class=&#34;caps&#34;&gt;ILDASM&lt;/span&gt; will open your assembly. Click on the &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;caps&#34;&gt;MANIFEST&lt;/span&gt;&lt;/tt&gt; node, and you&amp;#8217;ll see a version like &lt;tt class=&#34;docutils literal&#34;&gt;.ver 1:3:0:0&lt;/tt&gt; which would correspond to version &lt;tt class=&#34;docutils literal&#34;&gt;1.3.0.0&lt;/tt&gt; in your&amp;nbsp;App/Web.config.&lt;/p&gt;
&lt;p&gt;These are all the tricks I&amp;#8217;ve learned to troubleshooting various assembly binding issues. Ideally you can have consistent versions of each &lt;span class=&#34;caps&#34;&gt;DLL&lt;/span&gt; in your application, but hey, the world is a complex&amp;nbsp;place!&lt;/p&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 15 Mar 2019 17:00:00 GMT</pubDate>
        <guid isPermaLink="false">tag:fuqua.io/blog,2019-03-16:/2019/03/troubleshooting-assembly-binding-issues-in-net</guid>
    </item>
        
            <item>
        <title>A Caching HTTP Proxy using Titanium Web Proxy</title>
        <link>https://fuqua.io/blog/2019/01/a-caching-http-proxy-using-titanium-web-proxy/</link>
        <description>&lt;p&gt;At my work at Jetabroad I do a lot of integration with third-party webservices (like everyone these days).
The webservices, especially the test endpoints, are of variable stability and&amp;nbsp;responsiveness.&lt;/p&gt;
&lt;p&gt;The responsiveness issue can be maddening when you&amp;#8217;re trying to iterate quickly. I prefer doing
the bulk of my development via unit tests or integration tests to isolate myself as much as possible.
However, I still ultimately find myself developing directly against these third-party services from
time to&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;I built &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/waf/catchy&#34;&gt;Catchy&lt;/a&gt; to help solve this pain. When you start it, you provide a whitelist of domains to
intercept. Catchy will examine your outbound &lt;span class=&#34;caps&#34;&gt;REST&lt;/span&gt; or &lt;span class=&#34;caps&#34;&gt;SOAP&lt;/span&gt; requests to those domains, and then
cache the inbound response based on the hash of the outbound&amp;nbsp;request.&lt;/p&gt;
&lt;img alt=&#34;https://raw.githubusercontent.com/waf/catchy/master/demo.gif&#34; class=&#34;align-center&#34; src=&#34;https://raw.githubusercontent.com/waf/catchy/master/demo.gif&#34; style=&#34;width: 80%;&#34;/&gt;
&lt;div class=&#34;section&#34; id=&#34;titanium-web-proxy-an-amazing-library&#34;&gt;
&lt;h3&gt;Titanium Web Proxy &amp;#8211; an amazing&amp;nbsp;library&lt;/h3&gt;
&lt;p&gt;Early prototypes were originally built on top of Fiddler Core, but after Fiddler Core was killed by
Telerik, I transitioned it over to the excellent &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/justcoding121/Titanium-Web-Proxy&#34;&gt;Titanium Web Proxy&lt;/a&gt; project. It makes intercepting
and analyzing requests, even over &lt;span class=&#34;caps&#34;&gt;TLS&lt;/span&gt;, very&amp;nbsp;straightforward.&lt;/p&gt;
&lt;p&gt;The proxy code itself is straightforward. The following snippet of Titanium Web Proxy code allows
you to intercept &lt;span class=&#34;caps&#34;&gt;HTTP&lt;/span&gt; and &lt;span class=&#34;caps&#34;&gt;HTTPS&lt;/span&gt; requests (via &lt;span class=&#34;caps&#34;&gt;HTTP&lt;/span&gt; 1.1 and &lt;span class=&#34;caps&#34;&gt;HTTP2&lt;/span&gt;!) and run arbitrary C# functions
to inspect / modify the requests and&amp;nbsp;responses:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;proxyServer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ProxyServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;explicitEndPoint&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ExplicitProxyEndPoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ipAddress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;proxyServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EnableHttp2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;proxyServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CertificateManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CreateRootCertificate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;proxyServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CertificateManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TrustRootCertificate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;proxyServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AddEndPoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;explicitEndPoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// specify your callbacks here&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;explicitEndPoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BeforeTunnelConnectRequest&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BeforeTunnelConnectRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;proxyServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BeforeRequest&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OnRequestHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;proxyServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BeforeResponse&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OnResponseHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;proxyServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ExceptionFunc&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OnErrorFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;proxyServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;proxyServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SetAsSystemProxy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;explicitEndPoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ProxyProtocolType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AllHttp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;#8217;s rare to find a network library that works completely as advertised, and exposes a complex
concept behind an easy to understand &lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt;. Well done to&amp;nbsp;them!&lt;/p&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 18 Jan 2019 17:00:00 GMT</pubDate>
        <guid isPermaLink="false">tag:fuqua.io/blog,2019-01-19:/2019/01/a-caching-http-proxy-using-titanium-web-proxy</guid>
    </item>
        
            <item>
        <title>.NET Conf Thailand 2018</title>
        <link>https://fuqua.io/blog/2018/11/net-conf-thailand-2018/</link>
        <description>&lt;p&gt;I recently spoke at .&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt; Conf Thailand 2018! Thanks to &lt;a class=&#34;reference external&#34; href=&#34;https://twitter.com/kidchenko&#34;&gt;Jose Barbosa&lt;/a&gt; and &lt;a class=&#34;reference external&#34; href=&#34;https://www.facebook.com/codesanookpage&#34;&gt;Theeranit (Aaron) Pongtongmuang&lt;/a&gt; for&amp;nbsp;organizing!&lt;/p&gt;
&lt;p&gt;I covered what&amp;#8217;s new in C# 7.0 to 7.3 (performance, performance, performance!), and a sneak preview of what&amp;#8217;s upcoming in C#8 (non-nullable reference&amp;nbsp;types).&lt;/p&gt;
&lt;p&gt;Demo code is available &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/waf/DotNetConfThailand.2018.CSharpDemo&#34;&gt;on GitHub&lt;/a&gt; and, while recordings are not available, you can see Mads Torgersen cover similar topics &lt;a class=&#34;reference external&#34; href=&#34;https://channel9.msdn.com/Events/dotnetConf/2018/S103&#34;&gt;on Channel9&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Nov 2018 17:00:00 GMT</pubDate>
        <guid isPermaLink="false">tag:fuqua.io/blog,2018-11-10:/2018/11/net-conf-thailand-2018</guid>
    </item>
        
            <item>
        <title>Cross Platform CI with CoreRT and AppVeyor</title>
        <link>https://fuqua.io/blog/2018/10/cross-platform-ci-with-corert-and-appveyor/</link>
        <description>&lt;p&gt;CoreRT is an ahead-of-time (&lt;span class=&#34;caps&#34;&gt;AOT&lt;/span&gt;) compiler and runtime for .&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt; Core. It builds .&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt; Core applications into a single, small binary that runs without requiring .&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt; Core to be installed on the system. This makes distribution easy, especially to Mac &lt;span class=&#34;caps&#34;&gt;OS&lt;/span&gt; and Linux, which may not have .&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt; Core installed. On all platforms, the program will have a faster start-up time and lower memory&amp;nbsp;footprint.&lt;/p&gt;
&lt;p&gt;Like most developers, I have a pet static site generator I&amp;#8217;m working on. As it&amp;#8217;s a command line utility that will be distributed to users that most likely won&amp;#8217;t have .&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt; Core installed, I decided to try CoreRT. The &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/dotnet/corert/blob/master/Documentation/intro-to-corert.md&#34;&gt;initial setup&lt;/a&gt; was simple, but it took some time to figure out how to set up continuous integration (&lt;span class=&#34;caps&#34;&gt;CI&lt;/span&gt;) on AppVeyor. I wanted the &lt;span class=&#34;caps&#34;&gt;CI&lt;/span&gt; process to produce binaries artifacts from the &lt;tt class=&#34;docutils literal&#34;&gt;master&lt;/tt&gt; branch for each platform. As a bonus, if I tag a commit, it should build a release for each platform and post them to the GitHub Releases&amp;nbsp;page.&lt;/p&gt;
&lt;p&gt;One drawback of AppVeyor is that it does not yet support Mac &lt;span class=&#34;caps&#34;&gt;OS&lt;/span&gt;. However, there are plans to support it &lt;cite&gt;sometime this year&lt;/cite&gt;. I figure that if I have it working on both Windows and Linux, it should hopefully not be too difficult to add Mac &lt;span class=&#34;caps&#34;&gt;OS&lt;/span&gt;&amp;nbsp;support.&lt;/p&gt;
&lt;p&gt;AppVeyor uses a &lt;span class=&#34;caps&#34;&gt;YAML&lt;/span&gt; file for its configuration, and like most &lt;span class=&#34;caps&#34;&gt;CI&lt;/span&gt; platforms, there&amp;#8217;s more than one way to accomplish your goal. I found that the following configuration is a nice mixture of Don&amp;#8217;t-Repeat-Yourself and&amp;nbsp;maintainability:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;0.0.{build}&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;clone_depth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# Windows with &lt;span class=&#34;caps&#34;&gt;VS2017&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;Visual Studio 2017&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# default version of &amp;#39;ubuntu&amp;#39; is old for compatibility reasons. Specify the newest &lt;span class=&#34;caps&#34;&gt;LTS&lt;/span&gt;.&lt;/span&gt;
  &lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;ubuntu1804&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;branches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;only&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;master&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# items prefixed with &amp;#39;cmd:&amp;#39; run only on Windows&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# items prefixed with &amp;#39;sh:&amp;#39; run only on Ubuntu&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;git config --global core.autocrlf true&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;install&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# application dependencies&lt;/span&gt;
  &lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;choco install pandoc&lt;/span&gt;
  &lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;sh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;wget https://github.com/jgm/pandoc/releases/download/2.3.1/pandoc-2.3.1-1-amd64.deb &amp;amp;&amp;amp; sudo dpkg -i pandoc-2.3.1-1-amd64.deb&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# corert dependencies https://github.com/dotnet/corert/blob/master/Documentation/prerequisites-for-building.md&lt;/span&gt;
  &lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;sh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;sudo apt-get install -y clang libkrb5-dev&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;before_build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;dotnet --version&lt;/span&gt;
  &lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;dotnet restore --verbosity m&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;build_script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;dotnet build&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;test_script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;cd Nessie.Tests&lt;/span&gt;
  &lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;dotnet test&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;after_test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;cd ..&lt;/span&gt;
  &lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;dotnet publish -c release -r win-x64 -o dist/windows&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# specifying the absolute path here is required to remove paths from archive&lt;/span&gt;
  &lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;7z a Nessie/dist/windows/nessie-windows-x64.zip %APPVEYOR_BUILD_FOLDER%/Nessie/dist/windows/nessie.exe&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# by default, CoreRT on linux tries to use clang-3.9, reset this to version independent&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# https://github.com/dotnet/corert/issues/5654&lt;/span&gt;
  &lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;sh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;export CppCompilerAndLinker=clang&lt;/span&gt;
  &lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;sh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;dotnet publish -c release -r linux-x64 -o dist/linux&lt;/span&gt;
  &lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;sh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;7z a Nessie/dist/linux/nessie-linux-x64.zip $APPVEYOR_BUILD_FOLDER/Nessie/dist/linux/Nessie&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# for / matrix docs&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# https://www.appveyor.com/blog/2018/04/25/specialized-build-matrix-configuration-in-appveyor/&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;only&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;Visual Studio 2017&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;artifacts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
     &lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Nessie/dist/windows/nessie-windows-x64.zip&amp;#39;&lt;/span&gt;
       &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;nessie-windows&lt;/span&gt;

  &lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;only&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;ubuntu1804&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;artifacts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;p p-Indicator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Nessie/dist/linux/nessie-linux-x64.zip&amp;#39;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;nessie-linux&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;deploy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;provider&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;GitHub&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# encrypted token, it&amp;#39;s ok to be in version control&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# https://ci.appveyor.com/tools/encrypt&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;auth_token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;secure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;zQl909f8bNxmaKdpgiE730kw9vjsNvoV0SjwN/fk3lv9dy7d9cdhgo0/iz/apRqc&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;artifact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;nessie-windows, nessie-linux&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;prerelease&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;true&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;appveyor_repo_tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I won&amp;#8217;t go through this line-by-line, as hopefully the comments make everything clear. Here are the things that took me a while to figure&amp;nbsp;out:&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;Use the image &lt;tt class=&#34;docutils literal&#34;&gt;ubuntu1804&lt;/tt&gt; if you want up-to-date ubuntu. The normal &lt;tt class=&#34;docutils literal&#34;&gt;ubuntu&lt;/tt&gt; tag is still&amp;nbsp;16.04.&lt;/li&gt;
&lt;li&gt;On Ubuntu, you need to run &lt;tt class=&#34;docutils literal&#34;&gt;sudo &lt;span class=&#34;pre&#34;&gt;apt-get&lt;/span&gt; install &lt;span class=&#34;pre&#34;&gt;-y&lt;/span&gt; clang &lt;span class=&#34;pre&#34;&gt;libkrb5-dev&lt;/span&gt;&lt;/tt&gt; to get the required dependencies for&amp;nbsp;CoreRT.&lt;/li&gt;
&lt;li&gt;&lt;tt class=&#34;docutils literal&#34;&gt;dotnet publish &lt;span class=&#34;pre&#34;&gt;-c&lt;/span&gt; release &lt;span class=&#34;pre&#34;&gt;-r&lt;/span&gt; RELEASE_ID&lt;/tt&gt; will generate the binary files. See the &lt;a class=&#34;reference external&#34; href=&#34;https://docs.microsoft.com/en-us/dotnet/core/rid-catalog&#34;&gt;&lt;span class=&#34;caps&#34;&gt;RID&lt;/span&gt; Catalog&lt;/a&gt; for a list of valid operating system&amp;nbsp;identifiers.&lt;/li&gt;
&lt;li&gt;&lt;tt class=&#34;docutils literal&#34;&gt;export CppCompilerAndLinker=clang&lt;/tt&gt; is required if you don&amp;#8217;t want to manually install an ancient version of clang on Ubuntu. This environment variable overrides the default Clang 3.9 that CoreRT uses by&amp;nbsp;default.&lt;/li&gt;
&lt;li&gt;For command line scripts, prefix &lt;tt class=&#34;docutils literal&#34;&gt;sh:&lt;/tt&gt; for Linux and &lt;tt class=&#34;docutils literal&#34;&gt;cmd:&lt;/tt&gt; for Windows. For platform-specific configurations that are &lt;strong&gt;not&lt;/strong&gt; command line scripts (e.g. the &lt;tt class=&#34;docutils literal&#34;&gt;artifacts&lt;/tt&gt; configuration) you need to use AppVeyor&amp;#8217;s matrix configuration. Essentially, the &lt;tt class=&#34;docutils literal&#34;&gt;only&lt;/tt&gt; is a filter, and the sibling tags like &lt;tt class=&#34;docutils literal&#34;&gt;artifacts&lt;/tt&gt; will take effect when the condition is&amp;nbsp;true.&lt;/li&gt;
&lt;li&gt;&lt;dl class=&#34;first docutils&#34;&gt;
&lt;dt&gt;The &lt;tt class=&#34;docutils literal&#34;&gt;deploy:&lt;/tt&gt; configuration (for posting releases to github) requires the &lt;tt class=&#34;docutils literal&#34;&gt;appveyor_repo_tag&lt;/tt&gt; condition. Otherwise, a build on master branch would create a release and tag it in git. This tag would then trigger another&amp;nbsp;build!&lt;/dt&gt;
&lt;dd&gt;&lt;ul class=&#34;first last&#34;&gt;
&lt;li&gt;Each commit to &lt;tt class=&#34;docutils literal&#34;&gt;master&lt;/tt&gt; will trigger a build. When you&amp;#8217;re happy with &lt;tt class=&#34;docutils literal&#34;&gt;master&lt;/tt&gt;, tag the commit and push it. AppVeyor will then create a release on&amp;nbsp;GitHub.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is more of a brain dump than a blog post, but I hope this ends up being useful to other people out there working with CoreRT and&amp;nbsp;AppVeyor!&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Oct 2018 17:00:00 GMT</pubDate>
        <guid isPermaLink="false">tag:fuqua.io/blog,2018-10-21:/2018/10/cross-platform-ci-with-corert-and-appveyor</guid>
    </item>
        
            <item>
        <title>Rendering an ASP.NET Core MVC action to a string</title>
        <link>https://fuqua.io/blog/2018/07/rendering-an-asp-net-core-mvc-action-to-a-string/</link>
        <description>&lt;p&gt;I&amp;#8217;m currently going through my &amp;quot;build a static site engine&amp;quot; phase that most developers pass
through at some point in their career. As part of this, I wanted to write a normal &lt;span class=&#34;caps&#34;&gt;ASP&lt;/span&gt;.&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt;
Core application complete with server-side rendering, and then have the option to entirely
pre-render it to&amp;nbsp;disk.&lt;/p&gt;
&lt;p&gt;It turns out that this is quite difficult &amp;#8211; StackOverflow and GitHub issues were a barren
wasteland of half-working answers. Most everyone assumes that you have a ControllerContext,
or at least an HttpContext! Rendering it from a command line application was unheard&amp;nbsp;of!&lt;/p&gt;
&lt;p&gt;After much experimentation, I managed to get it working! You can see a complete example in
the &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/waf/RazorToStringExample&#34;&gt;RazorToStringExample&lt;/a&gt;&amp;nbsp;repository.&lt;/p&gt;
&lt;p&gt;For example, here&amp;#8217;s how you can render the route &lt;tt class=&#34;docutils literal&#34;&gt;Home/Index&lt;/tt&gt; to a&amp;nbsp;string:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Program&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Task&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// async Main requires C# 7.1&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;website&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CreateWebHostBuilder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// invoke your route to get the model result.&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ViewResult&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HomeController&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// render the view with the model&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// must be scoped due to an asp.net internal IViewBufferScope service being scoped&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scope&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;website&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CreateScope&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;renderer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scope&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ServiceProvider&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RazorViewToStringRenderer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RazorViewToStringRenderer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;renderer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RenderViewToStringAsync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Home/Index&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IWebHostBuilder&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;CreateWebHostBuilder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;WebHost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CreateDefaultBuilder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UseStartup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Startup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The magic happens in the RazorViewToStringRenderer, which is &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/waf/AspNetCoreMvcToStringExample/blob/master/RazorToStringExample/Services/RazorViewToStringRenderer.cs&#34;&gt;defined here&lt;/a&gt;. We have to set up a lot of &lt;span class=&#34;caps&#34;&gt;ASP&lt;/span&gt;.&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt; Core services to get everything working, but so far it&amp;#8217;s handled everything I&amp;#8217;ve been able to throw at&amp;nbsp;it!&lt;/p&gt;
</description>
        <pubDate>Sat, 28 Jul 2018 17:00:00 GMT</pubDate>
        <guid isPermaLink="false">tag:fuqua.io/blog,2018-07-29:/2018/07/rendering-an-asp-net-core-mvc-action-to-a-string</guid>
    </item>
        
            <item>
        <title>Parsing PowerShell Programatically</title>
        <link>https://fuqua.io/blog/2017/12/parsing-powershell-programatically/</link>
        <description>&lt;p&gt;I&amp;#8217;ve recently been working with a lot of PowerShell at work, and the experience has been, well, less than perfect. PowerShell is a dynamically-typed scripting language, and is most often used for administering Windows systems. The combination of making system changes and the runtime errors associated with dynamically-typed languages has been frustrating. It&amp;#8217;s quite common to get the system into a weird or inconsistent state when developing PowerShell&amp;nbsp;scripts.&lt;/p&gt;
&lt;p&gt;Ideally all your PowerShell is properly orchestrated with &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;-WhatIf&lt;/span&gt;&lt;/tt&gt; and &lt;tt class=&#34;docutils literal&#34;&gt;SupportsShouldProcess&lt;/tt&gt; functionality, but in my experience it&amp;#8217;s common for there to be large differences in behavior between &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;-WhatIf&lt;/span&gt;&lt;/tt&gt; execution and real&amp;nbsp;execution.&lt;/p&gt;
&lt;p&gt;The end goal is to move away from large chunks of PowerShell, to something like &lt;span class=&#34;caps&#34;&gt;DSC&lt;/span&gt; or Docker. However, while that process is underway, my team and I still have this day-to-day pain&amp;nbsp;point.&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;the-value-of-a-build-step&#34;&gt;
&lt;h3&gt;The value of a build&amp;nbsp;step&lt;/h3&gt;
&lt;p&gt;Other dynamically-typed languages also have this problem, most notably JavaScript. However, JavaScript has two mitigations. First, JavaScript is most often used in the context of a browser or servicing an &lt;span class=&#34;caps&#34;&gt;HTTP&lt;/span&gt; request. In these scenarios there&amp;#8217;s rarely persistent state across executions. Second, JavaScript has webpack / TypeScript, which serves as a build step that can catch dumb mistakes like typo-ing a function name or argument&amp;nbsp;value.&lt;/p&gt;
&lt;p&gt;For PowerShell, the closest we have is &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/PowerShell/PSScriptAnalyzer&#34;&gt;PSScriptAnalyzer&lt;/a&gt;, and it helps a lot &amp;#8211; it&amp;#8217;s a static analysis engine that warns about style and best practice violations. However, it isn&amp;#8217;t the complete solution. I&amp;#8217;m more interested in catching errors like &amp;quot;you&amp;#8217;re invoking a function that doesn&amp;#8217;t&amp;nbsp;exist.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;powershell-s-built-in-parser&#34;&gt;
&lt;h3&gt;PowerShell&amp;#8217;s built-in&amp;nbsp;parser&lt;/h3&gt;
&lt;p&gt;Turns out, .&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt; has great built-in support for parsing and analyzing PowerShell code! It almost rivals Roslyn from the C# world. All the functionality is contained in the namespace &lt;a class=&#34;reference external&#34; href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.language&#34;&gt;System.Management.Automation.Language&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This functionality is available on any ScriptBlock in&amp;nbsp;PowerShell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ast&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Attributes&lt;/span&gt;         &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;UsingStatements&lt;/span&gt;    &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ParamBlock&lt;/span&gt;         &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;BeginBlock&lt;/span&gt;         &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ProcessBlock&lt;/span&gt;       &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;EndBlock&lt;/span&gt;           &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;DynamicParamBlock&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ScriptRequirements&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Extent&lt;/span&gt;             &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Parent&lt;/span&gt;             &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Additionally, because it&amp;#8217;s all .&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt;, it&amp;#8217;s simple to build your own analyzer / linter in C#. The namespace contains a parser to convert a file into an abstract syntax&amp;nbsp;tree:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ScriptBlockAst&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ast&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ParseFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;filename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tokens&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ParseError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;errors&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As well as a visitor pattern implementation for traversing the abstract syntax&amp;nbsp;tree:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;/// AstVisitor is used for basic scenarios requiring traversal of the nodes&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;/// in an Ast. An implementation of AstVisitor does not explicitly traverse&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;/// the Ast; the engine traverses all nodes and calls the appropriate method&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;/// on each node.&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;AstVisitor2&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AstVisitAction&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;VisitScriptBlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ScriptBlockAst&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scriptBlockAst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AstVisitAction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Continue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AstVisitAction&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;VisitFunctionDefinition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FunctionDefinitionAst&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;functionDefinitionAst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AstVisitAction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Continue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AstVisitAction&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;VisitCommand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CommandAst&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;commandAst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AstVisitAction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Continue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AstVisitAction&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;VisitStatementBlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;StatementBlockAst&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;statementBlockAst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AstVisitAction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Continue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AstVisitAction&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;VisitIfStatement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IfStatementAst&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ifStmtAst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AstVisitAction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Continue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AstVisitAction&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;VisitSwitchStatement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SwitchStatementAst&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;switchStatementAst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AstVisitAction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Continue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AstVisitAction&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;VisitForEachStatement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ForEachStatementAst&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;forEachStatementAst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AstVisitAction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Continue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//...etc&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;/// Each Visit* method in AstVisitor2 returns one of these&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;/// values to control how visiting nodes in the &lt;span class=&#34;caps&#34;&gt;AST&lt;/span&gt; should proceed.&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AstVisitAction&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Continue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Continue visiting all nodes the ast.&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;SkipChildren&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Skip visiting child nodes of currently visited node&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;StopVisit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Stop visiting all nodes.&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;finding-invalid-function-invocations&#34;&gt;
&lt;h3&gt;Finding invalid function&amp;nbsp;invocations&lt;/h3&gt;
&lt;p&gt;Let&amp;#8217;s write a simple linter that detects the following program. It&amp;#8217;s syntactically correct, but would result in a runtime error due to a missing &lt;tt class=&#34;docutils literal&#34;&gt;Bar&lt;/tt&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Foo&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;Write-Output&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Foo&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Bar&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Foo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have three functions in the above program: &lt;tt class=&#34;docutils literal&#34;&gt;Foo&lt;/tt&gt;, &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;Write-Output&lt;/span&gt;&lt;/tt&gt; and our missing function &lt;tt class=&#34;docutils literal&#34;&gt;Bar&lt;/tt&gt;. &lt;tt class=&#34;docutils literal&#34;&gt;Foo&lt;/tt&gt; is defined in our program, &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;Write-Output&lt;/span&gt;&lt;/tt&gt; is available in the standard library, and &lt;tt class=&#34;docutils literal&#34;&gt;Bar&lt;/tt&gt; is undefined and will result in a runtime&amp;nbsp;error.&lt;/p&gt;
&lt;p&gt;The basic algorithm for detecting this invalid code is something like&amp;nbsp;this:&lt;/p&gt;
&lt;ol class=&#34;arabic simple&#34;&gt;
&lt;li&gt;Visit each node in&amp;nbsp;order&lt;/li&gt;
&lt;li&gt;If we find a function definition, record the function&amp;#8217;s name and&amp;nbsp;body.&lt;/li&gt;
&lt;li&gt;If we find a function invocation, check if it&amp;#8217;s one of the functions we know about. If so, recursively visit that function&amp;#8217;s body. If we don&amp;#8217;t know about it, it&amp;#8217;s an error that should be&amp;nbsp;reported.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;step-1-visiting-each-node-in-order&#34;&gt;
&lt;h3&gt;Step 1: Visiting each node in&amp;nbsp;order&lt;/h3&gt;
&lt;p&gt;For Step 1, we simply subclass the provided abstract &lt;tt class=&#34;docutils literal&#34;&gt;AstVisitor2&lt;/tt&gt; base class.
The base class will visit each node for us, and we can override methods if we want to perform an action.
We&amp;#8217;ll need to know about what functions are defined already (like &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;Write-Output&lt;/span&gt;&lt;/tt&gt;) so let&amp;#8217;s take that
as a constructor parameter &lt;tt class=&#34;docutils literal&#34;&gt;moduleCommands&lt;/tt&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;AnalysisVisitor&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AstVisitor2&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// an initially empty collection that will accumulate the locally-defined functions&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IImmutableDictionary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FunctionDefinitionAst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LocalCommands&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// an collection that has the list of already defined functions, like Write-Output&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IImmutableDictionary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CommandInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ModuleCommands&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// The errors we&amp;#39;ve found during our analysis&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ValidationErrors&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;AnalysisVisitor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;IImmutableDictionary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FunctionDefinitionAst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;localCommands&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;IImmutableDictionary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CommandInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;moduleCommands&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LocalCommands&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;localCommands&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ModuleCommands&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;moduleCommands&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ValidationErrors&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can call our visitor like&amp;nbsp;so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ast&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ParseFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;quot;./myFile.ps1&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tokens&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ParseError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;errors&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fileVisitor&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AnalysisVisitor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;localFunctions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ImmutableDictionary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FunctionDefinitionAst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Empty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;moduleFunctions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetInScopeFunctions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Visit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fileVisitor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Errors:&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NewLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fileVisitor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ValidationErrors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The function &lt;tt class=&#34;docutils literal&#34;&gt;GetInScopeFunctions&lt;/tt&gt; is outside the scope of this article, but if you&amp;#8217;re curious you can &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/waf/PSCommandLint/blob/d1d579e7d83c526640e8dd2287da005b2ebe025d/PSCommandLint/Analysis/CommandAnalyzer.cs#L75&#34;&gt;see the definition here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;step-2-keeping-track-of-function-definitions&#34;&gt;
&lt;h3&gt;Step 2: Keeping track of function&amp;nbsp;definitions&lt;/h3&gt;
&lt;p&gt;For Step 2, we add an override for &lt;tt class=&#34;docutils literal&#34;&gt;VisitFunctionDefinition&lt;/tt&gt;. We&amp;#8217;ll add each visited function definition to our &lt;tt class=&#34;docutils literal&#34;&gt;LocalCommands&lt;/tt&gt; property:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AstVisitAction&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;VisitFunctionDefinition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FunctionDefinitionAst&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;functionDefinitionAst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;functionName&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;functionDefinitionAst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LocalCommands&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ContainsKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;functionName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ValidationErrors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Overwriting existing function &amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;functionName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;LocalCommands&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LocalCommands&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SetItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;functionName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;functionDefinitionAst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Track that we&amp;#39;ve seen the function, but don&amp;#39;t analyze the body.&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// the body will be analyzed when the function is called.&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// If we tried to analyze the body now, we may find invocations of&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// functions that will be defined later.&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AstVisitAction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SkipChildren&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;step-3-following-function-invocations&#34;&gt;
&lt;h3&gt;Step 3: Following function&amp;nbsp;invocations&lt;/h3&gt;
&lt;p&gt;For Step 3, we&amp;#8217;ll add another override, this time for &lt;tt class=&#34;docutils literal&#34;&gt;VisitCommand&lt;/tt&gt; which represents a function&amp;nbsp;invocation.&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;If the invoked command is in our &lt;tt class=&#34;docutils literal&#34;&gt;ModuleCommands&lt;/tt&gt; variable, we&amp;#8217;ll skip it, as it&amp;#8217;s defined in another module. This will handle functions like &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;Write-Output&lt;/span&gt;&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;If the invoked command is in our &lt;tt class=&#34;docutils literal&#34;&gt;LocalCommands&lt;/tt&gt; variable, we&amp;#8217;ll then recursively visit the function body and merge the result with our overall&amp;nbsp;result.&lt;/li&gt;
&lt;li&gt;If we don&amp;#8217;t know about the command, then we&amp;#8217;ve identified the&amp;nbsp;error!&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AstVisitAction&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;VisitCommand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CommandAst&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;commandAst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;commandName&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;commandAst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetCommandName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ModuleCommands&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ContainsKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;commandName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// nothing to analyze, it&amp;#39;s in another module (e.g. Write-Output)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;VisitCommand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;commandAst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LocalCommands&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TryGetValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;commandName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;functionDefinition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// recursively visit the invoked function&amp;#39;s body&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;functionVisitor&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AnalysisVisitor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LocalCommands&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ModuleCommands&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;functionDefinition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Visit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;functionVisitor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;MergeResult&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;functionVisitor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;VisitCommand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;commandAst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;ValidationErrors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;commandName&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot; is not defined&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;VisitCommand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;commandAst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All done! This very basic analyzer will detect our error. There&amp;#8217;s all sorts of improvements we can do, such as
support for dot-sourced files and descending into modules, but these features will follow the same pattern as our
simple&amp;nbsp;analyzer.&lt;/p&gt;
&lt;p&gt;Overall, I was very impressed with the ease of analysis of PowerShell code. All code in this post is available in my repo &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/waf/PSCommandLint&#34;&gt;PSCommandLint&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 15 Dec 2017 17:00:00 GMT</pubDate>
        <guid isPermaLink="false">tag:fuqua.io/blog,2017-12-16:/2017/12/parsing-powershell-programatically</guid>
    </item>
        
            <item>
        <title>Level up your VsVim</title>
        <link>https://fuqua.io/blog/2017/08/level-up-your-vsvim/</link>
        <description>&lt;!-- This data file has been placed in the public domain. --&gt;
&lt;!-- Derived from the Unicode character mappings available from
&lt;http://www.w3.org/2003/entities/xml/&gt;.
Processed by unicode2rstsubs.py, part of Docutils:
&lt;http://docutils.sourceforge.net&gt;. --&gt;
&lt;p&gt;If you&amp;#8217;re like me, you installed Visual Studio, installed &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/jaredpar/VsVim&#34;&gt;VsVim&lt;/a&gt;, and then happily started coding. However, did you know that Visual Studio&amp;#8217;s semantic understanding and manipulation of your code is exposed to&amp;nbsp;VsVim?&lt;/p&gt;
&lt;p&gt;For example, you might already know that pressing &lt;tt class=&#34;docutils literal&#34;&gt;gd&lt;/tt&gt; in VsVim will &amp;quot;go to the definition&amp;quot; of a method. But what if we want to &amp;quot;go to the implementation&amp;quot; e.g. through an interface to the underlying concrete method? The standard &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;Ctrl-F12&lt;/span&gt;&lt;/tt&gt; requires some contortions, and maybe requires glancing down at your&amp;nbsp;keyboard.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s easy to fix this; just add this mapping to your &lt;tt class=&#34;docutils literal&#34;&gt;~\_vsvimrc&lt;/tt&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;map gi :vsc Edit.GoToImplementation&amp;lt;&lt;span class=&#34;caps&#34;&gt;CR&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#8217;s break this down. The overall command is just a standard &lt;a class=&#34;reference external&#34; href=&#34;http://learnvimscriptthehardway.stevelosh.com/chapters/03.html&#34;&gt;vim mapping&lt;/a&gt;, with the syntax &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;:map&amp;nbsp;{keys}&amp;nbsp;{action}&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;&lt;tt class=&#34;docutils literal&#34;&gt;gi&lt;/tt&gt; is the key combo we want to&amp;nbsp;press.&lt;/li&gt;
&lt;li&gt;Everything after that is the action that VsVim will execute:&lt;ul&gt;
&lt;li&gt;&lt;tt class=&#34;docutils literal&#34;&gt;:vsc&lt;/tt&gt; is VsVim&amp;#8217;s &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/jaredpar/VsVim/wiki/VsVim-Nonstandard-Behavior#integration-with-visual-studio&#34;&gt;Visual Studio Command&lt;/a&gt;&amp;nbsp;runner&lt;/li&gt;
&lt;li&gt;&lt;tt class=&#34;docutils literal&#34;&gt;Edit.GoToImplementation&lt;/tt&gt; is a command exposed by Visual&amp;nbsp;Studio.&lt;/li&gt;
&lt;li&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&amp;lt;&lt;span class=&#34;caps&#34;&gt;CR&lt;/span&gt;&amp;gt;&lt;/tt&gt; is a carriage return (i.e. pressing &amp;quot;Enter&amp;quot;), which executes the&amp;nbsp;command.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are some similarly useful&amp;nbsp;mappings:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;map gr :vsc Edit.FindAllReferences&amp;lt;&lt;span class=&#34;caps&#34;&gt;CR&lt;/span&gt;&amp;gt;
map gp :vsc Edit.PeekDefinition&amp;lt;&lt;span class=&#34;caps&#34;&gt;CR&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Adding your own mappings is&amp;nbsp;easy:&lt;/p&gt;
&lt;ol class=&#34;arabic simple&#34;&gt;
&lt;li&gt;Find a Visual Studio command you want to execute. You can explore the commands available in Visual Studio with the Command Window (View → Other Windows → Command Window), or by going to Tools → Options → Environment →&amp;nbsp;Keyboard.&lt;/li&gt;
&lt;li&gt;Add that command mapping to your &lt;tt class=&#34;docutils literal&#34;&gt;~\_vsvimrc&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Reload the configuration by running &lt;tt class=&#34;docutils literal&#34;&gt;:source ~\_vsvimrc&lt;/tt&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;section&#34; id=&#34;more-useful-mappings&#34;&gt;
&lt;h3&gt;More Useful&amp;nbsp;Mappings&lt;/h3&gt;
&lt;p&gt;Here are some additional mappings I use. I&amp;#8217;m using the standard &lt;a class=&#34;reference external&#34; href=&#34;http://learnvimscriptthehardway.stevelosh.com/chapters/05.html#nonrecursive-mapping&#34;&gt;nnoremap&lt;/a&gt; for a normal mode non-recursive&amp;nbsp;map:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;let mapleader=&amp;quot;,&amp;quot;

&amp;quot; break out of the tyranny of text! Navigate by method
nnoremap &amp;lt;leader&amp;gt;m :vsc Edit.NextMethod&amp;lt;cr&amp;gt;
nnoremap &amp;lt;leader&amp;gt;M :vsc Edit.PreviousMethod&amp;lt;cr&amp;gt;

nnoremap R :vsc Refactor.Rename&amp;lt;cr&amp;gt;

&amp;quot; jump between compilation errors
nnoremap &amp;lt;leader&amp;gt;e :vsc View.NextError&amp;lt;cr&amp;gt;
nnoremap &amp;lt;leader&amp;gt;E :vsc View.PreviousError&amp;lt;cr&amp;gt;

&amp;quot; testing and debugging
nnoremap &amp;lt;leader&amp;gt;b :vsc Debug.ToggleBreakpoint&amp;lt;cr&amp;gt;
nnoremap &amp;lt;leader&amp;gt;r :vsc TestExplorer.RunAllTestsInContext&amp;lt;cr&amp;gt;
nnoremap &amp;lt;leader&amp;gt;R :vsc TestExplorer.DebugAllTestsInContext&amp;lt;cr&amp;gt;

&amp;quot; open the change parameter window, a bit fake because it&amp;#39;s not a text-object
nnoremap cia :vsc Refactor.ReorderParameters&amp;lt;cr&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you find other useful mappings, feel free to share them&amp;nbsp;below!&lt;/p&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 07 Aug 2017 17:00:00 GMT</pubDate>
        <guid isPermaLink="false">tag:fuqua.io/blog,2017-08-08:/2017/08/level-up-your-vsvim</guid>
    </item>
        
            <item>
        <title>The Implementation of C# Local Functions</title>
        <link>https://fuqua.io/blog/2017/07/the-implementation-of-csharp-local-functions/</link>
        <description>&lt;p&gt;C# 7 local functions provide a more intuitive syntax over creating verbose System.Func delegates, as well as being more capable (they support ref and out parameters, async, generics, etc). In addition, some articles have mentioned that local functions compile down to normal methods, thus reducing &lt;span class=&#34;caps&#34;&gt;GC&lt;/span&gt; allocations when compared to&amp;nbsp;System.Func.&lt;/p&gt;
&lt;p&gt;I was curious about that last part. How does it work? Let&amp;#8217;s open up the dotPeek decompiler and find&amp;nbsp;out!&lt;/p&gt;
&lt;p&gt;First, here&amp;#8217;s a simple test program using a local&amp;nbsp;function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Program&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AddFive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;AddFive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// the local function declaration&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;InnerAdd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;InnerAdd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Admittedly, the above local function is not really needed in this case, but it&amp;#8217;s simple enough code that the decompilation won&amp;#8217;t be&amp;nbsp;scary!&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;decompiling-the-program&#34;&gt;
&lt;h3&gt;Decompiling the&amp;nbsp;Program&lt;/h3&gt;
&lt;p&gt;After decompiling the above program, we get the following for the &lt;tt class=&#34;docutils literal&#34;&gt;AddFive&lt;/tt&gt; method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;AddFive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// object of a compiler-generated type is created&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// reference to a compiler-generated method&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Program&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AddFive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g__InnerAdd1_0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Program&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c__DisplayClass1_0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above comments are helpfully added by the decompiler. As we can see, the C# compiler created the following for&amp;nbsp;us:&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;Program.&amp;lt;AddFive&amp;gt;g__InnerAdd1_0&lt;/span&gt;&lt;/tt&gt; &amp;#8211; this is our InnerAdd function, converted to a normal static function in the Program class.  &amp;lt;AddFive&amp;gt; is simply part of the name, it&amp;#8217;s not a generic type. Note that if the enclosing method is an instance method, the generated function will be an instance&amp;nbsp;method.&lt;/li&gt;
&lt;li&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;Program.&amp;lt;&amp;gt;c__DisplayClass1_0&lt;/span&gt;&lt;/tt&gt; &amp;#8211; This is a generated class. It captures the &lt;tt class=&#34;docutils literal&#34;&gt;a&lt;/tt&gt; parameter, and is passed by reference into our&amp;nbsp;function.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;inspecting-the-intermediate-language-il&#34;&gt;
&lt;h3&gt;Inspecting the Intermediate Language&amp;nbsp;(&lt;span class=&#34;caps&#34;&gt;IL&lt;/span&gt;)&lt;/h3&gt;
&lt;p&gt;In order to look into the generated class and function, we need to look at the &lt;span class=&#34;caps&#34;&gt;IL&lt;/span&gt; code. Here is the &lt;span class=&#34;caps&#34;&gt;IL&lt;/span&gt; code for the generated class that captures the &lt;tt class=&#34;docutils literal&#34;&gt;a&lt;/tt&gt; parameter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;nested&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sealed&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ansi&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;beforefieldinit&lt;/span&gt;
  &lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c__DisplayClass1_0&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mscorlib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ValueType&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;custom&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;    [mscorlib]&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Runtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CompilerServices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CompilerGeneratedAttribute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ctor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;int32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Two interesting things about this are that it only has one field, &lt;tt class=&#34;docutils literal&#34;&gt;int32 a&lt;/tt&gt;, that is used to pass our &lt;tt class=&#34;docutils literal&#34;&gt;a&lt;/tt&gt; parameter to the function, and that the class extends from &lt;a class=&#34;reference external&#34; href=&#34;https://msdn.microsoft.com/en-us/library/system.valuetype(v=vs.110).aspx#Anchor_4&#34;&gt;System.ValueType&lt;/a&gt;. System.ValueType is the base class for all value types, so the generated value type will not cause heap allocations. The C# compiler prevents user code from extending&amp;nbsp;System.ValueType.&lt;/p&gt;
&lt;p&gt;Next, let&amp;#8217;s look at the generated&amp;nbsp;method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assembly&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hidebysig&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;int32&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AddFive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g__InnerAdd1_0&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;int32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;      [in]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;valuetype&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Demo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Program&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c__DisplayClass1_0&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;obj1&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cil&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;managed&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;custom&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;      [mscorlib]&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Runtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CompilerServices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CompilerGeneratedAttribute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ctor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;maxstack&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;IL_0000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ldarg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;// obj1&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;IL_0001&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ldfld&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;int32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Demo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Program&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c__DisplayClass1_0&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;IL_0006&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ldarg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;// b&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;IL_0007&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;add&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;IL_0008&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt;

  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// end of method Program::&amp;#39;&amp;lt;AddFive&amp;gt;g__InnerAdd1_0&amp;#39;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// end of class Demo.Program&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Despite being a bit long, this is pretty straight-forward. It&amp;#8217;s a static function that takes two parameters, &lt;tt class=&#34;docutils literal&#34;&gt;int b&lt;/tt&gt; and our generated &lt;tt class=&#34;docutils literal&#34;&gt;obj1&lt;/tt&gt;. It loads our argument obj1 onto the stack, then loads field &lt;tt class=&#34;docutils literal&#34;&gt;obj1.a&lt;/tt&gt;, then loads our argument &lt;tt class=&#34;docutils literal&#34;&gt;b&lt;/tt&gt;. Next, it calls add, which pops the top two values off the stack and adds them, then pushes the result back on the stack. Finally, it calls &lt;tt class=&#34;docutils literal&#34;&gt;ret&lt;/tt&gt; to return that&amp;nbsp;result.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;adding-more-complexity&#34;&gt;
&lt;h3&gt;Adding More&amp;nbsp;Complexity&lt;/h3&gt;
&lt;p&gt;Let&amp;#8217;s make things a bit more interesting. What if our nested function mutates (&lt;em&gt;gasp&lt;/em&gt;)?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;AddFive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;InnerAdd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;InnerAdd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class=&#34;docutils literal&#34;&gt;InnerAdd&lt;/tt&gt; function is now a &lt;tt class=&#34;docutils literal&#34;&gt;void&lt;/tt&gt; function, that mutates &lt;tt class=&#34;docutils literal&#34;&gt;a&lt;/tt&gt; in the outer scope. In this case, our decompiled AddFive function looks like&amp;nbsp;this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;AddFive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;// object of a compiler-generated type is created&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;Program&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c__DisplayClass1_0&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cDisplayClass10&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Program&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c__DisplayClass1_0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;// reference to a compiler-generated field&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;cDisplayClass10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;// reference to a compiler-generated method&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;Program&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AddFive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g__InnerAdd1_0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cDisplayClass10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;// reference to a compiler-generated field&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cDisplayClass10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is more interesting than the first case. We can see that our generated class is set up ahead of time, then passed into the generated static function, and then all subsequent references to the parameter &lt;tt class=&#34;docutils literal&#34;&gt;a&lt;/tt&gt; are rewritten into references to the generated field!&amp;nbsp;Fascinating.&lt;/p&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 25 Jul 2017 17:00:00 GMT</pubDate>
        <guid isPermaLink="false">tag:fuqua.io/blog,2017-07-26:/2017/07/the-implementation-of-csharp-local-functions</guid>
    </item>
        
            <item>
        <title>Splitting Thai words with Browser APIs</title>
        <link>https://fuqua.io/blog/2017/06/splitting-thai-words-with-browser-apis/</link>
        <description>&lt;p&gt;One of the difficulties for students learning the Thai language is the lack of spaces between words. For example, here is a simple sentence in&amp;nbsp;Thai:&lt;/p&gt;
&lt;p class=&#34;align-center&#34;&gt;สวัสดีครับกินข้าวหรือยัง&lt;/p&gt;
&lt;p&gt;After some time, students start to recognize the shapes of the words and it becomes effortless to read. Before that time, however, it&amp;#8217;s quite a&amp;nbsp;struggle!&lt;/p&gt;
&lt;p&gt;I found a neat trick yesterday for splitting Thai sentences into words with JavaScript in Chrome. There&amp;#8217;s no native &lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt; for understanding Thai text, but it&amp;#8217;s possible to piggyback on top of the browser&amp;#8217;s text selection&amp;nbsp;APIs.&lt;/p&gt;
&lt;p&gt;When a word is double-clicked in the browser, the browser will select that word&amp;#8212;and this selection is localization-aware! This functionality is exposed in the non-standard &lt;a class=&#34;reference external&#34; href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Selection/modify&#34;&gt;Selection.modify&lt;/a&gt; &lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt;. While this &lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt; is present in every browser, I&amp;#8217;ve found it only works on Thai text in&amp;nbsp;Chrome.&lt;/p&gt;
&lt;p&gt;&lt;tt class=&#34;docutils literal&#34;&gt;Selection.modify&lt;/tt&gt; is a bit like the old-school &amp;quot;turtle&amp;quot; game where a pen is given a command with a direction and a distance, and it draws a line in that direction for that distance. In our case, we&amp;#8217;re &amp;quot;drawing&amp;quot; the selection of text. The &lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt; looks like&amp;nbsp;this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;modify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;alter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;direction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;granularity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;&lt;strong&gt;alter&lt;/strong&gt;: &amp;quot;move&amp;quot; to move the current cursor position or &amp;quot;extend&amp;quot; to extend a range of selected&amp;nbsp;text.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;direction&lt;/strong&gt;: &amp;quot;forward&amp;quot; or &amp;quot;backward&amp;quot; &amp;#8211; the direction to move/extend the selection. This is a locale-aware definition. Additionally, &amp;quot;left&amp;quot; and &amp;quot;right&amp;quot; are locale-invariant&amp;nbsp;options.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;granularity&lt;/strong&gt;: &amp;quot;character&amp;quot; or &amp;quot;word&amp;quot; &amp;#8211; the distance to move/extend the selection. Chrome implements many more options for this&amp;nbsp;parameter.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;sel.modify(&amp;quot;extend&amp;quot;,&lt;/span&gt; &amp;quot;forward&amp;quot;, &amp;quot;word&amp;quot;)&lt;/tt&gt; would extend the current selection forward by one word. By measuring the selection range after each call, we can get the indices of each&amp;nbsp;word.&lt;/p&gt;
&lt;p&gt;The actual code ends up being pretty&amp;nbsp;short:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;สวัสดีครับกินข้าวหรือยัง&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;↓ split ↓&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;button&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;click&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.input&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.output&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getSelection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// our selection api&lt;/span&gt;

            &lt;span class=&#34;c1&#34;&gt;// set selection range to [0, 0]&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textContent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;sel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;collapse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

            &lt;span class=&#34;c1&#34;&gt;// instruct the browser to select each word, then read the&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;// selection and output it.&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textContent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nx&#34;&gt;sel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;modify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;extend&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;forward&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;word&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
                &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;focusOffset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textContent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;substring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
                &lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

                &lt;span class=&#34;nx&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textContent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;  &amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here is the&amp;nbsp;result:&lt;/p&gt;
&lt;div class=&#34;input&#34;&gt;สวัสดีครับกินข้าวหรือยัง&lt;/div&gt;
&lt;button&gt;↓ split ↓&lt;/button&gt;
&lt;div class=&#34;output&#34;&gt;&lt;/div&gt;

&lt;script&gt;
    document
        .querySelector(&#34;button&#34;)
        .addEventListener(&#34;click&#34;, () =&gt; {
            const input = document.querySelector(&#39;.input&#39;);
            const output = document.querySelector(&#39;.output&#39;);
            const sel = window.getSelection(); // our selection api

            // set selection range to [0, 0]
            output.textContent = &#39;&#39;;
            sel.collapse(input, 0);
            var start = 0;
            var end = 0;

            // instruct the browser to select each word, then read the
            // selection and output it.
            while(end &lt; input.textContent.length) {
                sel.modify(&#39;extend&#39;, &#39;forward&#39;, &#39;word&#39;);
                end = sel.focusOffset;
                const word = input.textContent.substring(start, end);
                start = end;

                output.textContent += word + &#34;  &#34;;
            }
        }, false);
&lt;/script&gt;&lt;p&gt;I think this is a pretty neat&amp;nbsp;trick!&lt;/p&gt;
</description>
        <pubDate>Fri, 02 Jun 2017 17:00:00 GMT</pubDate>
        <guid isPermaLink="false">tag:fuqua.io/blog,2017-06-03:/2017/06/splitting-thai-words-with-browser-apis</guid>
    </item>
        
            <item>
        <title>Solving the Zebra Puzzle with LINQ and C# 7</title>
        <link>https://fuqua.io/blog/2017/01/solving-the-zebra-puzzle-with-linq-and-c-7/</link>
        <description>&lt;p&gt;I recently ran across &lt;a class=&#34;reference external&#34; href=&#34;https://en.wikipedia.org/wiki/Zebra_Puzzle&#34;&gt;the Zebra Puzzle&lt;/a&gt;, a logic puzzle from about 50 years&amp;nbsp;ago:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class=&#34;arabic simple&#34;&gt;
&lt;li&gt;There are five&amp;nbsp;houses.&lt;/li&gt;
&lt;li&gt;The Englishman lives in the red&amp;nbsp;house.&lt;/li&gt;
&lt;li&gt;The Spaniard owns the&amp;nbsp;dog.&lt;/li&gt;
&lt;li&gt;Coffee is drunk in the green&amp;nbsp;house.&lt;/li&gt;
&lt;li&gt;The Ukrainian drinks&amp;nbsp;tea.&lt;/li&gt;
&lt;li&gt;The green house is immediately to the right of the ivory&amp;nbsp;house.&lt;/li&gt;
&lt;li&gt;The Old Gold smoker owns&amp;nbsp;snails.&lt;/li&gt;
&lt;li&gt;Kools are smoked in the yellow&amp;nbsp;house.&lt;/li&gt;
&lt;li&gt;Milk is drunk in the middle&amp;nbsp;house.&lt;/li&gt;
&lt;li&gt;The Norwegian lives in the first&amp;nbsp;house.&lt;/li&gt;
&lt;li&gt;The man who smokes Chesterfields lives in the house next to the man with the&amp;nbsp;fox.&lt;/li&gt;
&lt;li&gt;Kools are smoked in the house next to the house where the horse is&amp;nbsp;kept.&lt;/li&gt;
&lt;li&gt;The Lucky Strike smoker drinks orange&amp;nbsp;juice.&lt;/li&gt;
&lt;li&gt;The Japanese smokes&amp;nbsp;Parliaments.&lt;/li&gt;
&lt;li&gt;The Norwegian lives next to the blue&amp;nbsp;house.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, who drinks water? Who owns the&amp;nbsp;zebra?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This problem is a bit of a pain to solve by hand, so it&amp;#8217;s no surprise that there&amp;#8217;s &lt;a class=&#34;reference external&#34; href=&#34;http://rosettacode.org/wiki/Zebra_puzzle&#34;&gt;a long list of programs available to solve it&lt;/a&gt;. If you look at the C# solution on that page, you may be dismayed at how long and enterprisey it is. It clocks in at about 450 lines, using the Microsoft Solver Foundation. While it gets points for using a logic engine, the code is pretty&amp;nbsp;unreadable.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;reference external&#34; href=&#34;https://en.wikipedia.org/wiki/Peter_Norvig&#34;&gt;Peter Norvig&lt;/a&gt; wrote a solution in Python, which is available in his &lt;a class=&#34;reference external&#34; href=&#34;https://www.udacity.com/wiki/cs212/unit-2&#34;&gt;Udacity &lt;span class=&#34;caps&#34;&gt;CS212&lt;/span&gt;&lt;/a&gt; course. I&amp;#8217;ve reproduced it here. The numbered comments refer to the corresponding requirement number from the original problem&amp;nbsp;description.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;itertools&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;zebra_puzzle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;quot;Return a tuple (&lt;span class=&#34;caps&#34;&gt;WATER&lt;/span&gt;, &lt;span class=&#34;caps&#34;&gt;ZEBRA&lt;/span&gt;) indicating their house numbers.&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;houses&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;middle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#1&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;orderings&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;itertools&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;permutations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;houses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span class=&#34;caps&#34;&gt;WATER&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span class=&#34;caps&#34;&gt;ZEBRA&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;red&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;green&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ivory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;yellow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;blue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;orderings&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;imright&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;green&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ivory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;#6&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Englishman&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Spaniard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ukranian&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Japanese&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Norwegian&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;orderings&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Englishman&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;red&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;#2&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Norwegian&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;#10&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nextto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Norwegian&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;blue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;#15&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;coffee&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tea&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;milk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span class=&#34;caps&#34;&gt;WATER&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;orderings&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;coffee&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;green&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;#4&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ukranian&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tea&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;#5&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;milk&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;middle&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;#9&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OldGold&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Kools&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Chesterfields&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LuckyStrike&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Parliaments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;orderings&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Kools&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;yellow&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;#8&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LuckyStrike&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oj&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;#13&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Japanese&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Parliaments&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;#14&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;snails&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;horse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span class=&#34;caps&#34;&gt;ZEBRA&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;orderings&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Spaniard&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dog&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;#3&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OldGold&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;snails&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;#7&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nextto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Chesterfields&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#12&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nextto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Kools&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;horse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;#11&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;imright&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;quot;House h1 is immediately right of h2 if h1-h2 == 1.&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;nextto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;quot;Two houses are next to each other if they differ by 1.&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zebra_puzzle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#8217;s take a moment to understand this code. This solution represents each house as an integer. It generates all permutations of houses, and then self-joins these permutations (called &lt;tt class=&#34;docutils literal&#34;&gt;orderings&lt;/tt&gt;) repeatedly. On each join, it binds each integer to an attribute name, like &amp;#8216;Englishman&amp;#8217;, &amp;#8216;red&amp;#8217;, or &amp;#8216;coffee&amp;#8217;. Each requirement in the above problem description is then a simple integer equality check. It applies each requirements as early as possible to filter out invalid&amp;nbsp;permutations.&lt;/p&gt;
&lt;p&gt;In my opinion, this is an incredibly readable and concise solution compared to the existing C# solution, and its fast execution time (a couple of milliseconds) shows that you don&amp;#8217;t always need a high-powered logic engine if you&amp;#8217;re dealing with a relatively small number of possible solutions. I wanted to solve this problem in a similar way, in C#. It ended up being an interesting tour through some new C# 7&amp;nbsp;features.&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;c-implementation&#34;&gt;
&lt;h3&gt;C#&amp;nbsp;Implementation&lt;/h3&gt;
&lt;p&gt;Since we&amp;#8217;ll be using some new C# 7 features in this post, if you&amp;#8217;re following along at home, you&amp;#8217;ll want to do the&amp;nbsp;following:&lt;/p&gt;
&lt;ol class=&#34;arabic simple&#34;&gt;
&lt;li&gt;Download the most recent Visual Studio 2017 release (currently in &lt;span class=&#34;caps&#34;&gt;RC&lt;/span&gt;). This will also install the latest pre-release version of C#&amp;nbsp;7.&lt;/li&gt;
&lt;li&gt;Create a new solution, and install the &lt;tt class=&#34;docutils literal&#34;&gt;System.ValueTuple&lt;/tt&gt; pre-release Nuget package. This will enable some additional C# 7&amp;nbsp;features.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;First up, let&amp;#8217;s knock out the easy part: writing the helper functions. Nothing too interesting here, it&amp;#8217;s just a straightforward translation of the python helper&amp;nbsp;functions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;/// Is house h1 immediately right of h2?&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ImmediatelyRight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;/// Are house h1 and h2 next to each other?&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;NextTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Abs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;new-c-7-feature-deconstruction&#34;&gt;
&lt;h3&gt;New C# 7 feature:&amp;nbsp;Deconstruction&lt;/h3&gt;
&lt;p&gt;Next, we need to set up the initial house variables. The python version uses destructuring here, so we do the same, using C# 7&amp;#8217;s &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/dotnet/roslyn/blob/master/docs/features/deconstruction.md&#34;&gt;new deconstruction feature&lt;/a&gt; on the second&amp;nbsp;line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// set up the houses&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;houses&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;middle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;houses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above deconstruction statement splits the &lt;tt class=&#34;docutils literal&#34;&gt;houses&lt;/tt&gt; array into 5 separate variables. We only care about the first and middle houses, so we discard the other variables by using the underscore discard variable in their&amp;nbsp;places.&lt;/p&gt;
&lt;p&gt;However, if we write that exact code, it won&amp;#8217;t compile! C# doesn&amp;#8217;t know how to deconstruct an array. We can teach C# how to do this by writing a &lt;tt class=&#34;docutils literal&#34;&gt;Deconstruct&lt;/tt&gt; extension method for&amp;nbsp;arrays:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Deconstruct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;third&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fourth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;second&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;third&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;fourth&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;rest&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Skip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Any type can implement &lt;tt class=&#34;docutils literal&#34;&gt;Deconstruct&lt;/tt&gt; as a method or extension method, and it will then be able to take part in the new C# 7 deconstruction syntax. This method we just wrote only works for deconstructing into 5 variables, but that&amp;#8217;s all we need right now. Additional extension methods for array deconstruction can be found &lt;a class=&#34;reference external&#34; href=&#34;https://gist.github.com/waf/280152ab42aa92a85b79d6dbc812e68a&#34;&gt;in this gist&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;new-c-7-feature-tuples&#34;&gt;
&lt;h3&gt;New C# 7 feature:&amp;nbsp;Tuples&lt;/h3&gt;
&lt;p&gt;Our last step is to translate the Python list comprehension into a C# &lt;span class=&#34;caps&#34;&gt;LINQ&lt;/span&gt; statement. What we&amp;#8217;d like to write is something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// this code does &lt;span class=&#34;caps&#34;&gt;NOT&lt;/span&gt; work&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;answers&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Red&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Green&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ivory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Yellow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Blue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;orderings&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//... etc.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It would be nice if C# 7 recognized our &lt;tt class=&#34;docutils literal&#34;&gt;Deconstruct&lt;/tt&gt; method and it all Just Worked. However, C# 7 doesn&amp;#8217;t support deconstruction in &lt;span class=&#34;caps&#34;&gt;LINQ&lt;/span&gt; statements (see the &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/dotnet/roslyn/issues/13964&#34;&gt;issue tracking it&lt;/a&gt;), so we can&amp;#8217;t quite do this&amp;nbsp;yet.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s a workaround: rather than deconstructing inside the &lt;span class=&#34;caps&#34;&gt;LINQ&lt;/span&gt; statement, we can represent our permutations as a list of &lt;tt class=&#34;docutils literal&#34;&gt;System.ValueTuples&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;tt class=&#34;docutils literal&#34;&gt;System.ValueTuple&lt;/tt&gt; isn&amp;#8217;t related to the existing &lt;tt class=&#34;docutils literal&#34;&gt;System.Tuple&lt;/tt&gt; type. A &lt;tt class=&#34;docutils literal&#34;&gt;System.ValueTuple&lt;/tt&gt; is different in that you can optionally name its tuple members (no more Item1, Item2, etc!). It can also be returned from a method and retain those member names, unlike an anonymous&amp;nbsp;type.&lt;/p&gt;
&lt;p&gt;In our initial permutation list, we won&amp;#8217;t name the tuple&amp;nbsp;members:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;orderings&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// generates List&amp;lt;List&amp;lt;int&amp;gt;&amp;gt; using the Combinatorics nuget package&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Permutations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;houses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// creates List&amp;lt;System.ValueTuple&amp;lt;int, int, int, int, int&amp;gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can then provide helper functions to translate unnamed tuples into named tuples for each house&amp;nbsp;attribute:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Red&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Green&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ivory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Yellow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Blue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;AsColors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;permutation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;permutation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Englishman&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Spaniard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ukranian&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Japanese&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Norwegian&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;AsNationalities&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;permutation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;permutation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Coffee&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Tea&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Milk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span class=&#34;caps&#34;&gt;OJ&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Water&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;AsDrinks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;permutation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;permutation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OldGold&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Kools&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Chesterfields&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LuckyStrike&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Parliaments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;AsCigarettes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;permutation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;permutation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Dog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Snail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Fox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Horse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Zebra&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;AsPets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;permutation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;permutation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With the above workaround in place, it&amp;#8217;s now a straightforward translation of the original problem description, complete with static typing&amp;nbsp;goodness:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// solve the problem&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;answers&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;orderings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AsColors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ImmediatelyRight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Green&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ivory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//6&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nationality&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;orderings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AsNationalities&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nationality&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Englishman&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Red&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;//2&lt;/span&gt;
          &lt;span class=&#34;n&#34;&gt;nationality&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Norwegian&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;//10&lt;/span&gt;
          &lt;span class=&#34;n&#34;&gt;NextTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nationality&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Norwegian&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Blue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//15&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;drink&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;orderings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AsDrinks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;drink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Coffee&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Green&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;//4&lt;/span&gt;
          &lt;span class=&#34;n&#34;&gt;drink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tea&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nationality&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ukranian&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;//5&lt;/span&gt;
          &lt;span class=&#34;n&#34;&gt;drink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Milk&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;middle&lt;/span&gt;                       &lt;span class=&#34;c1&#34;&gt;//9&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;smoke&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;orderings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AsCigarettes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;smoke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Kools&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Yellow&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;//8&lt;/span&gt;
          &lt;span class=&#34;n&#34;&gt;smoke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LuckyStrike&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;drink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span class=&#34;caps&#34;&gt;OJ&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;           &lt;span class=&#34;c1&#34;&gt;//13&lt;/span&gt;
          &lt;span class=&#34;n&#34;&gt;nationality&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Japanese&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;smoke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Parliaments&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//14&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pet&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;orderings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AsPets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nationality&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Spaniard&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dog&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;//3&lt;/span&gt;
          &lt;span class=&#34;n&#34;&gt;smoke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OldGold&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Snail&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;//7&lt;/span&gt;
          &lt;span class=&#34;n&#34;&gt;NextTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;smoke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Chesterfields&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Fox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//12&lt;/span&gt;
          &lt;span class=&#34;n&#34;&gt;NextTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;smoke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Kools&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Horse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;//11&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;drink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Water&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Zebra&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;answer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;answers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Single&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Water drinker lives in {answer.Water} and zebra owner lives in {answer.Zebra}&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running this, we get the&amp;nbsp;output:&lt;/p&gt;
&lt;blockquote&gt;
Water drinker lives in 1 and zebra owner lives in 5&lt;/blockquote&gt;
&lt;p&gt;And we&amp;#8217;re done! We found that sneaky zebra&amp;nbsp;owner.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;conclusion&#34;&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Overall, I feel like this &lt;span class=&#34;caps&#34;&gt;LINQ&lt;/span&gt; implementation is fairly faithful to the original Python implementation, and in about 70 lines of code. If &lt;span class=&#34;caps&#34;&gt;LINQ&lt;/span&gt; supported deconstruction, I would be 100% happy with it. However, due to the lack of &lt;span class=&#34;caps&#34;&gt;LINQ&lt;/span&gt; support, we needed a couple of helper functions, and that definitely spoiled the fun a&amp;nbsp;bit.&lt;/p&gt;
&lt;p&gt;&lt;tt class=&#34;docutils literal&#34;&gt;System.ValueTuple&lt;/tt&gt; looks like a very useful feature &amp;#8211; but I&amp;#8217;ll need to be careful to balance this with code readability concerns. Sometimes it might be better to break a &lt;tt class=&#34;docutils literal&#34;&gt;System.ValueTuple&lt;/tt&gt; into a named class with documentation. For cases like this blog post though, where the types are only ever used inside a single method or class, I think it&amp;#8217;s a valuable&amp;nbsp;feature.&lt;/p&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 01 Jan 2017 17:00:00 GMT</pubDate>
        <guid isPermaLink="false">tag:fuqua.io/blog,2017-01-02:/2017/01/solving-the-zebra-puzzle-with-linq-and-c-7</guid>
    </item>
        
            <item>
        <title>Finding Dead C# Code in an ASP.NET application</title>
        <link>https://fuqua.io/blog/2016/08/finding-dead-csharp-code-in-aspnet/</link>
        <description>&lt;p&gt;Large, long-lasting codebases tend to accumulate unused code, or dead code, over time. This happens as features are added, changed and&amp;nbsp;removed.&lt;/p&gt;
&lt;p&gt;Some types of dead code, like unreferenced methods, are easy to detect with Visual Studio&amp;#8217;s out-of-the-box static analysis. However, other types of dead code are trickier; maybe there&amp;#8217;s a method that&amp;#8217;s only referenced by unit tests, or it&amp;#8217;s referenced under a condition that&amp;#8217;s never&amp;nbsp;valid:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DateTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Now&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DateTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1970&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// some dead code&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;How can we detect this type of dead code? Rather than using static analysis to detect it, we can use dynamic analysis&amp;#8212;the same technique used to measure unit test code&amp;nbsp;coverage.&lt;/p&gt;
&lt;p&gt;In this post we will use &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/OpenCover/opencover/&#34;&gt;OpenCover&lt;/a&gt;, an open source code coverage tool, to run the dynamic analysis. When we run our application under OpenCover, it will &lt;a class=&#34;reference external&#34; href=&#34;https://en.wikipedia.org/wiki/Instrumentation_(computer_programming)&#34;&gt;instrument our code&lt;/a&gt; and record what lines were executed. It will then output a coverage report we can process with &lt;a class=&#34;reference external&#34; href=&#34;http://danielpalme.github.io/ReportGenerator/&#34;&gt;ReportGenerator&lt;/a&gt; to visualize the results. Both OpenCover and ReportGenerator can be downloaded from their respective homepages, or through&amp;nbsp;Nuget.&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;a-sample-application&#34;&gt;
&lt;h3&gt;A Sample&amp;nbsp;Application&lt;/h3&gt;
&lt;p&gt;Let&amp;#8217;s see this in action! Here&amp;#8217;s a sample &lt;span class=&#34;caps&#34;&gt;ASP&lt;/span&gt;.&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt; application, with some hard-to-detect dead code. The relevant portion is in&amp;nbsp;HomeController.cs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;HomeController&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Controller&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ActionResult&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DateTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eventDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EventViewModel&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;DateDescription&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eventDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HasValue&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;?&lt;/span&gt;
                              &lt;span class=&#34;n&#34;&gt;HumanFriendlyTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eventDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                              &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Empty&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;View&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;HumanFriendlyTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DateTime&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eventDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;today&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DateTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tomorrow&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;today&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AddDays&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eventDate&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tomorrow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Event is tomorrow&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;today&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tomorrow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Time-traveling detected. Dispatching time police.&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eventDate&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;today&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Event is in {(eventDate - today).Days} days&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Event was {(today - eventDate).Days} days ago&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our goal is to detect the &lt;tt class=&#34;docutils literal&#34;&gt;today &amp;gt; tomorrow&lt;/tt&gt; code block as dead code. Let&amp;#8217;s target OpenCover at the &lt;span class=&#34;caps&#34;&gt;ASP&lt;/span&gt;.&lt;span class=&#34;caps&#34;&gt;NET&lt;/span&gt; application. We can use &lt;span class=&#34;caps&#34;&gt;IIS&lt;/span&gt; or&amp;nbsp;IISExpress:&lt;/p&gt;
&lt;p&gt;Using&amp;nbsp;&lt;span class=&#34;caps&#34;&gt;IIS&lt;/span&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;gp&#34;&gt;&amp;gt;&lt;/span&gt; net stop w3svc /y
&lt;span class=&#34;gp&#34;&gt;&amp;gt;&lt;/span&gt; OpenCover.Console.exe -target:&lt;span class=&#34;s2&#34;&gt;&amp;quot;C:\Windows\System32\inetsrv\w3wp.exe&amp;quot;&lt;/span&gt; -targetdir:&lt;span class=&#34;s2&#34;&gt;&amp;quot;C:\Path\To\WebApp\web\bin&amp;quot;&lt;/span&gt; -targetargs:-debug -register:user
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using&amp;nbsp;IISExpress:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;gp&#34;&gt;&amp;gt;&lt;/span&gt; OpenCover.Console.exe -target:&lt;span class=&#34;s2&#34;&gt;&amp;quot;C:\Program Files (x86)\&lt;span class=&#34;caps&#34;&gt;IIS&lt;/span&gt; Express\iisexpress.exe&amp;quot;&lt;/span&gt; -targetdir:&lt;span class=&#34;s2&#34;&gt;&amp;quot;C:\Path\To\WebApp\Web\bin&amp;quot;&lt;/span&gt; -targetargs:&lt;span class=&#34;s2&#34;&gt;&amp;quot;/site:WebApp /config:\&amp;quot;C:\Path\To\WebApp\.vs\config\applicationhost.config\&amp;quot;&amp;quot;&lt;/span&gt; -register:user
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OpenCover has &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/OpenCover/opencover/wiki/Usage/&#34;&gt;many configuration options&lt;/a&gt; we can use to tweak the behavior, including filters by namespace or&amp;nbsp;attribute.&lt;/p&gt;
&lt;p&gt;After starting OpenCover, we can send &lt;span class=&#34;caps&#34;&gt;HTTP&lt;/span&gt; requests to the application to fully exercise it. This can be scripted, or done manually using a&amp;nbsp;browser.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;gp&#34;&gt;#&lt;/span&gt; exercise the &lt;span class=&#34;s1&#34;&gt;&amp;#39;tomorrow&amp;#39;&lt;/span&gt; code path
&lt;span class=&#34;gp&#34;&gt;&amp;gt;&lt;/span&gt; wget http://localhost/?eventDate&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2016&lt;/span&gt;-08-14
&lt;span class=&#34;gp&#34;&gt;#&lt;/span&gt; exercise the &lt;span class=&#34;s1&#34;&gt;&amp;#39;in X days&amp;#39;&lt;/span&gt; code path
&lt;span class=&#34;gp&#34;&gt;&amp;gt;&lt;/span&gt; wget http://localhost/?eventDate&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2016&lt;/span&gt;-08-29
&lt;span class=&#34;gp&#34;&gt;#&lt;/span&gt; exercise the &lt;span class=&#34;s1&#34;&gt;&amp;#39;X days ago&amp;#39;&lt;/span&gt; code path
&lt;span class=&#34;gp&#34;&gt;&amp;gt;&lt;/span&gt; wget http://localhost/?eventDate&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2016&lt;/span&gt;-07-10
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When we&amp;#8217;re done sending requests to the application, we can stop OpenCover by pressing &amp;#8216;q&amp;#8217;. OpenCover will generate our coverage results in a file called &lt;tt class=&#34;docutils literal&#34;&gt;results.xml&lt;/tt&gt;. We can then use the ReportGenerator to create an &lt;span class=&#34;caps&#34;&gt;HTML&lt;/span&gt;&amp;nbsp;report:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;gp&#34;&gt;&amp;gt;&lt;/span&gt; ReportGenerator.exe -reports:&lt;span class=&#34;s2&#34;&gt;&amp;quot;.\results.xml&amp;quot;&lt;/span&gt; -targetdir:report
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we&amp;#8217;re done! ReportGenerator will create a nice report for us, showing the lines of code that are unused (including Razor&amp;nbsp;files):&lt;/p&gt;
&lt;img alt=&#34;/img/opencover-dead-code.png&#34; class=&#34;align-center&#34; src=&#34;https://fuqua.io/blog/img/opencover-dead-code.png&#34; style=&#34;width: 80%;&#34;/&gt;
&lt;p&gt;This technique depends on us being able to fully exercise all parts of the web application. That could be the hardest part, depending on how large the application is. Tooling like OpenCover and ReportGenerator make the rest of it&amp;nbsp;easy!&lt;/p&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 12 Aug 2016 17:00:00 GMT</pubDate>
        <guid isPermaLink="false">tag:fuqua.io/blog,2016-08-13:/2016/08/finding-dead-csharp-code-in-aspnet</guid>
    </item>
        
            <item>
        <title>Increasing Code Quality with SonarQube</title>
        <link>https://fuqua.io/blog/2016/06/increasing-code-quality-with-sonarqube/</link>
        <description>&lt;p&gt;I just posted an article about SonarQube, an open source static analysis tool, and how we set it up to scan every incoming GitHub pull request at&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;You can &lt;a class=&#34;reference external&#34; href=&#34;http://techblog.jetabroad.com/2016/06/increasing-code-quality-with-sonarqube.html&#34;&gt;read it at the Jetabroad Tech Blog&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Jun 2016 17:00:00 GMT</pubDate>
        <guid isPermaLink="false">tag:fuqua.io/blog,2016-06-27:/2016/06/increasing-code-quality-with-sonarqube</guid>
    </item>
        
            <item>
        <title>Vim Presentation</title>
        <link>https://fuqua.io/blog/2016/06/vim-presentation/</link>
        <description>&lt;p&gt;I recently gave a presentation on thinking in vim, which tries to bring people to that &amp;quot;Aha!&amp;quot; moment with Vim. The presentation should be useful to follow, even without the speaking portion. Hope this is&amp;nbsp;useful!&lt;/p&gt;
&lt;iframe style=&#34;width:100%&#34; src=&#34;https://docs.google.com/presentation/d/1WzjWgKrrlN0BRnP0a99jomsnNX2xRUhvCSVLVWFfpyw/embed?start=false&amp;amp;loop=false&amp;amp;delayms=60000&#34; frameborder=&#34;0&#34; width=&#34;960&#34; height=&#34;569&#34; allowfullscreen=&#34;true&#34; mozallowfullscreen=&#34;true&#34; webkitallowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;</description>
        <pubDate>Sun, 12 Jun 2016 17:00:00 GMT</pubDate>
        <guid isPermaLink="false">tag:fuqua.io/blog,2016-06-13:/2016/06/vim-presentation</guid>
    </item>
        
            <item>
        <title>A Software Developer Learning Thai</title>
        <link>https://fuqua.io/blog/2015/04/a-software-developer-learning-thai/</link>
        <description>&lt;p&gt;I recently uprooted from the &lt;span class=&#34;caps&#34;&gt;USA&lt;/span&gt; and moved to Thailand! It&amp;#8217;s been an incredible experience so far. One of the more fascinating aspects of it has been learning the Thai language. I&amp;#8217;ve created a couple of basic tools to help myself learn. Developing the tools helps me learn new technologies, and the resulting product helps me learn the&amp;nbsp;language!&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;https://github.com/waf/thai-characters&#34;&gt;Thai Characters&lt;/a&gt; &amp;#8211; Simple flashcards to learn the characters and their low/middle/high class&amp;nbsp;association.&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;https://github.com/waf/flash-cards&#34;&gt;Thai Vocabulary Flashcards&lt;/a&gt; &amp;#8211; Vocabulary flashcards. Interesting from a React/Material Design technical&amp;nbsp;aspect.&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;reference external&#34; href=&#34;https://github.com/waf/ThaiRecog&#34;&gt;Thai &lt;span class=&#34;caps&#34;&gt;OCR&lt;/span&gt; Android App&lt;/a&gt; &amp;#8211; Quick &lt;span class=&#34;caps&#34;&gt;POC&lt;/span&gt; android app for doing Thai language &lt;span class=&#34;caps&#34;&gt;OCR&lt;/span&gt; using the camera. It doesn&amp;#8217;t work very well right now, but I suspect a &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/tesseract-ocr/tesseract&#34;&gt;Tesseract&lt;/a&gt; upgrade might fix&amp;nbsp;that.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 01 Apr 2015 17:00:00 GMT</pubDate>
        <guid isPermaLink="false">tag:fuqua.io/blog,2015-04-02:/2015/04/a-software-developer-learning-thai</guid>
    </item>
        
            <item>
        <title>Quick Tip: Format Finder for .NET date strings</title>
        <link>https://fuqua.io/blog/2015/02/quick-tip-format-finder-for-net-date-strings/</link>
        <description>&lt;p&gt;If you&amp;#8217;ve written C# for any length of time, chances are you&amp;#8217;ve become very familiar with the &lt;span class=&#34;caps&#34;&gt;MSDN&lt;/span&gt; documentation pages about &lt;a class=&#34;reference external&#34; href=&#34;https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx&#34;&gt;Standard Date and Time Format Strings&lt;/a&gt; and &lt;a class=&#34;reference external&#34; href=&#34;https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx&#34;&gt;Custom Date and Time Format Strings&lt;/a&gt;. Any time you need to format a &lt;tt class=&#34;docutils literal&#34;&gt;DateTime&lt;/tt&gt;, those pages are&amp;nbsp;invaluable.&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t find myself reading those pages often enough to warrant memorizing the strings, but I do read them often enough that it&amp;#8217;s worth automating the lookup. So I wrote a simple webapp to do&amp;nbsp;it.&lt;/p&gt;
&lt;img alt=&#34;http://imgs.xkcd.com/comics/automation.png&#34; class=&#34;align-center&#34; src=&#34;http://imgs.xkcd.com/comics/automation.png&#34; style=&#34;width: 50%;&#34;/&gt;
&lt;p&gt;I plan on skewing those curves by sharing this tool. So, here it is: &lt;a class=&#34;reference external&#34; href=&#34;https://fuqua.io/format-finder/&#34;&gt;Format Finder&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Format Finder presents you with a very specific point in time: Monday, March 1st, 2009 at 8:&lt;span class=&#34;caps&#34;&gt;04AM&lt;/span&gt;. You then provide the desired output of that date, and Format Finder will provide the formatting strings for you. For example, if you type in &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;2009-03-01&lt;/span&gt;&lt;/tt&gt;, Format Finder will return a custom format string of &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;yyyy-&lt;span class=&#34;caps&#34;&gt;MM&lt;/span&gt;-dd&lt;/span&gt;&lt;/tt&gt; along with a explanation of each part. Alternatively, if you type in &lt;tt class=&#34;docutils literal&#34;&gt;3/01/2009&lt;/tt&gt;, Format Finder will return the standard format string of &lt;tt class=&#34;docutils literal&#34;&gt;d&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;I hope other people find this as useful as I do. Let&amp;#8217;s skew that &lt;span class=&#34;caps&#34;&gt;XKCD&lt;/span&gt;&amp;nbsp;curve!&lt;/p&gt;
</description>
        <pubDate>Wed, 25 Feb 2015 17:00:00 GMT</pubDate>
        <guid isPermaLink="false">tag:fuqua.io/blog,2015-02-26:/2015/02/quick-tip-format-finder-for-net-date-strings</guid>
    </item>
        
            <item>
        <title>Pushing Database Changes to the Web with Datomic</title>
        <link>https://fuqua.io/blog/2014/05/pushing-database-changes-to-the-web-with-datomic/</link>
        <description>&lt;p&gt;Lately I&amp;#8217;ve been playing around with &lt;a class=&#34;reference external&#34; href=&#34;http://www.datomic.com&#34;&gt;Datomic&lt;/a&gt;, a database invented by Rich Hickey, the creator of Clojure.
Datomic feels like a natural extension of Clojure&amp;#8217;s immutable, persistent datastructures. From Datomic&amp;#8217;s &lt;a class=&#34;reference external&#34; href=&#34;http://docs.datomic.com/architecture.html&#34;&gt;architecture documentation&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
A Datomic database stores a collection of facts. The facts in a database are immutable; once stored, they do not change. However, old facts can be superseded by new facts over time. The state of the database is a value defined by the set of facts in effect at a given moment in time.&lt;/blockquote&gt;
&lt;p&gt;Daniel Higginbotham wrote a great tutorial on the basics of Datomic called &lt;a class=&#34;reference external&#34; href=&#34;http://www.flyingmachinestudios.com/programming/datomic-for-five-year-olds/&#34;&gt;Datomic for Five Year Olds&lt;/a&gt;, which I highly recommend (even if you are older than&amp;nbsp;five).&lt;/p&gt;
&lt;p&gt;We&amp;#8217;re going to focus on one aspect of Datomic in this post: the &lt;a class=&#34;reference external&#34; href=&#34;http://blog.datomic.com/2013/10/the-transaction-report-queue.html&#34;&gt;Transaction Report Queue&lt;/a&gt;, and how we can use it to push database changes to a web client using websockets. We&amp;#8217;ll assume some basic Clojure web application&amp;nbsp;experience.&lt;/p&gt;
&lt;p&gt;At this point, most blog posts would explain that the web is becomingly increasingly real-time, that users expect this sort of thing, yadda yadda. Instead, let&amp;#8217;s jump right into what we&amp;#8217;re building &amp;#8211; a simple &amp;quot;connected users&amp;quot;&amp;nbsp;application:&lt;/p&gt;
&lt;img alt=&#34;/img/datomic-pushing-changes-demo.gif&#34; src=&#34;https://fuqua.io/blog/img/datomic-pushing-changes-demo.gif&#34; style=&#34;width: 100%;&#34;/&gt;
&lt;p&gt;What&amp;#8217;s going on here? As users connect to our web application, they&amp;#8217;re assigned a random username (such as &amp;quot;Merry Frog&amp;quot; or &amp;quot;Cheerful Aardvark&amp;quot;). This username is then inserted into a Datomic database, and the change is pushed from the database to all the connected users. The source for this application is &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/waf/push-demo&#34;&gt;on GitHub&lt;/a&gt;. We&amp;#8217;ll walk through how it all works for the rest of this blog&amp;nbsp;post.&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;application-design&#34;&gt;
&lt;h3&gt;Application&amp;nbsp;Design&lt;/h3&gt;
&lt;p&gt;Here&amp;#8217;s the basic layout of the&amp;nbsp;application:&lt;/p&gt;
&lt;img alt=&#34;/img/datomic-push-architecture.png&#34; src=&#34;https://fuqua.io/blog/img/datomic-push-architecture.png&#34; style=&#34;width: 100%;&#34;/&gt;
&lt;p&gt;The core piece here is the Transaction Report Queue that resides in our Clojure backend. This blocking queue will provide us with the all of the database transactions that happen against Datomic. Our application reads from this queue in a background thread, and whenever it&amp;#8217;s notified of a change, it will send it to the connected&amp;nbsp;clients.&lt;/p&gt;
&lt;p&gt;The &lt;span class=&#34;caps&#34;&gt;HTTP&lt;/span&gt; server is powered by &lt;a class=&#34;reference external&#34; href=&#34;http://http-kit.org/index.html&#34;&gt;&lt;span class=&#34;caps&#34;&gt;HTTP&lt;/span&gt; Kit&lt;/a&gt; and &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/weavejester/compojure&#34;&gt;Compojure&lt;/a&gt;. This is not much different than the typical Ring/Compojure Clojure web application stack; we&amp;#8217;ve simply swapped out the standard Jetty Ring adapter for &lt;span class=&#34;caps&#34;&gt;HTTP&lt;/span&gt; Kit. This allows us to handle asynchronous requests and websocket&amp;nbsp;connections.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;reference external&#34; href=&#34;https://github.com/ptaoussanis/sente&#34;&gt;Sente&lt;/a&gt; is similar to socket.io from the Node.js world. It&amp;#8217;s an abstraction layer that provides real-time communication over websockets, with an &lt;span class=&#34;caps&#34;&gt;AJAX&lt;/span&gt; long-polling fallback. This library has both Clojure and ClojureScript&amp;nbsp;components.&lt;/p&gt;
&lt;p&gt;On the client, we&amp;#8217;ll render the list of users using the ClojureScript library  &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/holmsand/reagent&#34;&gt;Reagent&lt;/a&gt;, which wraps Facebook&amp;#8217;s React library. It&amp;#8217;s similar in concept to&amp;nbsp;Om.&lt;/p&gt;
&lt;p&gt;All communication to Datomic is handled via Datomic&amp;#8217;s &lt;a class=&#34;reference external&#34; href=&#34;http://docs.datomic.com/integrating-peer-lib.html&#34;&gt;peer library&lt;/a&gt;. We&amp;#8217;ll use this library to both query the database and monitor the transaction report&amp;nbsp;queue.&lt;/p&gt;
&lt;p&gt;We pull in all these libraries via Leiningen, plus some logging&amp;nbsp;libraries:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:dependencies&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;org.clojure/clojure&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;1.6.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;org.clojure/clojurescript&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;0.0-2202&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;http-kit&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;2.1.18&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ring&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;1.2.2&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;compojure&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;1.1.8&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;com.taoensso/sente&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;0.14.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;reagent&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;0.4.2&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;org.clojure/tools.logging&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;0.2.6&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ch.qos.logback/logback-classic&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;1.1.2&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;org.clojure/core.async&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;0.1.303.0-886421-alpha&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;com.datomic/datomic-free&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;0.9.4755&amp;quot;&lt;/span&gt;
                   &lt;span class=&#34;ss&#34;&gt;:exclusions&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;org.slf4j/slf4j-nop&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; exclude datomic&amp;#39;s conflicting log libs&lt;/span&gt;
                                &lt;span class=&#34;nv&#34;&gt;org.slf4j/slf4j-log4j12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;the-backend-clojure-code&#34;&gt;
&lt;h3&gt;The Backend Clojure&amp;nbsp;Code&lt;/h3&gt;
&lt;p&gt;Let&amp;#8217;s start with our standard Compojure routing setup. The only change we&amp;#8217;ve made here is to use the httpkit server. Let&amp;#8217;s also import the Sente websocket and Datomic libraries, which we&amp;#8217;ll use in a&amp;nbsp;bit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;ns &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;userlist.server&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:require&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;org.httpkit.server&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ring.util.response&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;compojure.core&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:refer&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;compojure.handler&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;handler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;compojure.route&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;taoensso.sente&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;sente&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;datomic.api&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;defroutes&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;app-routes&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;&lt;span class=&#34;caps&#34;&gt;GET&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;response/resource-response&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;public/index.html&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;route/resources&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;route/not-found&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;404! :(&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;app-routes&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;handler/site&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;-main&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;server/run-server&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:port&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; replace jetty with http-kit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we&amp;#8217;re using &lt;span class=&#34;caps&#34;&gt;HTTP&lt;/span&gt; kit, we have websocket support. We just need to add an endpoint for the websocket connection. The Sente library has some prebuilt functions that will handle the websocket connections, and also fall back to &lt;span class=&#34;caps&#34;&gt;AJAX&lt;/span&gt; long-polling. We can retrieve references to these functions by calling Sente&amp;#8217;s &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;make-channel-socket!&lt;/span&gt;&lt;/tt&gt;, and passing in a &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;:user-id-fn&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;:user-id-fn&lt;/span&gt;&lt;/tt&gt; is a way for Sente to associate a connection with a specific user, so if a user connects with multiple devices, a message can be sent to all of that user&amp;#8217;s devices. In a Real World Application this would be some application-specific user identity. For our demo application, however, we won&amp;#8217;t worry about this, and just generate a random &lt;span class=&#34;caps&#34;&gt;UUID&lt;/span&gt; for the user&amp;nbsp;&lt;span class=&#34;caps&#34;&gt;ID&lt;/span&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;defn- &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;get-user-id&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;java.util.&lt;span class=&#34;caps&#34;&gt;UUID&lt;/span&gt;/randomUUID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ws-connection&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;sente/make-channel-socket!&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:user-id-fn&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;get-user-id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:keys&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ch-recv&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;send-fn&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ajax-post-fn&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ajax-get-or-ws-handshake-fn&lt;/span&gt;
              &lt;span class=&#34;nv&#34;&gt;connected-uids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]}&lt;/span&gt;
      &lt;span class=&#34;nv&#34;&gt;ws-connection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ring-ws-post&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ajax-post-fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; ring handler for POSTs&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ring-ws-handoff&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ajax-get-or-ws-handshake-fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; ring handler for GETs&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;receive-channel&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ch-recv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; receives inbound messages from clients&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;channel-send!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;send-fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; send message to a client&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;connected-uids&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;connected-uids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; all connected clients&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now, we can reference the endpoint functions in our Compojure&amp;nbsp;routes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;; compojure routes&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;&lt;span class=&#34;caps&#34;&gt;POST&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;/channel&amp;quot;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;req&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ring-ws-post&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;&lt;span class=&#34;caps&#34;&gt;GET&lt;/span&gt;&lt;/span&gt;  &lt;span class=&#34;s&#34;&gt;&amp;quot;/channel&amp;quot;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;req&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ring-ws-handoff&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we have the basic &lt;span class=&#34;caps&#34;&gt;HTTP&lt;/span&gt; endpoints set up, let&amp;#8217;s focus on setting up the Datomic database. After that, we&amp;#8217;ll hook up the datomic database to our websocket&amp;nbsp;endpoints.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;datomic-setup&#34;&gt;
&lt;h3&gt;Datomic&amp;nbsp;Setup&lt;/h3&gt;
&lt;p&gt;The first thing we&amp;#8217;ll need for our Datomic setup is a schema. Schemas in Datomic are defined in &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/edn-format/edn&#34;&gt;&lt;span class=&#34;caps&#34;&gt;EDN&lt;/span&gt;&lt;/a&gt;, a standard Clojure data-transfer format. Our schema will be very simple, as we just need to store a list of usernames. In &lt;tt class=&#34;docutils literal&#34;&gt;resources/userlist.edn&lt;/tt&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:db/id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;db/id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:db.part/db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;ss&#34;&gt;:db/ident&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:user/name&lt;/span&gt;
  &lt;span class=&#34;ss&#34;&gt;:db/valueType&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:db.type/string&lt;/span&gt;
  &lt;span class=&#34;ss&#34;&gt;:db/cardinality&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:db.cardinality/one&lt;/span&gt;
  &lt;span class=&#34;ss&#34;&gt;:db/doc&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;A user&amp;#39;s name&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;ss&#34;&gt;:db.install/_attribute&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:db.part/db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This datastructure represents a &lt;tt class=&#34;docutils literal&#34;&gt;:user/name&lt;/tt&gt; property with a corresponding &lt;tt class=&#34;docutils literal&#34;&gt;id&lt;/tt&gt; property. In the future, we could conceivably add other user-related properties, such as &lt;tt class=&#34;docutils literal&#34;&gt;:user/email&lt;/tt&gt; or &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;:user/password-hash&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;In order to load our schema into Datomic, we simply send the above datastructure to Datomic. Let&amp;#8217;s create an in-memory database, set up the schema, and return a reference to the connection so we can use it for further&amp;nbsp;queries:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;create-db&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;d/create-database&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;schema&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;read-string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;slurp &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;resources/roomlist.edn&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;conn&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;d/connect&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;d/transact&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;conn&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; install the schema in the db&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;create-db&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;datomic:mem://roomlist&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; create an in-memory db called &amp;#39;roomlist&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The last thing we&amp;#8217;ll need to do is set up the transaction report queue. We can obtain this queue from the Datomic connection&amp;nbsp;object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; given a report from the tx-report-queue, read the changed values&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;defn- &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read-changes&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:keys&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;db-after&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tx-data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;report&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;d/q&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:find&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;?aname&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;?v&lt;/span&gt;
         &lt;span class=&#34;ss&#34;&gt;:in&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;?a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;?v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
         &lt;span class=&#34;ss&#34;&gt;:where&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;?a&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:db/ident&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;?aname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
       &lt;span class=&#34;nv&#34;&gt;db-after&lt;/span&gt;
       &lt;span class=&#34;nv&#34;&gt;tx-data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; set up a monitor loop using the tx-report-queue&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;change-monitor&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;report-queue&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;d/tx-report-queue&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;true&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;report&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;.take&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;report-queue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;changes&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;into &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;read-changes&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;report&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))]&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;doseq &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;uid&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:any&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;connected-uids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;channel-send!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;uid&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:room/join&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;changes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the server-side is done! &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;read-changes&lt;/span&gt;&lt;/tt&gt; will get the changes from the report queue, and these changes are passed to &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;channel-send!&lt;/span&gt;&lt;/tt&gt; to send it to our connected&amp;nbsp;clients.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;the-frontend-clojurescript-code&#34;&gt;
&lt;h3&gt;The Frontend ClojureScript&amp;nbsp;Code&lt;/h3&gt;
&lt;p&gt;The clojurescript code is actually pretty boring. It&amp;#8217;s a standard reagent app that re-renders based on the &lt;tt class=&#34;docutils literal&#34;&gt;&amp;#64;push/events&lt;/tt&gt; reactive&amp;nbsp;atom:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;ns &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;roomlist.client&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:require&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;reagent.core&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;roomlist.push&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;user-item&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;join-event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:li&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:user/name&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;join-event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot; joined at &amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:db/txInstant&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;join-event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))])&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;users-list&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:ul&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;for &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;join-event&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;push/events&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;user-item&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;join-event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])])&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;r/render-component&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;users-list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;.getElementById&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;js/document&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;entry-list&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here&amp;#8217;s the clojurescript code that populates the &lt;tt class=&#34;docutils literal&#34;&gt;&amp;#64;push/events&lt;/tt&gt; reactive&amp;nbsp;atom:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; sente js setup&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ws-connection&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;sente/make-channel-socket!&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;/channel&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:type&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:auto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:keys&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ch-recv&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;send-fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]}&lt;/span&gt;
      &lt;span class=&#34;nv&#34;&gt;ws-connection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;receive-channel&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:ch-recv&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ws-connection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;send-channel!&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:send-fn&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ws-connection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; reactive atom that manages our application state&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;events&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;r/atom&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; handle application-specific events&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;defn- &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;app-message-received&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;msgType&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msgType&lt;/span&gt;
    &lt;span class=&#34;ss&#34;&gt;:room/join&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;swap!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;events&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;conj &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;.log&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;js/console&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Unmatched application event&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; handle websocket-connection-specific events&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; `possible-usernames` is just a sequence of string usernames&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;defn- &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;channel-state-message-received&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:first-open?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;send-channel!&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:room/ident&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;rand-nth&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;possible-usernames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)}])))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; main router for websocket events&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;defn- &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;event-handler&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;.log&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;js/console&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;received message&amp;quot;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;id&lt;/span&gt;
    &lt;span class=&#34;ss&#34;&gt;:chsk/state&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;channel-state-message-received&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;ss&#34;&gt;:chsk/recv&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;app-message-received&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;.log&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;js/console&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Unmatched connection event&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; and off we go!&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;sente/start-chsk-router-loop!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;event-handler&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;receive-channel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A full, working demo is available &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/waf/push-demo&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 24 May 2014 17:00:00 GMT</pubDate>
        <guid isPermaLink="false">tag:fuqua.io/blog,2014-05-25:/2014/05/pushing-database-changes-to-the-web-with-datomic</guid>
    </item>
        
            <item>
        <title>Haskell&#39;s Elegant Fibonacci Implementation in C#</title>
        <link>https://fuqua.io/blog/2014/03/haskells-elegant-fibonacci-in-csharp/</link>
        <description>&lt;p&gt;&lt;a class=&#34;reference external&#34; href=&#34;http://www.haskell.org/haskellwiki/Introduction&#34;&gt;Haskell&lt;/a&gt; is a high-level, functional, programming language. Its combination of higher-order functions and lazy evaluation can lead to beautifully elegant algorithm implementations. One such implementation is the &lt;a class=&#34;reference external&#34; href=&#34;http://en.wikipedia.org/wiki/Fibonacci_number&#34;&gt;Fibonacci series&lt;/a&gt;&amp;nbsp;algorithm:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;zipWith&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tail&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This creates a variable called &lt;tt class=&#34;docutils literal&#34;&gt;fib&lt;/tt&gt; that contains an infinite sequence of Fibonacci numbers. We could print this variable, but our program would start trying to print an infinite number of elements. A better approach is to choose a finite number of elements from the&amp;nbsp;sequence:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;take&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;34&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;55&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above implementation of &lt;tt class=&#34;docutils literal&#34;&gt;fib&lt;/tt&gt; fascinates me, so I decided to try my hand at implementing it in another, less-functional language:&amp;nbsp;C#.&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;algorithm-explanation&#34;&gt;
&lt;h3&gt;Algorithm&amp;nbsp;Explanation&lt;/h3&gt;
&lt;p&gt;First, before we can implement this Fibonacci algorithm in C#, we need to know how the algorithm works. Here&amp;#8217;s the Haskell version&amp;nbsp;again:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;zipWith&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tail&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We provide the first two numbers to start off the series. As we request additional elements, Haskell will calculate them &lt;a class=&#34;reference external&#34; href=&#34;http://en.wikipedia.org/wiki/Corecursion&#34;&gt;corecursively&lt;/a&gt;, using the &lt;tt class=&#34;docutils literal&#34;&gt;zipWith&lt;/tt&gt; function. &lt;tt class=&#34;docutils literal&#34;&gt;zipWith&lt;/tt&gt; takes a function as a parameter, in this case the addition function &lt;tt class=&#34;docutils literal&#34;&gt;(+)&lt;/tt&gt;, and two sequences. It feeds pairs of elements, one from each sequence, into the addition function. The result is a single sequence made from combining or &amp;quot;zipping together&amp;quot; the input&amp;nbsp;sequences.&lt;/p&gt;
&lt;p&gt;The other function in play is &lt;tt class=&#34;docutils literal&#34;&gt;tail&lt;/tt&gt;, which returns everything but the first element of the list. The &lt;tt class=&#34;docutils literal&#34;&gt;tail&lt;/tt&gt; of &lt;tt class=&#34;docutils literal&#34;&gt;[1, 2, 3, 4]&lt;/tt&gt; would be &lt;tt class=&#34;docutils literal&#34;&gt;[2, 3, 4]&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;We combine these two functions to calculate the Fibonacci numbers on demand. Here&amp;#8217;s a snapshot of the program&amp;#8217;s state when we calculate the third element, the number&amp;nbsp;2:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;fib&lt;/span&gt;                        &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unknown&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tail&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                 &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unknown&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;zipWith&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tail&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unknown&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once we have the third element, we can calculate the fourth element, the number&amp;nbsp;3:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;fib&lt;/span&gt;                        &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unknown&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tail&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                 &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unknown&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;zipWith&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tail&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unknown&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The core of the implementation uses lazy evaluation of sequences. Even though we&amp;#8217;re setting up infinite recursion, if we ask for the first 10 fibonacci numbers, our program will only recurse 8 times (since we provided the first 2&amp;nbsp;values).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;idiomatic-c-version&#34;&gt;
&lt;h3&gt;Idiomatic C#&amp;nbsp;Version&lt;/h3&gt;
&lt;p&gt;In our initial C# implementation we&amp;#8217;ll rely on IEnumerables and IEnumerators. An IEnumerable represents a lazy sequence, and it has an associated IEnumerator that knows how to get the next value for the sequence. The &lt;tt class=&#34;docutils literal&#34;&gt;yield return&lt;/tt&gt; keyword is a shortcut for setting up this relationship. For example, here is how we could create a method that returns a lazy sequence of the numbers 1, 2, and&amp;nbsp;3:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IEnumerable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Lazy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;IEnumerables come with a rich library of higher-order functions out of the box. We&amp;#8217;ll be using IEnumerable&amp;#8217;s &lt;tt class=&#34;docutils literal&#34;&gt;Zip&lt;/tt&gt; method for Haskell&amp;#8217;s &lt;tt class=&#34;docutils literal&#34;&gt;zipWith&lt;/tt&gt; function, and the &lt;tt class=&#34;docutils literal&#34;&gt;Skip&lt;/tt&gt; method for Haskell&amp;#8217;s &lt;tt class=&#34;docutils literal&#34;&gt;tail&lt;/tt&gt; function. Here&amp;#8217;s a first&amp;nbsp;pass:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fibonacci&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first10&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fibonacci&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Take&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IEnumerable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Concat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Zip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Skip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This works, but if you run this function you&amp;#8217;ll find that it&amp;#8217;s incredibly slow. Our &lt;tt class=&#34;docutils literal&#34;&gt;Fib()&lt;/tt&gt; function is being repeatedly evaluated as we&amp;nbsp;recurse.&lt;/p&gt;
&lt;p&gt;This is a tricky problem to solve; As it stands now, if we request a value from our IEnumerable, the associated IEnumerator will perform a recursive calculation to obtain the value. When we request the next value, the recursive calculation will start all over again. Ideally, our calculation would use the previously calculated values in it&amp;#8217;s current&amp;nbsp;calculation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;introducing-thunks-and-recursive-data-definitions&#34;&gt;
&lt;h3&gt;Introducing Thunks and Recursive Data&amp;nbsp;Definitions&lt;/h3&gt;
&lt;p&gt;There are two core problems with our&amp;nbsp;attempt:&lt;/p&gt;
&lt;ol class=&#34;arabic simple&#34;&gt;
&lt;li&gt;Haskell is a lazily evaluated language, and C# is eagerly&amp;nbsp;evaluated.&lt;/li&gt;
&lt;li&gt;Haskell&amp;#8217;s &lt;tt class=&#34;docutils literal&#34;&gt;fib&lt;/tt&gt; implementation defines a variable that recurses on itself to produce additional values. C# does not have the concept of recursive variable&amp;nbsp;definitions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We can get lazy behavior in C# by wrapping our operations in a 0-argument lambda expression, then evaluating the lambda expression when we need the value. This &amp;quot;lazy operation&amp;quot; is called a &lt;a class=&#34;reference external&#34; href=&#34;http://www.haskell.org/haskellwiki/Thunk&#34;&gt;thunk&lt;/a&gt;. Haskell uses thunks to defer evaluation, too (the actual Haskell thunk implementation is more involved, but a 0-argument lambda expression captures the essence of the&amp;nbsp;idea).&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s thunk-ify our two arguments to &lt;tt class=&#34;docutils literal&#34;&gt;Concat()&lt;/tt&gt;. Since each thunk is a 0-argument lambda that resolves to an IEnumerable of integers, both thunks will have the type signature &lt;tt class=&#34;docutils literal&#34;&gt;Func&amp;lt;IEnumerable&amp;lt;int&amp;gt;&amp;gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IEnumerable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IEnumerable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seedThunk&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IEnumerable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;zipThunk&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Zip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Skip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seedThunk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Concat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zipThunk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Uh-oh, this doesn&amp;#8217;t compile! All of the IEnumerable methods, including &lt;tt class=&#34;docutils literal&#34;&gt;Concat()&lt;/tt&gt;, expect IEnumerables, not thunks. Luckily, we can use C#&amp;#8217;s extension method system to add thunk&amp;nbsp;support:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IEnumerable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Concat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;(&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IEnumerable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IEnumerable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our &lt;tt class=&#34;docutils literal&#34;&gt;Fib()&lt;/tt&gt; method is quite a bit harder to read, so what did it gain us? With our arguments being lazily evaluated, we can remove the function recursion and &lt;tt class=&#34;docutils literal&#34;&gt;yield return&lt;/tt&gt; statements, and replace them with a neat trick that simulates recursive variable&amp;nbsp;definitions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IEnumerable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;IEnumerable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;Func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IEnumerable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seedThunk&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IEnumerable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;zipThunk&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Zip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Skip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// reassign fib, changing the implementation zipThunk depends on&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seedThunk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Concat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zipThunk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Isn&amp;#8217;t that cool (or is it terrifying)? Our thunks, which are closures, capture the reference to the &lt;tt class=&#34;docutils literal&#34;&gt;fib&lt;/tt&gt; variable, which is initially null. Then, we assign the result of the expression back to &lt;tt class=&#34;docutils literal&#34;&gt;fib&lt;/tt&gt;, changing the implementation to which the captured &lt;tt class=&#34;docutils literal&#34;&gt;fib&lt;/tt&gt; refers. This is how we can use lazy evaluation to fake recursive data&amp;nbsp;definitions.&lt;/p&gt;
&lt;p&gt;Finally, now that we&amp;#8217;re just dealing with an IEnumerable, it&amp;#8217;s easy to memoize&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Rather than writing our own memoizing IEnumerable code, let&amp;#8217;s use the one available in &lt;a class=&#34;reference external&#34; href=&#34;http://www.nuget.org/packages/ix_experimental-main&#34;&gt;Interactive Extensions&lt;/a&gt;, part of the &lt;a class=&#34;reference external&#34; href=&#34;https://rx.codeplex.com/&#34;&gt;Rx Project&lt;/a&gt;. We can pass our Enumerable into the library&amp;#8217;s &lt;tt class=&#34;docutils literal&#34;&gt;Memoize&lt;/tt&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IEnumerable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;IEnumerable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;Func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IEnumerable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seedThunk&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IEnumerable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;zipThunk&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Zip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Skip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EnumerableEx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Memoize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seedThunk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Concat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zipThunk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point we&amp;#8217;re done! We have a lazily-evaluated, infinite Fibonacci sequence that is defined in terms of itself. Here&amp;#8217;s the full working&amp;nbsp;code!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;System.Linq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;System.Collections.Generic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Fibonacci&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Uses http://www.nuget.org/packages/ix_experimental-main&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// for memoization&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MainClass&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;IEnumerable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

            &lt;span class=&#34;n&#34;&gt;Func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IEnumerable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seedThunk&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;Func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IEnumerable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;zipThunk&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Zip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Skip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

            &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EnumerableEx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Memoize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seedThunk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Concat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zipThunk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

            &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first30&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Take&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

            &lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;LazyExtensions&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IEnumerable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Concat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;(&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IEnumerable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;Func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IEnumerable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 10 Mar 2014 17:00:00 GMT</pubDate>
        <guid isPermaLink="false">tag:fuqua.io/blog,2014-03-11:/2014/03/haskells-elegant-fibonacci-in-csharp</guid>
    </item>
        
            <item>
        <title>Native JavaScript Promises and Browser APIs</title>
        <link>https://fuqua.io/blog/2014/02/native-javascript-promises-and-browser-apis/</link>
        <description>&lt;p&gt;One of the interesting evolutions of mainstream JavaScript development has been the widespread adoption of &lt;a class=&#34;reference external&#34; href=&#34;http://en.wikipedia.org/wiki/Promise_(programming)&#34;&gt;Promises&lt;/a&gt;. Promises simplify asynchronous code. Since JavaScript in the browser uses a single-threaded, callback-based programming model, asynchronicity is&amp;nbsp;everywhere.&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;the-problem-with-asynchronicity&#34;&gt;
&lt;h3&gt;The Problem with&amp;nbsp;Asynchronicity&lt;/h3&gt;
&lt;p&gt;Asynchronous patterns are great for keeping UIs responsive and non-blocking, but they have a cost: asynchronous JavaScript code tends to be highly nested, which hurts readability. Additionally, because you can&amp;#8217;t catch errors that are thrown inside callbacks from outside those callbacks, error handling needs to be spread throughout every level of&amp;nbsp;nesting.&lt;/p&gt;
&lt;p&gt;When we use Promises, our code structure is flattened, and our error handling code can be consolidated into a single area. This makes our code easier to both understand and modify. As a result, Promises have taken the JavaScript ecosystem by&amp;nbsp;storm.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;the-native-promise-api&#34;&gt;
&lt;h3&gt;The Native Promise&amp;nbsp;&lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Historically, we&amp;#8217;ve used libraries such as &lt;a class=&#34;reference external&#34; href=&#34;http://documentup.com/kriskowal/q/&#34;&gt;q.js&lt;/a&gt; to add Promises to our applications. However, with ECMAScript 6 &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/domenic/promises-unwrapping&#34;&gt;adding Promises to its specification&lt;/a&gt; and recent versions of Chrome and Firefox shipping with support (since Chrome 33 and Firefox 29), we can start using native JavaScript Promises &amp;#8211; no libraries&amp;nbsp;required!&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s not all roses, though. Almost all of the existing browser APIs are callback-based, so they require a thin wrapper be able to use Promises. Let&amp;#8217;s walk through wrapping a couple of browser APIs to add support for native JavaScript&amp;nbsp;Promises.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;ve used q.js Promises before, you&amp;#8217;ll find the &lt;a class=&#34;reference external&#34; href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&#34;&gt;native Promise &lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt;&lt;/a&gt; very familiar. At its heart, there&amp;#8217;s a global &lt;tt class=&#34;docutils literal&#34;&gt;Promise&lt;/tt&gt; interface. We instantiate a Promise object that represents an asynchronous operation. and use methods on the Promise object to chain together multiple Promises (and thus multiple asynchronous&amp;nbsp;operations).&lt;/p&gt;
&lt;p&gt;A Promise object can do one of two&amp;nbsp;things:&lt;/p&gt;
&lt;ul class=&#34;simple&#34;&gt;
&lt;li&gt;Eventually return a&amp;nbsp;value&lt;/li&gt;
&lt;li&gt;Eventually encounter an&amp;nbsp;error&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In JavaScript Promise parlance, returning a value is known as &lt;strong&gt;resolving&lt;/strong&gt; and encountering an error is known as &lt;strong&gt;rejecting&lt;/strong&gt;. When we construct a promise, we specify when it resolves and when it&amp;nbsp;rejects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;promises-and-the-geolocation-api&#34;&gt;
&lt;h3&gt;Promises and the Geolocation&amp;nbsp;&lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;As an example, let&amp;#8217;s add promise support to the Geolocation &lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt;. The Geolocation &lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt; exposes the &lt;tt class=&#34;docutils literal&#34;&gt;getCurrentPosition&lt;/tt&gt; function, which makes a request for the user&amp;#8217;s geographical position. The function takes an success callback and an error callback. If everything goes well, the success callback is called with the user&amp;#8217;s coordinates as a parameter. If the user denies our request, or we can&amp;#8217;t determine the user&amp;#8217;s position, the error callback is called. A invocation of this function &lt;cite&gt;without&lt;/cite&gt; Promises might look something&amp;nbsp;like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getUserPosition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;success&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;navigator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;geolocation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getCurrentPosition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;success&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;getUserPosition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// we have the user&amp;#39;s position!&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// uhoh, something went wrong.&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code is kind of inside-out; we have to wrap up the core of what we want to do (get the user&amp;#8217;s position) in a function and pass it deep into the program. Let&amp;#8217;s fix this by using&amp;nbsp;Promises.&lt;/p&gt;
&lt;p&gt;Remember that a Promise can either &lt;strong&gt;resolve&lt;/strong&gt; or &lt;strong&gt;reject&lt;/strong&gt;. The mapping from resolve to the success callback and from reject to the error callback is pretty clear. It&amp;#8217;s simple to wrap this browser &lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt; in a&amp;nbsp;Promise:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getUserPosition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;navigator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;geolocation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getCurrentPosition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can invoke the function to get our promise, and then specify success and failure callbacks using the &lt;tt class=&#34;docutils literal&#34;&gt;then()&lt;/tt&gt; method on our Promise&amp;nbsp;object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getUserPosition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// we have the user&amp;#39;s position!&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// uhoh, something went wrong&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At first blush, this might not seem much better. However, notice that when we call &lt;tt class=&#34;docutils literal&#34;&gt;getUserPosition&lt;/tt&gt;, the function returns, and &lt;cite&gt;then&lt;/cite&gt; we handle the position. In the callback-based version, we handled the position from &lt;cite&gt;inside&lt;/cite&gt; the &lt;tt class=&#34;docutils literal&#34;&gt;getUserPosition&lt;/tt&gt; function.&lt;/p&gt;
&lt;p&gt;While this is a significant change, there&amp;#8217;s not much benefit with just one asynchronous operation. The benefits start compounding when we compose multiple asynchronous operations. To exercise this, let&amp;#8217;s add another asynchronous operation: displaying the user&amp;#8217;s position in an &lt;span class=&#34;caps&#34;&gt;HTML5&lt;/span&gt;&amp;nbsp;Notification.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;promises-and-the-html5-notification-api&#34;&gt;
&lt;h3&gt;Promises and the &lt;span class=&#34;caps&#34;&gt;HTML5&lt;/span&gt; Notification&amp;nbsp;&lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;span class=&#34;caps&#34;&gt;HTML5&lt;/span&gt; Notification &lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt; is also callback-based, but in a different way than the Geolocation &lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt;: it uses a single &lt;tt class=&#34;docutils literal&#34;&gt;handleStatus&lt;/tt&gt; callback, rather than separate callbacks for success and errors. The callback-based code might look like&amp;nbsp;this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getNotificationPermission&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;handleStatus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Notification&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;requestPermission&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;handleStatus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;getNotificationPermission&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;status&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;granted&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// we can show notifications!&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// error, permission denied :(&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For this conversion, we&amp;#8217;ll manually call the &lt;tt class=&#34;docutils literal&#34;&gt;resolve&lt;/tt&gt; and &lt;tt class=&#34;docutils literal&#34;&gt;reject&lt;/tt&gt; handlers:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getNotificationPermission&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;Notification&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;requestPermission&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;status&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;granted&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nx&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;Notification status &amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;getNotificationPermission&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;permission&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// we can show notifications!&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// error, no permission&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that the native browser APIs for Geolocation and Notification originally used two slightly different callback patterns, but in our Promise-based &lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt;, we have a single, unified execution pattern! Now we can easily compose these two operations and start to see the benefits of&amp;nbsp;Promises.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;composing-our-promises&#34;&gt;
&lt;h3&gt;Composing our&amp;nbsp;Promises&lt;/h3&gt;
&lt;p&gt;Now, let&amp;#8217;s write some sample code to flex our Promise &lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt;. We&amp;#8217;ll perform the following&amp;nbsp;actions:&lt;/p&gt;
&lt;ol class=&#34;arabic simple&#34;&gt;
&lt;li&gt;Ask permission to display&amp;nbsp;notifications.&lt;/li&gt;
&lt;li&gt;Ask for the user&amp;#8217;s&amp;nbsp;position.&lt;/li&gt;
&lt;li&gt;Show a notification displaying the user&amp;#8217;s&amp;nbsp;position.&lt;/li&gt;
&lt;li&gt;Handle all of the failure points in the above&amp;nbsp;steps.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We can reuse our &lt;tt class=&#34;docutils literal&#34;&gt;getNotificationPermission&lt;/tt&gt; and &lt;tt class=&#34;docutils literal&#34;&gt;getUserPosition&lt;/tt&gt; functions we defined earlier. Here is the code, in its&amp;nbsp;entirety:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getNotificationPermission&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getUserPosition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayNotification&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// error, something went wrong.&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// we defined this function earlier&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getNotificationPermission&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;Notification&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;requestPermission&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;status&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;granted&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nx&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;Notification status &amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// we defined this function earlier&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getUserPosition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;navigator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;geolocation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getCurrentPosition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// new function. displays lat/lng coordinates in a notification&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;displayNotification&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Notification&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;coords&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;latitude&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
                     &lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;coords&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;longitude&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Even though we&amp;#8217;re dealing entirely with asynchronous operations, our code reads just like synchronous code. Additionally, the error-handling code resembles a try-catch block we might see in normal synchronous code! If an error is thrown in any of our functions, our &lt;tt class=&#34;docutils literal&#34;&gt;catch&lt;/tt&gt; function will take over. In this error handler function we can check the error object to figure out exactly what went wrong and display the appropriate error message to the&amp;nbsp;user.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;altering-the-program-flow&#34;&gt;
&lt;h3&gt;Altering the Program&amp;nbsp;Flow&lt;/h3&gt;
&lt;p&gt;Right now we&amp;#8217;re chaining all of our functions together, one after the other. This causes some inefficiency and a poor user experience: We request permission for notifications and wait to receive it, and then we request the user&amp;#8217;s position and wait to receive it. Since these requests don&amp;#8217;t depend on each other, ideally we would issue both of these requests at once, and then wait until both of the requests were&amp;nbsp;successful.&lt;/p&gt;
&lt;p&gt;The Promise &lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt; has a solution. The static function &lt;tt class=&#34;docutils literal&#34;&gt;Promise.All()&lt;/tt&gt; converts multiple promises into a single promise that resolves when all input promises resolve, or rejects when any input promise rejects. This is exactly what we need for our desired&amp;nbsp;behavior:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;requestNotificationPermission&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;getUserPosition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayPosition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// error, something went wrong.&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;displayPosition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Notification&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;coords&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;latitude&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
                     &lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;coords&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;longitude&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we make both requests and wait until both promises resolve. The values the promises resolve to are passed in an array to the &lt;tt class=&#34;docutils literal&#34;&gt;displayPosition&lt;/tt&gt; function. We only care about the return value of the &lt;tt class=&#34;docutils literal&#34;&gt;getUserPosition&lt;/tt&gt; call, so we index into the results array and retrieve the&amp;nbsp;position.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;the-future&#34;&gt;
&lt;h3&gt;The&amp;nbsp;Future&lt;/h3&gt;
&lt;p&gt;It&amp;#8217;s worth noting that the need to wrap Browser APIs in compatibility layers will hopefully be a short-term pain. There are plans to add Promise support to existing browser APIs where possible. We&amp;#8217;re not there yet, though, so we need these wrappers for&amp;nbsp;now.&lt;/p&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 21 Feb 2014 17:00:00 GMT</pubDate>
        <guid isPermaLink="false">tag:fuqua.io/blog,2014-02-22:/2014/02/native-javascript-promises-and-browser-apis</guid>
    </item>
        
            <item>
        <title>REST APIs and Relational Databases in Clojure</title>
        <link>https://fuqua.io/blog/2013/12/rest-apis-and-relational-databases-in-clojure/</link>
        <description>&lt;p&gt;I&amp;#8217;ve found that most Clojure web application articles out there cover the Ring and Compojure APIs pretty well, but stop short of the data access layer, leaving that up to you. This article will attempt to remedy that, with a focus on relational&amp;nbsp;databases.&lt;/p&gt;
&lt;p&gt;In this post we&amp;#8217;ll create a simple &lt;span class=&#34;caps&#34;&gt;REST&lt;/span&gt; &lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt; for a todo list web application. We&amp;#8217;ll use &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/weavejester/compojure&#34;&gt;Compojure&lt;/a&gt; to create a &lt;span class=&#34;caps&#34;&gt;REST&lt;/span&gt; &lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt;, &lt;a class=&#34;reference external&#34; href=&#34;http://budu.github.io/lobos/&#34;&gt;Lobos&lt;/a&gt; to create and manage our database tables, and &lt;a class=&#34;reference external&#34; href=&#34;http://sqlkorma.com/&#34;&gt;Korma&lt;/a&gt; to query a PostgreSQL&amp;nbsp;database.&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;generating-a-compojure-application&#34;&gt;
&lt;h3&gt;Generating a Compojure&amp;nbsp;Application&lt;/h3&gt;
&lt;p&gt;The first thing we&amp;#8217;ll do is &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/weavejester/compojure/wiki/Getting-Started&#34;&gt;set up a Compojure web application&lt;/a&gt;. Use Leiningen to create and spin up an empty web&amp;nbsp;application:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;gp&#34;&gt;&amp;gt;&lt;/span&gt; lein new compojure todoapp
&lt;span class=&#34;gp&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; todoapp
&lt;span class=&#34;gp&#34;&gt;&amp;gt;&lt;/span&gt; lein ring server
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After issuing the &lt;tt class=&#34;docutils literal&#34;&gt;lein ring server&lt;/tt&gt; command, your browser should open up a &amp;quot;Hello World&amp;quot; page on &lt;a class=&#34;reference external&#34; href=&#34;http://localhost:3000/&#34;&gt;http://localhost:3000/&lt;/a&gt;. Let&amp;#8217;s make that a little bit more interesting! Keeping the server running, open the generated &lt;tt class=&#34;docutils literal&#34;&gt;src/todoapp/handler.clj&lt;/tt&gt; file in your favorite editor and examine the&amp;nbsp;contents:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;ns &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;todoapp.handler&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:use&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;compojure.core&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:require&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;compojure.handler&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;handler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;compojure.route&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;defroutes&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;app-routes&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;&lt;span class=&#34;caps&#34;&gt;GET&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;route/resources&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;route/not-found&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Not Found&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;handler/site&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;app-routes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class=&#34;docutils literal&#34;&gt;defroutes&lt;/tt&gt; line is setting up our &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/weavejester/compojure/wiki/Routes-In-Detail&#34;&gt;&lt;span class=&#34;caps&#34;&gt;HTTP&lt;/span&gt; request handlers&lt;/a&gt;. An &lt;span class=&#34;caps&#34;&gt;HTTP&lt;/span&gt; request handler defines our application&amp;#8217;s response for a given &lt;span class=&#34;caps&#34;&gt;HTTP&lt;/span&gt; request. Currently, we&amp;#8217;re defining a &amp;quot;Hello World&amp;quot; response for &lt;span class=&#34;caps&#34;&gt;HTTP&lt;/span&gt; &lt;span class=&#34;caps&#34;&gt;GET&lt;/span&gt; requests to the root &lt;span class=&#34;caps&#34;&gt;URL&lt;/span&gt;. If the incoming request is for some other resource, say &lt;tt class=&#34;docutils literal&#34;&gt;/foo.txt&lt;/tt&gt;, the server attempts to find a static resource by that name (in the directory &lt;tt class=&#34;docutils literal&#34;&gt;resources/public&lt;/tt&gt;, by default). If that fails, we&amp;#8217;ll return a 404 &amp;quot;Not Found&amp;quot;&amp;nbsp;message.&lt;/p&gt;
&lt;p&gt;The &lt;tt class=&#34;docutils literal&#34;&gt;def app&lt;/tt&gt; line takes the &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;app-routes&lt;/span&gt;&lt;/tt&gt; that we defined, and wraps them with the &lt;tt class=&#34;docutils literal&#34;&gt;handler/site&lt;/tt&gt; function. This Compojure function adds useful functionality (called &amp;quot;middleware&amp;quot;) for websites, like user session tracking, cookie handling, etc. For a full list of added functionality see the &lt;a class=&#34;reference external&#34; href=&#34;http://weavejester.github.io/compojure/compojure.handler.html&#34;&gt;Compojure documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;setting-up-a-json-rest-api&#34;&gt;
&lt;h3&gt;Setting up a &lt;span class=&#34;caps&#34;&gt;JSON&lt;/span&gt; &lt;span class=&#34;caps&#34;&gt;REST&lt;/span&gt;&amp;nbsp;&lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Let&amp;#8217;s modify the middleware stack (the &lt;tt class=&#34;docutils literal&#34;&gt;def app&lt;/tt&gt; statement) to be more suitable for a &lt;span class=&#34;caps&#34;&gt;REST&lt;/span&gt; &lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt;. The default &lt;tt class=&#34;docutils literal&#34;&gt;handler/site&lt;/tt&gt; middleware assumes you&amp;#8217;re building a website; since we&amp;#8217;re building a &lt;span class=&#34;caps&#34;&gt;JSON&lt;/span&gt; &lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt;, we&amp;#8217;ll swap out &lt;tt class=&#34;docutils literal&#34;&gt;handler/site&lt;/tt&gt; for the more barebones &lt;tt class=&#34;docutils literal&#34;&gt;handler/api&lt;/tt&gt;, and add some middleware for parsing and returning&amp;nbsp;&lt;span class=&#34;caps&#34;&gt;JSON&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;In our &lt;tt class=&#34;docutils literal&#34;&gt;project.clj&lt;/tt&gt; file, we&amp;#8217;ll add a dependency on the &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/ring-clojure/ring-json&#34;&gt;ring-json&lt;/a&gt;&amp;nbsp;library:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:dependencies&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;org.clojure/clojure&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;1.5.1&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;compojure&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;1.1.6&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ring/ring-json&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;0.2.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we&amp;#8217;ll add a reference to ring-json in &lt;tt class=&#34;docutils literal&#34;&gt;handler.clj&lt;/tt&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:require&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;compojure.handler&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;handler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;compojure.route&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ring.middleware.json&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And add the middleware to our application, as well as swapping out &lt;tt class=&#34;docutils literal&#34;&gt;handler/site&lt;/tt&gt; for the aforementioned &lt;tt class=&#34;docutils literal&#34;&gt;handler/api&lt;/tt&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;handler/api&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;app-routes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;json/wrap-json-params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;json/wrap-json-response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;stubbing-out-our-application&#34;&gt;
&lt;h3&gt;Stubbing out our&amp;nbsp;application&lt;/h3&gt;
&lt;p&gt;Next, let&amp;#8217;s stub out our &lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt;. We&amp;#8217;ll need our typical &lt;span class=&#34;caps&#34;&gt;CRUD&lt;/span&gt; operations, so let&amp;#8217;s remove the &amp;quot;Hello World&amp;quot; route and add the &lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt;&amp;nbsp;stubs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;defroutes&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;app-routes&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;&lt;span class=&#34;caps&#34;&gt;GET&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;/api/todos&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;span class=&#34;caps&#34;&gt;TODO&lt;/span&gt;: return all list items&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;&lt;span class=&#34;caps&#34;&gt;GET&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;/api/todos/:id&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;span class=&#34;caps&#34;&gt;TODO&lt;/span&gt;: return a single list item&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;&lt;span class=&#34;caps&#34;&gt;POST&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;/api/todos&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;span class=&#34;caps&#34;&gt;TODO&lt;/span&gt;: create a list item&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;&lt;span class=&#34;caps&#34;&gt;PUT&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;/api/todos/:id&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;span class=&#34;caps&#34;&gt;TODO&lt;/span&gt;: update a list item&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;&lt;span class=&#34;caps&#34;&gt;DELETE&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;/api/todos/:id&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;span class=&#34;caps&#34;&gt;TODO&lt;/span&gt;: delete a list item&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;route/resources&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;route/not-found&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Not Found&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When we visit &lt;a class=&#34;reference external&#34; href=&#34;http://localhost:3000/api/todos&#34;&gt;http://localhost:3000/api/todos&lt;/a&gt; we should get our stub message &amp;quot;&lt;span class=&#34;caps&#34;&gt;TODO&lt;/span&gt;: return all list items&amp;quot; back. However, since we deleted the &amp;quot;Hello World&amp;quot; route that responded to the root &lt;span class=&#34;caps&#34;&gt;URL&lt;/span&gt;, we&amp;#8217;ll get a 404 &amp;quot;Not Found&amp;quot; error when we visit &lt;a class=&#34;reference external&#34; href=&#34;http://localhost:3000/&#34;&gt;http://localhost:3000/&lt;/a&gt;. Since we specified a static resource route, we can fix the 404 error by adding an &amp;quot;index.html&amp;quot; placeholder resource in the &lt;tt class=&#34;docutils literal&#34;&gt;resources/public/&lt;/tt&gt; directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!&lt;span class=&#34;caps&#34;&gt;DOCTYPE&lt;/span&gt; html&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;caps&#34;&gt;TODO&lt;/span&gt;: Make a front-end :)
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;connecting-to-a-database&#34;&gt;
&lt;h3&gt;Connecting to a&amp;nbsp;Database&lt;/h3&gt;
&lt;p&gt;Now that we have the &lt;span class=&#34;caps&#34;&gt;REST&lt;/span&gt; interface stubbed out, let&amp;#8217;s move on to the Postgres database layer. We&amp;#8217;ll be using the &lt;a class=&#34;reference external&#34; href=&#34;http://sqlkorma.com/&#34;&gt;Korma&lt;/a&gt; library to query our database and &lt;a class=&#34;reference external&#34; href=&#34;http://budu.github.io/lobos/&#34;&gt;Lobos&lt;/a&gt; to manage&amp;nbsp;migrations.&lt;/p&gt;
&lt;p&gt;Rather than create our tables manually via &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;caps&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;caps&#34;&gt;TABLE&lt;/span&gt;&lt;/tt&gt; statements, let&amp;#8217;s use Lobos migrations. First we&amp;#8217;ll need to set up the database connection string, which we can use for both Korma and&amp;nbsp;Lobos.&lt;/p&gt;
&lt;p&gt;In our &lt;tt class=&#34;docutils literal&#34;&gt;project.clj&lt;/tt&gt;, add a reference to Korma, Lobos, and the PostgreSQL&amp;nbsp;driver:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;korma&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;0.3.0-&lt;span class=&#34;caps&#34;&gt;RC5&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lobos&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;1.0.0-beta1&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;org.postgresql/postgresql&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;9.2-1002-jdbc4&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In a new file, &lt;tt class=&#34;docutils literal&#34;&gt;src/todoapp/database.clj&lt;/tt&gt;, specify the database connection information. We&amp;#8217;re using an empty database called &amp;quot;todo&amp;quot; with the user &amp;quot;db-user&amp;quot; and the password&amp;nbsp;&amp;quot;SuperSecretPassword&amp;quot;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;ns &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;todoapp.database&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:require&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;korma.db&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;korma&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lobos.connectivity&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lobos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;db-connection-info&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:classname&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;org.postgresql.Driver&amp;quot;&lt;/span&gt;
   &lt;span class=&#34;ss&#34;&gt;:subprotocol&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;postgresql&amp;quot;&lt;/span&gt;
   &lt;span class=&#34;ss&#34;&gt;:user&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;db-user&amp;quot;&lt;/span&gt;
   &lt;span class=&#34;ss&#34;&gt;:password&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;SuperSecretPassword&amp;quot;&lt;/span&gt;
   &lt;span class=&#34;ss&#34;&gt;:subname&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;//localhost:5432/todo&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; set up korma&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;korma/defdb&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;db-connection-info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; set up lobos&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;lobos/open-global&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;db-connection-info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#8217;s it! Now Lobos and Korma know how to connect to our&amp;nbsp;database.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;creating-database-tables-with-lobos&#34;&gt;
&lt;h3&gt;Creating Database Tables with&amp;nbsp;Lobos&lt;/h3&gt;
&lt;p&gt;Now, let&amp;#8217;s use Lobos to create a simple table named &amp;quot;items&amp;quot; with an integer primary key and varchar title. Make a new file called &lt;tt class=&#34;docutils literal&#34;&gt;src/todoapp/migrations.clj&lt;/tt&gt;, and add the&amp;nbsp;following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;ns &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;todoapp.migrations&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:refer-clojure&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:exclude&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;alter drop &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;bigint&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;boolean char double float time &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;complement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:use&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;todoapp.database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lobos&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;migration&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;core&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;defmigration&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;add-todo-table&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;up &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;create&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;table&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:items&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;integer&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:primary-key&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:auto-inc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;varchar&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:title&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;512&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;down &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;drop &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;table&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unfortunately, one aspect of Lobos&amp;#8217;s design is rather unidiomatic: it provides a &lt;tt class=&#34;docutils literal&#34;&gt;(migrate)&lt;/tt&gt; function that, by default, only runs migrations in the &lt;tt class=&#34;docutils literal&#34;&gt;lobos.migrations&lt;/tt&gt; namespace. My personal preference is to keep my migrations for an application in that application&amp;#8217;s namespace. We can configure Lobos to run the migrations in our desired namespace by rebinding the &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;lobos.migration/*migrations-namespace*&lt;/span&gt;&lt;/tt&gt; var, and running the &lt;tt class=&#34;docutils literal&#34;&gt;(migrate)&lt;/tt&gt; function in that&amp;nbsp;context:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;run-migrations&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;binding &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lobos.migration/*migrations-namespace*&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;todoapp.migrations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;migrate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can run our migrations to generate our table by calling &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;(run-migrations)&lt;/span&gt;&lt;/tt&gt; in our&amp;nbsp;&lt;span class=&#34;caps&#34;&gt;REPL&lt;/span&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;gp&#34;&gt;&amp;gt;&lt;/span&gt; lein repl
&lt;span class=&#34;gp&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;use &lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;todoapp.migrations&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;gp&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;run-migrations&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;go&#34;&gt;add-todo-table&lt;/span&gt;
&lt;span class=&#34;go&#34;&gt;nil&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, if you check out the database, you&amp;#8217;ll see we have a &lt;tt class=&#34;docutils literal&#34;&gt;items&lt;/tt&gt; table, ready for use! Just for kicks, let&amp;#8217;s add another migration that will add an &lt;tt class=&#34;docutils literal&#34;&gt;is_complete&lt;/tt&gt; column to our &lt;tt class=&#34;docutils literal&#34;&gt;items&lt;/tt&gt; table:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;is-complete&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;table&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:items&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;boolean &lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:is_complete&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;defmigration&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;add-is-complete-column&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;up &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;alter &lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:add&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;is-complete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;down &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;alter &lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:drop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;is-complete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we call &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;(run-migrations)&lt;/span&gt;&lt;/tt&gt; again, Lobos will intelligently alter our tables; it will only run the &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;add-is-complete-column&lt;/span&gt;&lt;/tt&gt; migration, since it knows it already ran the &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;add-todo-table&lt;/span&gt;&lt;/tt&gt; migration. Lobos has an &lt;a class=&#34;reference external&#34; href=&#34;http://budu.github.io/lobos/doc/uberdoc.frontend.html&#34;&gt;extensive &lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt;&lt;/a&gt; that provides many powerful table creation and migration&amp;nbsp;options.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;querying-and-inserting-data-with-korma&#34;&gt;
&lt;h3&gt;Querying and Inserting Data with&amp;nbsp;Korma&lt;/h3&gt;
&lt;p&gt;Now that we have our database all ready to go, let&amp;#8217;s finish off our application! We&amp;#8217;ll be replacing our &lt;span class=&#34;caps&#34;&gt;REST&lt;/span&gt; &lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt; stubs we built earlier with calls to our database, using the Korma&amp;nbsp;library.&lt;/p&gt;
&lt;p&gt;We&amp;#8217;ll be creating a &lt;tt class=&#34;docutils literal&#34;&gt;src/todoapp/query.clj&lt;/tt&gt; file that contains our Korma statements. First up, we let Korma know about our &lt;tt class=&#34;docutils literal&#34;&gt;items&lt;/tt&gt; table using a &lt;tt class=&#34;docutils literal&#34;&gt;defentity&lt;/tt&gt; statement. Korma does not need any knowledge of our table&amp;#8217;s schema; it just needs to know that the table&amp;nbsp;exists:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;ns &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;todoapp.query&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:require&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;todoapp.database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;korma.core&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:refer&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;defentity&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Korma provides a &lt;a class=&#34;reference external&#34; href=&#34;http://sqlkorma.com/docs#select&#34;&gt;nice, composable &lt;span class=&#34;caps&#34;&gt;DSL&lt;/span&gt;&lt;/a&gt; for querying our database. Let&amp;#8217;s define a couple of functions that interact with the &lt;tt class=&#34;docutils literal&#34;&gt;items&lt;/tt&gt; table:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;get-todos&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;select &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-todo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;items&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;values&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:title&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;delete-todo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;delete&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;items&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;= &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]})))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;update-todo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;is-complete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;items&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;set-fields&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:title&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;title&lt;/span&gt;
                       &lt;span class=&#34;ss&#34;&gt;:is_complete&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;is-complete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;= &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]})))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;get-todo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;first&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;select &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;items&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:id&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;= &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]}))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There shouldn&amp;#8217;t be anything too shocking in these functions, except maybe how readable the Korma code is. The &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;get-todo&lt;/span&gt;&lt;/tt&gt; function uses the fact that &lt;tt class=&#34;docutils literal&#34;&gt;(first [])&lt;/tt&gt; is &lt;tt class=&#34;docutils literal&#34;&gt;nil&lt;/tt&gt;, so &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;get-todo&lt;/span&gt;&lt;/tt&gt; will return a single todo item, or &lt;tt class=&#34;docutils literal&#34;&gt;nil&lt;/tt&gt; if a todo item with the given id does not&amp;nbsp;exist.&lt;/p&gt;
&lt;p&gt;These functions provide everything we need for our simple &lt;span class=&#34;caps&#34;&gt;CRUD&lt;/span&gt; interface, so let&amp;#8217;s hook up these queries to our Compojure route&amp;nbsp;handlers:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;defroutes&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;app-routes&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;&lt;span class=&#34;caps&#34;&gt;GET&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;/api/todos&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;get-todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;&lt;span class=&#34;caps&#34;&gt;GET&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;/api/todos/:id&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;get-todo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Integer/parseInt&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;&lt;span class=&#34;caps&#34;&gt;POST&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;/api/todos&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;add-todo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;&lt;span class=&#34;caps&#34;&gt;PUT&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;/api/todos/:id&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;is_complete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;update-todo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Integer/parseInt&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;is_complete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;&lt;span class=&#34;caps&#34;&gt;DELETE&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;/api/todos/:id&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;delete-todo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Integer/parseInt&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;route/resources&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;route/not-found&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Not Found&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We need to parse our &lt;tt class=&#34;docutils literal&#34;&gt;id&lt;/tt&gt; parameters from strings to integers, since they&amp;#8217;re being passed in via the &lt;span class=&#34;caps&#34;&gt;URL&lt;/span&gt;, so type info is lost. The ring-json library we added earlier allows us to specify our desired &lt;span class=&#34;caps&#34;&gt;JSON&lt;/span&gt; fields (like &lt;tt class=&#34;docutils literal&#34;&gt;title&lt;/tt&gt; and &lt;tt class=&#34;docutils literal&#34;&gt;is_complete&lt;/tt&gt;) as route parameters. We can also pass our native Clojure datastructures to the Ring response function, and &lt;span class=&#34;caps&#34;&gt;JSON&lt;/span&gt; serialization is done&amp;nbsp;automatically.&lt;/p&gt;
&lt;p&gt;We can use the command line tool &lt;tt class=&#34;docutils literal&#34;&gt;curl&lt;/tt&gt; to test out our&amp;nbsp;&lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;gp&#34;&gt;&amp;gt;&lt;/span&gt; curl -X &lt;span class=&#34;caps&#34;&gt;POST&lt;/span&gt; -d &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;quot;title&amp;quot;:&amp;quot;remember the milk&amp;quot;}&amp;#39;&lt;/span&gt; -H &lt;span class=&#34;s2&#34;&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; http://localhost:3000/api/todos
&lt;span class=&#34;go&#34;&gt;{&amp;quot;is_complete&amp;quot;:false,&amp;quot;title&amp;quot;:&amp;quot;remember the milk&amp;quot;,&amp;quot;id&amp;quot;:1}&lt;/span&gt;
&lt;span class=&#34;gp&#34;&gt;&amp;gt;&lt;/span&gt; curl -X &lt;span class=&#34;caps&#34;&gt;PUT&lt;/span&gt; -d &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;quot;title&amp;quot;:&amp;quot;don&amp;#39;&lt;/span&gt;t forget the milk!&lt;span class=&#34;s2&#34;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;is_complete&lt;span class=&#34;s2&#34;&gt;&amp;quot;:false}&amp;#39; -H &amp;quot;&lt;/span&gt;Content-Type: application/json&lt;span class=&#34;s2&#34;&gt;&amp;quot; http://localhost:3000/api/todos/1&lt;/span&gt;
&lt;span class=&#34;go&#34;&gt;{&amp;quot;is_complete&amp;quot;:false,&amp;quot;title&amp;quot;:&amp;quot;don&amp;#39;t forget the milk!&amp;quot;,&amp;quot;id&amp;quot;:1}&lt;/span&gt;
&lt;span class=&#34;gp&#34;&gt;&amp;gt;&lt;/span&gt; curl -X &lt;span class=&#34;caps&#34;&gt;DELETE&lt;/span&gt; http://localhost:3000/api/todos/1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We now have a simple &lt;span class=&#34;caps&#34;&gt;JSON&lt;/span&gt; &lt;span class=&#34;caps&#34;&gt;REST&lt;/span&gt; &lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt; over a relational database. We can manage our database schema using Lobos migrations, and query our database using elegant, idiomatic Clojure via&amp;nbsp;Korma.&lt;/p&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 03 Dec 2013 17:00:00 GMT</pubDate>
        <guid isPermaLink="false">tag:fuqua.io/blog,2013-12-04:/2013/12/rest-apis-and-relational-databases-in-clojure</guid>
    </item>
        </channel>
</rss>