<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Blog - Will Fuqua</title><link href="https://fuqua.io/" rel="alternate"></link><link href="https://fuqua.io/blog/feed.atom.xml" rel="self"></link><id>https://fuqua.io/</id><updated>2021-09-04T00:00:00+07:00</updated><entry><title>Enabling Command Line Completions with dotnet-suggest</title><link href="https://fuqua.io/blog/2021/09/enabling-command-line-completions-with-dotnet-suggest/" rel="alternate"></link><published>2021-09-04T00:00:00+07:00</published><updated>2021-09-04T00:00:00+07:00</updated><author><name>Will Fuqua</name></author><id>tag:fuqua.io,2021-09-04:/blog/2021/09/enabling-command-line-completions-with-dotnet-suggest/</id><summary type="html">&lt;p&gt;I recently removed the hand-written command line parser from &lt;a class="reference external" href="https://github.com/waf/CSharpRepl"&gt;C# &lt;span class="caps"&gt;REPL&lt;/span&gt;&lt;/a&gt; and replaced it with the more standard System.CommandLine NuGet package. As part of this, it gained dotnet-suggest support. I couldn&amp;#8217;t find much online discussion about dotnet-suggest, so I&amp;#8217;m jotting down some notes&amp;nbsp;here.&lt;/p&gt;
&lt;p&gt;There are two …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently removed the hand-written command line parser from &lt;a class="reference external" href="https://github.com/waf/CSharpRepl"&gt;C# &lt;span class="caps"&gt;REPL&lt;/span&gt;&lt;/a&gt; and replaced it with the more standard System.CommandLine NuGet package. As part of this, it gained dotnet-suggest support. I couldn&amp;#8217;t find much online discussion about dotnet-suggest, so I&amp;#8217;m jotting down some notes&amp;nbsp;here.&lt;/p&gt;
&lt;p&gt;There are two parts to&amp;nbsp;dotnet-suggest:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;As an end-user, we configure our shell to enable dotnet-suggest shell&amp;nbsp;completions.&lt;/li&gt;
&lt;li&gt;As a developer, we use System.CommandLine to provide rich completions to our end&amp;nbsp;users.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We&amp;#8217;ll be covering both parts in this blog post, as well as how it all works under the hood. At the end, we&amp;#8217;ll look at an interesting way all this functionality is used (or abused?) in C# &lt;span class="caps"&gt;REPL&lt;/span&gt;.&lt;/p&gt;
&lt;div class="section" id="why-would-we-want-to-enable-dotnet-suggest"&gt;
&lt;h2&gt;Why would we want to enable&amp;nbsp;dotnet-suggest?&lt;/h2&gt;
&lt;p&gt;By configuring our system to take advantage of dotnet-suggest, we&amp;#8217;ll unlock automatic command line completion for applications built with System.CommandLine. Quite a few applications in the dotnet ecosystem are built with System.CommandLine, and it&amp;#8217;s especially prevalent in dotnet global tools. It&amp;#8217;s cross-platform and works across Windows, Mac &lt;span class="caps"&gt;OS&lt;/span&gt;, and&amp;nbsp;Linux.&lt;/p&gt;
&lt;p&gt;For example, say we&amp;#8217;re using the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;dotnet-trace&lt;/span&gt;&lt;/tt&gt; tool to gather performance traces of a running process. If we&amp;#8217;ve configured dotnet-suggest in our shell, we get the following&amp;nbsp;experience:&lt;/p&gt;
&lt;video controls style="width:100%; border-radius: 4px;"&gt;
    &lt;source src="/img/dotnet-suggest/dotnet-trace-completions.mp4" type="video/mp4"&gt;
    Sorry, the current browser doesn&amp;#8217;t support embedded &lt;span class="caps"&gt;MP4&lt;/span&gt; videos.
&lt;/video&gt;&lt;p&gt;It&amp;#8217;s a nice experience; we have our subcommands, command line flags, and any enumeration values tab-completed for&amp;nbsp;us.&lt;/p&gt;
&lt;p&gt;To enable this, we need to do a quick, one-time configuration of our&amp;nbsp;shell:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Install the dotnet-suggest global tool by running the following&amp;nbsp;command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;&amp;gt; dotnet tool install -g dotnet-suggest&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Add either &lt;a class="reference external" href="https://github.com/dotnet/command-line-api/blob/main/src/System.CommandLine.Suggest/dotnet-suggest-shim.ps1"&gt;this PowerShell snippet&lt;/a&gt; or &lt;a class="reference external" href="https://github.com/dotnet/command-line-api/blob/main/src/System.CommandLine.Suggest/dotnet-suggest-shim.bash"&gt;this Bash snippet&lt;/a&gt; to our shell configuration file. In PowerShell, our shell configuration file path is available in the &lt;tt class="docutils literal"&gt;$profile&lt;/tt&gt; variable, and for Bash or &lt;span class="caps"&gt;ZSH&lt;/span&gt; it&amp;#8217;s &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.bash_profile&lt;/span&gt;&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.zshrc&lt;/span&gt;&lt;/tt&gt;,&amp;nbsp;respectively.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And we&amp;#8217;re done! When we use applications written with System.CommandLine, like &lt;a class="reference external" href="https://github.com/waf/CSharpRepl"&gt;C# &lt;span class="caps"&gt;REPL&lt;/span&gt;&lt;/a&gt; and &lt;a class="reference external" href="https://docs.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-trace"&gt;dotnet-trace&lt;/a&gt;, we can enjoy a first-rate tab completion&amp;nbsp;experience.&lt;/p&gt;
&lt;p&gt;Next, we&amp;#8217;ll look at how to add dotnet-suggest support to our own tools. Spoiler, it&amp;#8217;s&amp;nbsp;trivial.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-system-commandline-and-dotnet-suggest-as-a-developer"&gt;
&lt;h2&gt;Using System.CommandLine and dotnet-suggest as a&amp;nbsp;developer&lt;/h2&gt;
&lt;p&gt;We&amp;#8217;ll be using System.CommandLine to handle our command line parsing. A full tutorial on this library would get a bit lengthy, so we&amp;#8217;ll only cover the very basics needed to add dotnet-suggest support. For a full walkthrough of System.CommandLine, see the &lt;a class="reference external" href="https://github.com/dotnet/command-line-api#readme"&gt;&lt;span class="caps"&gt;README&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Despite System.CommandLine being around for a while now, it&amp;#8217;s still listed as pre-release, so we&amp;#8217;ll need to install it with the pre-release&amp;nbsp;flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;&amp;gt; dotnet add package System.CommandLine --prerelease&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, we&amp;#8217;ll use System.CommandLine in our application to define and parse our application&amp;#8217;s command line&amp;nbsp;arguments:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Define a root command and its&amp;nbsp;options.&lt;/li&gt;
&lt;li&gt;Optionally define subcommands. This is useful when there are different sets of command line options. Using Git as an example, &lt;tt class="docutils literal"&gt;git&lt;/tt&gt; is a root command, and &lt;tt class="docutils literal"&gt;git clone&lt;/tt&gt; is a sub-command that takes a different set of&amp;nbsp;options.&lt;/li&gt;
&lt;li&gt;Pass your root command to a &lt;tt class="docutils literal"&gt;CommandLineBuilder&lt;/tt&gt;, which provides a fluent way to add functionality to your command. It can autogenerate &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--help&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--version&lt;/span&gt;&lt;/tt&gt; commands, as well as set up dotnet-suggest&amp;nbsp;integration.&lt;/li&gt;
&lt;li&gt;Define a callback that will invoke your app; the parameters of the callback correspond with the command line options you defined in Step&amp;nbsp;1.&lt;/li&gt;
&lt;li&gt;Invoke the command line built by the &lt;tt class="docutils literal"&gt;CommandLineBuilder&lt;/tt&gt;, providing the args supplied to your&amp;nbsp;program.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A simple yet fully-working application might look like the following. It has autogenerated help and full dotnet-suggest&amp;nbsp;support:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;System.CommandLine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;System.CommandLine.Builder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;System.CommandLine.Invocation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;System.CommandLine.Parsing&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// define our 3 command line parameters.&lt;/span&gt;
&lt;span class="c1"&gt;// the command can be invoked like MyApp --animal Cat --Emotion Normal &amp;quot;Hello&amp;quot;&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rootCommand&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RootCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a little greeter app&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;--animal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;getDefaultValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Cat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Which animal should say the message&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// we have suggestions for the animal, but do not constrain&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// it to only these options. We could also pass a function&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// to dynamically generate the suggestions.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddSuggestions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Cat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Dog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Velociraptor&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// by using an enum, we constrain the options. We could also use&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// FromAmong(), similar to AddSuggestions() above, if we wanted&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// to constrain with Strings instead of an Enum.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Emotion&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;--emotion&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;getDefaultValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Emotion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Normal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;How excited they should be when saying the message&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// This is a positional argument; no command line flag is required.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Argument&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;getDefaultValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;The message to say&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// define our actual application. The callback arguments match the&lt;/span&gt;
&lt;span class="c1"&gt;// options and arguments defined above.&lt;/span&gt;
&lt;span class="n"&gt;rootCommand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CommandHandler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Emotion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;emotion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;The {animal} says {message}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;emotion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;Emotion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Normal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;Emotion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Excited&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;Emotion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ecstatic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;!!!!!!!!!!&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// set up common functionality like --help, --version, and dotnet-suggest support&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;commandLine&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CommandLineBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rootCommand&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UseDefaults&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// automatically configures dotnet-suggest&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// invokes our handler callback and actually runs our application&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;commandLine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InvokeAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;enum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Emotion&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Normal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Excited&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Ecstatic&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first time we run this program, the program will register itself with dotnet-suggest. Subsequent terminal windows will then be able to take advantage of the dotnet-suggest support automatically, assuming we&amp;#8217;ve done the shell setup earlier in this&amp;nbsp;post.&lt;/p&gt;
&lt;p&gt;From a development perspective, we&amp;#8217;re done! That&amp;#8217;s all we have to do to enable dotnet-suggest in our application. For the remainder of this blog post, we&amp;#8217;ll look into what&amp;#8217;s going on &amp;#8220;under the&amp;nbsp;hood.&amp;#8221;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-dotnet-suggest-works"&gt;
&lt;h2&gt;How dotnet-suggest&amp;nbsp;works&lt;/h2&gt;
&lt;p&gt;Ultimately, dotnet-suggest uses shell-specific functionality to provide its autocompletions. In PowerShell, for example, it uses &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Register-ArgumentCompleter&lt;/span&gt;&lt;/tt&gt;. In this section, we&amp;#8217;ll see how dotnet-suggest determines the completions it provides to these shell-specific hooks, but we won&amp;#8217;t actually go into the shell-specific&amp;nbsp;functionality.&lt;/p&gt;
&lt;p&gt;In our above program, we called &lt;tt class="docutils literal"&gt;.UseDefaults()&lt;/tt&gt;. This function in turn called the following two functions (among&amp;nbsp;others):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterWithDotnetSuggest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UseSuggestDirective&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once we understand both these functions, we&amp;#8217;ll fully understand how dotnet-suggest&amp;nbsp;works!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RegisterWithDotnetSuggest()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As the name implies, this line will register our application with dotnet-suggest. Applications that are .&lt;span class="caps"&gt;NET&lt;/span&gt; Global Tools will be automatically discovered (by nature of being in the .&lt;span class="caps"&gt;NET&lt;/span&gt; Global Tool installation directory), but this line is needed when running our own binaries elsewhere on the&amp;nbsp;filesystem.&lt;/p&gt;
&lt;p&gt;Registration happens by writing to the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.dotnet-suggest-registration.txt&lt;/span&gt;&lt;/tt&gt; file. This file is simply a list of executables and their paths. It&amp;#8217;s read by the code snippet we put in our shell profile, so dotnet-suggest doesn&amp;#8217;t try to autocomplete every application on our system; only the ones that actually support&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;This registration only happens once; when registration is complete a file will be written to our filesystem, and future registrations will be skipped if this file already exists. On Windows, this file is in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/AppData/Local/Temp/system-commandline-sentinel-files&lt;/span&gt;&lt;/tt&gt;. More generally, it&amp;#8217;s in the path returned by &lt;tt class="docutils literal"&gt;Path.GetTempPath()&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UseSuggestDirective()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This function allows dotnet-suggest to query our application for available commandline options. dotnet-suggest will send queries to our application as special command line parameters, and our application responds by writing to stdout (i.e. it uses&amp;nbsp;Console.WriteLine).&lt;/p&gt;
&lt;p&gt;We can see how this works by pretending to be dotnet-suggest and sending our own command line parameter queries. We&amp;#8217;ll use what System.CommandLine calls a &amp;#8220;directive&amp;#8221; which is just a keyword surrounded by square brackets, used as in-band&amp;nbsp;signalling:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;&amp;gt; .\MyApp.exe [suggest]&lt;/span&gt;
&lt;span class="go"&gt;--animal&lt;/span&gt;
&lt;span class="go"&gt;--emotion&lt;/span&gt;
&lt;span class="go"&gt;--help&lt;/span&gt;
&lt;span class="go"&gt;--version&lt;/span&gt;
&lt;span class="go"&gt;-?&lt;/span&gt;
&lt;span class="go"&gt;-h&lt;/span&gt;
&lt;span class="go"&gt;/?&lt;/span&gt;
&lt;span class="go"&gt;/h&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We sent the &lt;tt class="docutils literal"&gt;[suggest]&lt;/tt&gt; directive, and our application returned the list of supported command line parameters. This is why we needed to implement our program as a callback function, so System.CommandLine could &amp;#8220;own&amp;#8221; the pipeline, and insert its own&amp;nbsp;middleware.&lt;/p&gt;
&lt;p&gt;We can also test completing substrings. Here, we&amp;#8217;ll ask for completions of the string &amp;#8220;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--&lt;/span&gt;&lt;/tt&gt;&amp;#8221; when our caret position is at index&amp;nbsp;2:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;&amp;gt; .\MyApp.exe [suggest:2] &amp;quot;--&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;--animal&lt;/span&gt;
&lt;span class="go"&gt;--emotion&lt;/span&gt;
&lt;span class="go"&gt;--help&lt;/span&gt;
&lt;span class="go"&gt;--version&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Asking for option values works the same way; here we typed &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--animal&lt;/span&gt;&lt;/tt&gt; and the only completion that makes sense would be the required type of&amp;nbsp;animal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;&amp;gt; .\MyApp.exe [suggest:9] &amp;quot;--animal &amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;Cat&lt;/span&gt;
&lt;span class="go"&gt;Dog&lt;/span&gt;
&lt;span class="go"&gt;Velociraptor&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, that about sums up how dotnet-suggest works. We register our application (or it&amp;#8217;s auto registered), dotnet-suggest queries our application for available completions, and then uses our shell&amp;#8217;s tab completion facility to supply these when we&amp;#8217;re&amp;nbsp;typing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-fun-use-of-dotnet-suggest-in-c-repl"&gt;
&lt;h2&gt;A fun use of dotnet-suggest in C# &lt;span class="caps"&gt;REPL&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;The fact that dotnet-suggest will query our application for each tab completion request is pretty cool; it unlocks some interesting&amp;nbsp;possibilities.&lt;/p&gt;
&lt;p&gt;One neat usage in C# &lt;span class="caps"&gt;REPL&lt;/span&gt; is for the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--using&lt;/span&gt;&lt;/tt&gt; command line parameter. This parameter allows you to supply one or more C# namespaces to be included on startup of the &lt;span class="caps"&gt;REPL&lt;/span&gt;. For example, you might want to start the &lt;span class="caps"&gt;REPL&lt;/span&gt; with both &lt;tt class="docutils literal"&gt;System.Collections.Immutable&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;System.&lt;span class="caps"&gt;IO&lt;/span&gt;.Pipes&lt;/tt&gt;. Since we can define a delegate to supply suggestions, we can easily allow tab completion of .&lt;span class="caps"&gt;NET&lt;/span&gt; namespaces from the command&amp;nbsp;line!&lt;/p&gt;
&lt;video controls style="width:100%; border-radius: 4px;"&gt;
    &lt;source src="/img/dotnet-suggest/csharprepl-completions.mp4" type="video/mp4"&gt;
    Sorry, the current browser doesn&amp;#8217;t support embedded &lt;span class="caps"&gt;MP4&lt;/span&gt; videos.
&lt;/video&gt;&lt;p&gt;Another place I found it useful was for the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--framework&lt;/span&gt;&lt;/tt&gt; command line option; this parameter needs to be a &lt;a class="reference external" href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/metapackage-app?view=aspnetcore-5.0"&gt;.&lt;span class="caps"&gt;NET&lt;/span&gt; Shared Framework&lt;/a&gt; that is installed on the local computer. Rather than making the user go figure out what shared frameworks are locally installed, C# &lt;span class="caps"&gt;REPL&lt;/span&gt; can simply query on behalf of the user, and allow them to be easily&amp;nbsp;tab-completed.&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="csharp"></category><category term="dotnet"></category><category term="cli"></category><category term="csharprepl"></category></entry><entry><title>Analyzing Code Quality with LINQ and NDepend</title><link href="https://fuqua.io/blog/2021/08/analyzing-code-quality-with-linq-and-ndepend/" rel="alternate"></link><published>2021-08-30T00:00:00+07:00</published><updated>2021-08-30T00:00:00+07:00</updated><author><name>Will Fuqua</name></author><id>tag:fuqua.io,2021-08-30:/blog/2021/08/analyzing-code-quality-with-linq-and-ndepend/</id><summary type="html">&lt;p&gt;I&amp;#8217;ve been building an open-source personal project (&lt;a class="reference external" href="https://github.com/waf/CSharpRepl"&gt;C# &lt;span class="caps"&gt;REPL&lt;/span&gt;&lt;/a&gt;) and spending a good chunk of time on code quality. I self-impose a zero-warning policy, use nullable reference types, track unit test coverage,&amp;nbsp;etc.&lt;/p&gt;
&lt;p&gt;After ensuring all the Visual Studio / Roslyn code analyzer warnings were fixed, I thought I&amp;#8217;d …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;ve been building an open-source personal project (&lt;a class="reference external" href="https://github.com/waf/CSharpRepl"&gt;C# &lt;span class="caps"&gt;REPL&lt;/span&gt;&lt;/a&gt;) and spending a good chunk of time on code quality. I self-impose a zero-warning policy, use nullable reference types, track unit test coverage,&amp;nbsp;etc.&lt;/p&gt;
&lt;p&gt;After ensuring all the Visual Studio / Roslyn code analyzer warnings were fixed, I thought I&amp;#8217;d try out NDepend to get a second opinion, and also understand its capabilities. After downloading &lt;a class="reference external" href="https://www.ndepend.com/download"&gt;a free trial of NDepend&lt;/a&gt; and spending some time with it, I was pretty impressed with its technical underpinnings as they&amp;#8217;re exposed to the end user. Spoilers: &lt;em&gt;It&amp;#8217;s &lt;span class="caps"&gt;LINQ&lt;/span&gt; all the way down&lt;/em&gt;.&lt;/p&gt;
&lt;div class="section" id="static-analysis-with-linq"&gt;
&lt;h2&gt;Static Analysis with &lt;span class="caps"&gt;LINQ&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Out of the box, there&amp;#8217;s a large collection of static analysis rules; they&amp;#8217;re mostly focused on finding software design flaws. For example, it includes a rule that warns against assigning a field from too many methods; it&amp;#8217;s a sign that there&amp;#8217;s some bug-prone mutation, and a better design could be&amp;nbsp;possible:&lt;/p&gt;
&lt;img alt="A rule UI that says not to assign a field from many methods. It's a symptom of bug-prone code." class="align-center" src="/img/ndepend/1-too-many-methods.png" style="width: 90%;" /&gt;
&lt;p&gt;This screen may look like a typical static analysis rule, but there&amp;#8217;s more going on under-the-hood. If we click the &lt;cite&gt;View Source Code&lt;/cite&gt; button, we&amp;#8217;ll see the following, editable rule&amp;nbsp;code:&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;a class="reference external image-reference" href="https://www.ndepend.com/default-rules/NDepend-Rules-Explorer.html?ruleid=ND1906"&gt;&lt;img alt="A LINQ statement. warnif count &amp;gt; 0 from f in JustMyCode.Fields where !f.IsEnumValue &amp;amp;&amp;amp; !f.IsImmutable &amp;amp;&amp;amp; !f.IsInitOnly &amp;amp;&amp;amp; !f.IsGeneratedByCompiler &amp;amp;&amp;amp; !f.IsEventDelegateObject let methodsAssigningMe = f.MethodsAssigningMe.Where(m =&amp;gt; !m.IsConstructor) where methodsAssigningMe.Count() &amp;gt;= (!f.IsStatic ? 4 : 2) select new { f, methodsAssigningMe, f.MethodsReadingMeButNotAssigningMe, f.MethodsUsingMe, Debt = (4+(f.IsStatic ? 10 : 5)).ToMinutes().ToDebt(), Severity = Severity.High}" src="/img/ndepend/2-too-many-methods-linq.png" style="width: 90%;" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;small class="align-center" style="display:block;color:#888"&gt;&lt;a href="https://www.ndepend.com/default-rules/NDepend-Rules-Explorer.html?ruleid=ND1906"&gt;Rule &lt;span class="caps"&gt;ND1906&lt;/span&gt;&lt;/a&gt; – click to view the full rule description and code&lt;/small&gt;&lt;p&gt;Hey, that&amp;#8217;s &lt;span class="caps"&gt;LINQ&lt;/span&gt;!&lt;/p&gt;
&lt;p&gt;Technically, it&amp;#8217;s called &lt;a class="reference external" href="https://www.ndepend.com/docs/cqlinq-syntax#Introduction"&gt;CQLinq&lt;/a&gt; (Code Query &lt;span class="caps"&gt;LINQ&lt;/span&gt;), which is &lt;span class="caps"&gt;LINQ&lt;/span&gt; with additional static analysis keywords, and running over an object model that represents a codebase. Conceptually, it&amp;#8217;s similar to Roslyn&amp;#8217;s syntax/semantic model, but with a bunch of nice affordances and predefined properties that make it simpler to do solution-wide static analysis. The CQLinq object model represents an entire&amp;nbsp;application.&lt;/p&gt;
&lt;p&gt;For example, here&amp;#8217;s a predefined calculation for cyclomatic complexity. It runs across all methods in the application using the &lt;tt class="docutils literal"&gt;Application.Methods&lt;/tt&gt; property; there&amp;#8217;s no need to recursively find all files or&amp;nbsp;classes:&lt;/p&gt;
&lt;img alt="from m in Application.Methods where m.CyclomaticComplexity &amp;gt; 20 &amp;amp;&amp;amp; !m.IsAbstract orderby m.CyclomaticComplexity descending select new { m, m.CyclomaticComplexity }" class="align-center" src="/img/ndepend/3-cyclomatic-complexity-query.png" style="width: 90%;" /&gt;
&lt;p&gt;Notice that the rule uses a &lt;tt class="docutils literal"&gt;CyclomaticComplexity&lt;/tt&gt; property that already exists on the method. We can use intellisense to explore other properties in the CQLinq object&amp;nbsp;model:&lt;/p&gt;
&lt;img alt="The CQLinq query editor open, with an intellisense menu showing properties like ReadsMutableObjectState, PercentageCoverage, PercentageComment, ShouldBePublic, and many more." class="align-center" src="/img/ndepend/4-intellisense.png" style="width: 94%;" /&gt;
&lt;/div&gt;
&lt;div class="section" id="analyzing-code-evolution-over-time-with-linq"&gt;
&lt;h2&gt;Analyzing code evolution over time with &lt;span class="caps"&gt;LINQ&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;CQLinq also supports comparing the current version of the code with past versions of the code. Analyzing code once will create a &lt;em&gt;baseline;&lt;/em&gt; future analyses can refer to this baseline with the &lt;tt class="docutils literal"&gt;.OlderVersion()&lt;/tt&gt; helper method. Here&amp;#8217;s how we can identify mutability being introduced as part of a code&amp;nbsp;change:&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://www.ndepend.com/default-rules/NDepend-Rules-Explorer.html?ruleid=ND1108"&gt;&lt;img alt="A CQLinq statement that reads: Avoid transforming an immutable type into a mutable one. warnif count &amp;gt; 0 from t in Application.Types where t.CodeWasChanged() &amp;amp;&amp;amp; t.OlderVersion().IsImmutable &amp;amp;&amp;amp; !t.IsImmutable &amp;amp;&amp;amp; !t.IsStatic let culpritFields = t.InstanceFields.Where(f =&amp;gt; !f.IsImmutable) select new { t, culpritFields, Debt = (10 + 10*culpritFields.Count()).ToMinutes().ToDebt(), Severity = Severity.High }" class="align-center" src="/img/ndepend/5-baseline-mutability-detection.png" style="width: 90%;" /&gt;&lt;/a&gt;
&lt;small class="align-center" style="display:block;color:#888"&gt;&lt;a href="https://www.ndepend.com/default-rules/NDepend-Rules-Explorer.html?ruleid=ND1108"&gt;Rule &lt;span class="caps"&gt;ND1108&lt;/span&gt;&lt;/a&gt; – click to view the full rule description and code&lt;/small&gt;&lt;p&gt;There are a &lt;a class="reference external" href="https://www.ndepend.com/default-rules/NDepend-Rules-Explorer.html?ruleid=ND1105#!"&gt;bunch of prebuilt rules&lt;/a&gt; that take advantage of this baseline-comparison feature. For example, we can define and identify breaking changes in a code change to a library, so we don&amp;#8217;t accidentally break downstream users, and can better manage &lt;abbr title="Semantic Versioning"&gt;semver&lt;/abbr&gt;:&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://www.ndepend.com/default-rules/NDepend-Rules-Explorer.html?ruleid=ND1500"&gt;&lt;img alt="A CQLinq statement that fades out to white. warnif count &amp;gt; 0 from m in codeBase.OlderVersion().Application.Methods where m.IsPubliclyVisible &amp;amp;&amp;amp; ((m.WasRemoved() &amp;amp;&amp;amp; !m.ParentType.WasRemoved() &amp;amp;&amp;amp; !m.IsObsolete) || (!m.WasRemoved() &amp;amp;&amp;amp; !m.NewerVersion().IsPubliclyVisible &amp;amp;&amp;amp; m.ParentType.NewerVersion().IsPubliclyVisible) || (!m.WasRemoved() &amp;amp;&amp;amp; m.ReturnType != null &amp;amp;&amp;amp; m.NewerVersion().ReturnType != null &amp;amp;&amp;amp; m.ReturnType.FullName != m.NewerVersion().ReturnType.FullName))" class="align-center" src="/img/ndepend/6-breaking-changes.png" style="width: 100%;" /&gt;&lt;/a&gt;
&lt;small class="align-center" style="display:block;color:#888"&gt;&lt;a href="https://www.ndepend.com/default-rules/NDepend-Rules-Explorer.html?ruleid=ND1500"&gt;Rule &lt;span class="caps"&gt;ND1500&lt;/span&gt;&lt;/a&gt; – click to view the full rule description and code&lt;/small&gt;&lt;/div&gt;
&lt;div class="section" id="identifying-high-severity-issues-with-linq"&gt;
&lt;h2&gt;Identifying high-severity issues with &lt;span class="caps"&gt;LINQ&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;The CQLinq object model doesn&amp;#8217;t just make our application source code queryable, it also makes static analysis rules and their violations queryable as well. This gets a bit meta; by using the &lt;tt class="docutils literal"&gt;Issues&lt;/tt&gt; object model we can query for violations of rules defined by other &lt;span class="caps"&gt;LINQ&lt;/span&gt;&amp;nbsp;statements:&lt;/p&gt;
&lt;img alt="from issue in Issues where issue.Severity &amp;gt; Severity.Info orderby issue.Severity descending select new { issue, issue.Severity, issue.CodeElement }" class="align-center" src="/img/ndepend/7-issues-query.png" style="width: 90%;" /&gt;
&lt;p&gt;This can be combined with the previous section on code evolution to find new issues, or get an idea of how issues are being introduced or resolved over time. We can use the &lt;tt class="docutils literal"&gt;failif&lt;/tt&gt; CQLinq keyword to set hard limits based on our issues and rules; these are known as &lt;cite&gt;Quality Gates&lt;/cite&gt; and are useful for continuous integration scenarios. The syntax is the same as the &lt;tt class="docutils literal"&gt;warnif&lt;/tt&gt; keyword we saw in the earlier CQLinq&amp;nbsp;rules.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-the-ui-for-parameterized-linq-queries"&gt;
&lt;h2&gt;Using the &lt;span class="caps"&gt;UI&lt;/span&gt; for parameterized &lt;span class="caps"&gt;LINQ&lt;/span&gt;&amp;nbsp;queries&lt;/h2&gt;
&lt;p&gt;So far we&amp;#8217;ve been focused on the code editor, but there&amp;#8217;s also a pretty slick &lt;span class="caps"&gt;UI&lt;/span&gt;; by setting up our &lt;span class="caps"&gt;LINQ&lt;/span&gt; statements to have parameters, we can explore ranges of these parameters in a live-updating, auto-generated &lt;span class="caps"&gt;UI&lt;/span&gt;:&lt;/p&gt;
&lt;img alt="A UI with several form elements, like input fields, dropdown lists, and sliders. Each form element corresponds to a highlighted placeholder in the LINQ query." class="align-center" src="/img/ndepend/8-coupling-queries.png" style="width: 90%;" /&gt;
&lt;p&gt;The NDepend &lt;span class="caps"&gt;UI&lt;/span&gt; has a lot of prebuilt views for understanding, categorizing and prioritizing issues. In addition to the typical column views that we&amp;#8217;ve seen in this post, they also have some more &lt;a class="reference external" href="https://www.ndepend.com/docs/visual-studio-dependency-graph"&gt;advanced graphical dependency views&lt;/a&gt; that are also powered by CQLinq. All the typical static analysis workflows can be done via the &lt;span class="caps"&gt;UI&lt;/span&gt; if you don&amp;#8217;t want to get into the &lt;span class="caps"&gt;LINQ&lt;/span&gt; side of things&amp;#8212;but where&amp;#8217;s the fun in&amp;nbsp;that?&lt;/p&gt;
&lt;p&gt;If the command line is your preferred form of &lt;span class="caps"&gt;UI&lt;/span&gt;, there&amp;#8217;s also a command line runner for all these CQLinq statements, which is also useful for integrating with other&amp;nbsp;software.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;This blog post focused solely on the CQLinq part of NDepend, but there&amp;#8217;s a bunch more &lt;a class="reference external" href="https://www.ndepend.com/default-rules/NDepend-Rules-Explorer.html"&gt;rules&lt;/a&gt;, &lt;a class="reference external" href="https://www.ndepend.com/sample-reports/"&gt;reports&lt;/a&gt;, and &lt;a class="reference external" href="https://www.ndepend.com/features/code-complexity#Diagrams"&gt;data visualizations&lt;/a&gt;&amp;nbsp;available.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve personally always been interested in static analysis tools, programming language syntax trees, and &lt;span class="caps"&gt;LINQ&lt;/span&gt;; so it was great to see NDepend use CQLinq to combine all three into a well-packaged static analysis&amp;nbsp;tool.&lt;/p&gt;
&lt;p&gt;More practically, it helped me identify a good set of fixes for C# &lt;span class="caps"&gt;REPL&lt;/span&gt;. I was able to refactor towards immutability, better structure some confusing namespaces, and improve the general design of the&amp;nbsp;application.&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="csharp"></category><category term="analysis"></category><category term="linq"></category><category term="ndepend"></category></entry><entry><title>Tips for using the Windows Command Line effectively</title><link href="https://fuqua.io/blog/2021/05/tips-for-using-the-windows-command-line-effectively/" rel="alternate"></link><published>2021-05-10T00:00:00+07:00</published><updated>2021-05-10T00:00:00+07:00</updated><author><name>Will Fuqua</name></author><id>tag:fuqua.io,2021-05-10:/blog/2021/05/tips-for-using-the-windows-command-line-effectively/</id><summary type="html">&lt;p&gt;Although the command line experience on Windows has historically been less than stellar, the last few years have seen rapid improvement. In this post, I&amp;#8217;ll cover three main areas of&amp;nbsp;improvement:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The new Windows&amp;nbsp;Terminal&lt;/li&gt;
&lt;li&gt;Running PowerShell&amp;nbsp;Core&lt;/li&gt;
&lt;li&gt;Developing with Windows Subsystem for&amp;nbsp;Linux&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In case you&amp;#8217;re familiar …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Although the command line experience on Windows has historically been less than stellar, the last few years have seen rapid improvement. In this post, I&amp;#8217;ll cover three main areas of&amp;nbsp;improvement:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The new Windows&amp;nbsp;Terminal&lt;/li&gt;
&lt;li&gt;Running PowerShell&amp;nbsp;Core&lt;/li&gt;
&lt;li&gt;Developing with Windows Subsystem for&amp;nbsp;Linux&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In case you&amp;#8217;re familiar with all three of these topics, I&amp;#8217;ll be including some concrete tips in each topic that are real timesavers; hopefully at least one of the tips will be&amp;nbsp;new.&lt;/p&gt;
&lt;div class="section" id="the-new-windows-terminal"&gt;
&lt;h2&gt;The new Windows&amp;nbsp;Terminal&lt;/h2&gt;
&lt;p&gt;Microsoft&amp;#8217;s release of Windows Terminal, a modern, &lt;span class="caps"&gt;GPU&lt;/span&gt;-accelerated and open-source terminal application, is a real game changer. It can be installed and updated &lt;a class="reference external" href="ms-windows-store://pdp/?ProductId=9n0dx20hk701"&gt;from the Microsoft store&lt;/a&gt;, with other methods of installation available &lt;a class="reference external" href="https://github.com/microsoft/terminal"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Windows Terminal supports running various shells in tabs (and side-by-side panes). For example, we can use PowerShell in one tab, &lt;span class="caps"&gt;ZSH&lt;/span&gt; under the Windows Subsystem for Linux in another tab, and to the side, a Command Prompt &lt;span class="strike"&gt;pain&lt;/span&gt;&amp;nbsp;pane.&lt;/p&gt;
&lt;p&gt;Windows Terminal is ultra-configurable, and uses &lt;span class="caps"&gt;JSON&lt;/span&gt; for its configuration store (with a work-in-progress Settings &lt;span class="caps"&gt;UI&lt;/span&gt; layered on top). An example of this configurability is the &lt;tt class="docutils literal"&gt;sendInput&lt;/tt&gt; command, which can send arbitrary keystrokes and escape sequences to the&amp;nbsp;terminal:&lt;/p&gt;
&lt;p&gt;For example, we could bind a frequently used &lt;tt class="docutils literal"&gt;git log&lt;/tt&gt; command to &lt;cite&gt;Ctrl+Alt+L&lt;/cite&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// place this keybinding in the `actions` array&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;action&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sendInput&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;input&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;git log --all --decorate --oneline --graph\r\n&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ctrl+alt+l&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Git, of course, has its own aliasing system, but it&amp;#8217;s nice to have a keyboard shortcut for it, too. I personally also keybind some frequent directory navigation commands, as well as some common compiler / build tool&amp;nbsp;commands.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="running-powershell-core"&gt;
&lt;h2&gt;Running PowerShell&amp;nbsp;Core&lt;/h2&gt;
&lt;p&gt;When most people think of PowerShell, they probably think of the older PowerShell 5, which is the default version of PowerShell installed on Windows. This version of PowerShell is &lt;strong&gt;old&lt;/strong&gt; (the most recent point release was 5.1, in&amp;nbsp;2017).&lt;/p&gt;
&lt;p&gt;PowerShell Core, the cross-platform, open-source alternative, has been around since 2016 and is actively developed. It runs alongside PowerShell 5, instead of replacing it, so there&amp;#8217;s no risk in installing it. It can be installed from the &lt;a class="reference external" href="ms-windows-store://pdp/?ProductId=9mz1snwt0n5d"&gt;Microsoft Store&lt;/a&gt; or &lt;a class="reference external" href="https://github.com/PowerShell/PowerShell"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;PowerShell Core has a lot of nice improvements across the usability of its shell, its programming language, and its performance. It&amp;#8217;s worth upgrading just for the &lt;tt class="docutils literal"&gt;cd -&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;cd +&lt;/tt&gt; features, which navigate back and forward through the working directory&amp;nbsp;history:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;will@home:~$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; projects/death-ray

&lt;span class="gp"&gt;will@home:~/projects/death-ray$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; node_modules

&lt;span class="gp"&gt;will@home:~/projects/death-ray/node_modules$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; -

&lt;span class="gp"&gt;will@home:~/projects/death-ray$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; -

&lt;span class="gp"&gt;will@home:~$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; +

&lt;span class="gp"&gt;will@home:~/projects/death-ray$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="developing-with-windows-subsystem-for-linux"&gt;
&lt;h2&gt;Developing with Windows Subsystem for&amp;nbsp;Linux&lt;/h2&gt;
&lt;p&gt;Now, it might be odd for a &amp;#8220;Windows Command Line&amp;#8221; blog post to recommend installing Linux, but, well, here we are. The Linux / &lt;span class="caps"&gt;BSD&lt;/span&gt; / Mac &lt;span class="caps"&gt;OS&lt;/span&gt; communities have been setting the standard in command line efficiency, and we can get all that goodness on Windows 10,&amp;nbsp;too.&lt;/p&gt;
&lt;p&gt;The Windows Subsystem for Linux 2 (&lt;span class="caps"&gt;WSL2&lt;/span&gt;) provides a real Linux command line inside Windows, with Linux kernel updates shipped via Windows Update (!!!). After &lt;a class="reference external" href="https://docs.microsoft.com/en-us/windows/wsl/install-win10"&gt;installing &lt;span class="caps"&gt;WSL2&lt;/span&gt;&lt;/a&gt;, we can download distros like &lt;a class="reference external" href="ms-windows-store://pdp/?ProductId=9nblggh4msv6"&gt;Ubuntu from the Microsoft Store&lt;/a&gt;. From there, advanced shells like &lt;span class="caps"&gt;ZSH&lt;/span&gt; and Fish are just an &lt;tt class="docutils literal"&gt;apt install&lt;/tt&gt; away!&lt;/p&gt;
&lt;p&gt;While the typical &lt;span class="caps"&gt;GNU&lt;/span&gt;/Linux command line tools, like &lt;tt class="docutils literal"&gt;grep&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;sed&lt;/tt&gt;, are great, we can make our experience even better. When we run the &lt;tt class="docutils literal"&gt;code&lt;/tt&gt; command inside &lt;span class="caps"&gt;WSL2&lt;/span&gt;, it will launch Visual Studio Code on Windows, and set up a client/server bridge to &lt;span class="caps"&gt;WSL2&lt;/span&gt; automatically. This allows us to use the Visual Studio Code front-end on Windows, with all the &lt;span class="caps"&gt;IDE&lt;/span&gt; / editor features it supports, and it will communicate with our &lt;span class="caps"&gt;WSL2&lt;/span&gt; backend to actually execute the&amp;nbsp;program.&lt;/p&gt;
&lt;p&gt;This way, we can use the &lt;span class="caps"&gt;WSL2&lt;/span&gt; command line from Windows Terminal, with our code executing under &lt;span class="caps"&gt;WSL2&lt;/span&gt;, but we get a graphical editing and debugging&amp;nbsp;experience:&lt;/p&gt;
&lt;img alt="" src="/img/windows-terminal-vscode-with-wsl2.png" style="width: 100%;" /&gt;
&lt;p&gt;This is especially useful when doing development in languages where Windows is a bit of a second-class citizen, like on NodeJS or&amp;nbsp;Python.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="enjoy-this-you-can-get-more"&gt;
&lt;h2&gt;Enjoy this? You can get&amp;nbsp;more!&lt;/h2&gt;
&lt;p&gt;You can find all these tips and many more in my new book, &lt;a class="reference external" href="https://packt.live/3gon3St"&gt;Windows Terminal Tips, Tricks, and Productivity Hacks&lt;/a&gt;, which is currently $10 off on Amazon! Thanks for&amp;nbsp;reading.&lt;/p&gt;
&lt;embed&gt;
    &lt;style&gt;
        .strike { text-decoration: line-through; }
        li { margin: 8px 0 8px 0; }
    &lt;/style&gt;
&lt;/embed&gt;&lt;/div&gt;
</content><category term="misc"></category><category term="windows-terminal"></category><category term="powershell"></category><category term="zsh"></category></entry><entry><title>A Lesser-Known C# Feature: Nested Object Initializers</title><link href="https://fuqua.io/blog/2020/12/a-lesser-known-csharp-feature-nested-object-initializers/" rel="alternate"></link><published>2020-12-12T00:00:00+07:00</published><updated>2020-12-12T00:00:00+07:00</updated><author><name>Will Fuqua</name></author><id>tag:fuqua.io,2020-12-12:/blog/2020/12/a-lesser-known-csharp-feature-nested-object-initializers/</id><summary type="html">&lt;p&gt;I&amp;#8217;ve been writing C# for quite some time now, but only recently found out about the &amp;#8220;nested object initializers&amp;#8221; syntax in C#. Nested object initializers elegantly solve problems for which I&amp;#8217;ve previously used workarounds. It&amp;#8217;s not a new feature; it was introduced in C# 3.0, under …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;ve been writing C# for quite some time now, but only recently found out about the &amp;#8220;nested object initializers&amp;#8221; syntax in C#. Nested object initializers elegantly solve problems for which I&amp;#8217;ve previously used workarounds. It&amp;#8217;s not a new feature; it was introduced in C# 3.0, under section 7.5.10.2 of the language&amp;nbsp;specification:&lt;/p&gt;
&lt;blockquote&gt;
An object initializer after the equals sign is a nested object initializer, i.e. an initialization of an embedded object. Instead of assigning a new value to the field or property, the assignments in the nested object initializer are treated as assignments to members of the field or property.&lt;/blockquote&gt;
&lt;p&gt;In case the above specification is not clear, we&amp;#8217;ll work through an example. C# has several types of initializer syntax, among which are object initializers and collection initializers. Nested object initializers could be considered a specialization of&amp;nbsp;both.&lt;/p&gt;
&lt;div class="section" id="reviewing-object-and-collection-initializers"&gt;
&lt;h2&gt;Reviewing Object and Collection&amp;nbsp;Initializers&lt;/h2&gt;
&lt;p&gt;Before diving into nested object initializers, let&amp;#8217;s review object initializers and collection initializers. These initializers provide a convenient syntax for object construction; they technically construct an &amp;#8220;empty&amp;#8221; object and then mutate that object as part of the initialization. Here&amp;#8217;s an example of&amp;nbsp;both:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// given classes defined like this:&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Company&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Ceo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IList&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Employees&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// an object initializer for Company&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;apple&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Company&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// an object initializer for Person&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Ceo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Tim Cook&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// a collection initializer:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Employees&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Joe&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Janet&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;John&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the above example, the object initializer is used to initialize both the &lt;tt class="docutils literal"&gt;Company&lt;/tt&gt; object and the &lt;tt class="docutils literal"&gt;Person&lt;/tt&gt; objects. The collection initializer is used to create a new &lt;tt class="docutils literal"&gt;List&amp;lt;Person&amp;gt;&lt;/tt&gt; and add 3 entries to it. Collection initializers can initialize any object that implements &lt;tt class="docutils literal"&gt;IEnumerable&lt;/tt&gt; and contains an &lt;tt class="docutils literal"&gt;Add&lt;/tt&gt; method (either as part of the type, or as an extension&amp;nbsp;method).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nested-object-initializers"&gt;
&lt;h2&gt;Nested Object&amp;nbsp;Initializers&lt;/h2&gt;
&lt;p&gt;Now, how do nested object initializers tie into this? In the previous code example, we were creating new objects (a new &lt;tt class="docutils literal"&gt;Person&lt;/tt&gt; for the &lt;tt class="docutils literal"&gt;Company.Ceo&lt;/tt&gt; property, and a new &lt;tt class="docutils literal"&gt;List&amp;lt;Person&amp;gt;&lt;/tt&gt; for the &lt;tt class="docutils literal"&gt;Company.Employees&lt;/tt&gt; property). Nested object initializers allow for &lt;strong&gt;mutating default values&lt;/strong&gt; in the&amp;nbsp;class.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s alter our class definition above. We all know that null values are a pain, so we could set default values for each property, and use nested object initializers during object&amp;nbsp;construction:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Company&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Ceo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IList&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Employees&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;apple&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Company&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Ceo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Tim Cook&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Employees&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Joe&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Janet&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;John&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With the nested object initializer syntax, we remove the reference to the constructors for both properties, and it will mutate the existing, default&amp;nbsp;value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="where-is-this-useful"&gt;
&lt;h2&gt;Where is this&amp;nbsp;useful?&lt;/h2&gt;
&lt;p&gt;The nested object initializer implies mutation of existing values, so it shouldn&amp;#8217;t be used everywhere; I prefer immutability where possible. However, there are still a few areas where this could be&amp;nbsp;useful.&lt;/p&gt;
&lt;p&gt;For nested object initializers with collection initializers, this helps resolve a conflict between wanting to use object initializers, and wanting to &lt;a class="reference external" href="https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/guidelines-for-collections#collection-properties-and-return-values"&gt;prefer empty collections over null collections&lt;/a&gt;. This was always a bit of a conflict for&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;For nested object initializers with object initializers, this could help in configuration scenarios, where we want to have some default configuration object. In this case, the nested object initializer could be used to override these default configuration&amp;nbsp;values.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="learning-more"&gt;
&lt;h2&gt;Learning&amp;nbsp;more&lt;/h2&gt;
&lt;p&gt;The best documentation for this seems to be the &lt;a class="reference external" href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/expressions#object-initializers"&gt;C# Language Reference&lt;/a&gt;. There&amp;#8217;s also a &lt;a class="reference external" href="https://github.com/dotnet/docs/issues/12979"&gt;GitHub issue&lt;/a&gt; asking for better documentation on this feature. I personally found the chat rooms available on gitter very helpful for learning more about this feature; special thanks to &lt;a class="reference external" href="https://github.com/HaloFour"&gt;HaloFour&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/Joe4evr"&gt;Joe4evr&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/jnm2"&gt;jnm2&lt;/a&gt; for helping&amp;nbsp;out!&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="csharp"></category><category term="language"></category></entry><entry><title>Microsoft Build 2020 – Highlights for .NET Developers</title><link href="https://fuqua.io/blog/2020/05/microsoft-build-2020-highlights-for-net-developers/" rel="alternate"></link><published>2020-05-22T00:00:00+07:00</published><updated>2020-05-22T00:00:00+07:00</updated><author><name>Will Fuqua</name></author><id>tag:fuqua.io,2020-05-22:/blog/2020/05/microsoft-build-2020-highlights-for-net-developers/</id><summary type="html">&lt;p&gt;Over the course of the last three days, Microsoft Build 2020 released a flood of news and announcements.
For those of us who follow the .&lt;span class="caps"&gt;NET&lt;/span&gt; ecosystem, it can be difficult to wade through them&amp;nbsp;all!&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve collected a list of announcements that I think are interesting as a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Over the course of the last three days, Microsoft Build 2020 released a flood of news and announcements.
For those of us who follow the .&lt;span class="caps"&gt;NET&lt;/span&gt; ecosystem, it can be difficult to wade through them&amp;nbsp;all!&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve collected a list of announcements that I think are interesting as a .&lt;span class="caps"&gt;NET&lt;/span&gt; developer, and added short
summaries. The announcements are grouped into four categories: &lt;span class="caps"&gt;ASP&lt;/span&gt;.&lt;span class="caps"&gt;NET&lt;/span&gt;, .&lt;span class="caps"&gt;NET&lt;/span&gt;, Visual Studio and&amp;nbsp;Windows.&lt;/p&gt;
&lt;p&gt;In addition, each category is split into &amp;#8220;released&amp;#8221; (you can use it now!) or &amp;#8220;preview / announced&amp;#8221;
(you can test it out now, or&amp;nbsp;soon).&lt;/p&gt;
&lt;div class="section" id="asp-net"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;ASP&lt;/span&gt;.&lt;span class="caps"&gt;NET&lt;/span&gt;&lt;/h2&gt;
&lt;div class="section" id="released"&gt;
&lt;h3&gt;Released&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://devblogs.microsoft.com/aspnet/blazor-webassembly-3-2-0-now-available/"&gt;Blazor WebAssembly is released!&lt;/a&gt; - v3.2.0 is an official release &amp;#8211; it&amp;#8217;s not a preview anymore! It&amp;#8217;s considered ready for production use, but is not a Long Term Support&amp;nbsp;release.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://devblogs.microsoft.com/aspnet/introducing-project-tye/"&gt;Project Tye&lt;/a&gt; - a tool for deploying .&lt;span class="caps"&gt;NET&lt;/span&gt; core applications to&amp;nbsp;Kubernetes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="preview-announced"&gt;
&lt;h3&gt;Preview /&amp;nbsp;Announced&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-5-preview-4/"&gt;&lt;span class="caps"&gt;ASP&lt;/span&gt;.&lt;span class="caps"&gt;NET&lt;/span&gt; Core updates in .&lt;span class="caps"&gt;NET&lt;/span&gt; 5 Preview 4&lt;/a&gt; - Improved &lt;span class="caps"&gt;HTTP&lt;/span&gt;/2 performance by adding support for HPack dynamic compression. Smaller docker image sizes by sharing layers between upstream&amp;nbsp;images.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="net"&gt;
&lt;h2&gt;.&lt;span class="caps"&gt;NET&lt;/span&gt;&lt;/h2&gt;
&lt;div class="section" id="preview-announced-1"&gt;
&lt;h3&gt;Preview /&amp;nbsp;Announced&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://devblogs.microsoft.com/dotnet/announcing-net-5-preview-4-and-our-journey-to-one-net/"&gt;.&lt;span class="caps"&gt;NET&lt;/span&gt; 5 Preview 4&lt;/a&gt; - C# 9 and F# 5 previews, source generators for compile-time code generation / introspection. Also some updates on publishing to a single file application. &lt;span class="caps"&gt;ARM&lt;/span&gt; processor support for Web / &lt;span class="caps"&gt;UI&lt;/span&gt;&amp;nbsp;applications.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://devblogs.microsoft.com/dotnet/welcome-to-c-9-0/"&gt;C# 9 Preview&lt;/a&gt; - A lot of new functional features. This is just a preview &amp;#8211; features listed in this article might not make it into the final release, or might have different syntax after all the design issues have been figured out. But it&amp;#8217;s still exciting to see C# embrace&amp;nbsp;immutability!&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://devblogs.microsoft.com/dotnet/f-5-update-for-net-5-preview-4/"&gt;F# 5 Preview&lt;/a&gt; - Better tooling, faster compiling, interoperability with C#&amp;#8217;s new &amp;#8220;default interface member&amp;#8221;&amp;nbsp;feature.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://devblogs.microsoft.com/dotnet/introducing-net-multi-platform-app-ui/"&gt;As part of .&lt;span class="caps"&gt;NET&lt;/span&gt; 5, Xamarin.Forms library is now called &lt;span class="caps"&gt;MAUI&lt;/span&gt;&lt;/a&gt; - My guess is everyone will continue to call it Xamarin.Forms. This article also mentions that Xamarin.iOS and Xamarin.Android will be integrated into .&lt;span class="caps"&gt;NET&lt;/span&gt;&amp;nbsp;6.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://devblogs.microsoft.com/dotnet/introducing-yarp-preview-1/"&gt;&lt;span class="caps"&gt;YARP&lt;/span&gt; Reverse Proxy Preview&lt;/a&gt; - High performance reverse proxy server. Think of it like an application load balancer / rewrite rules engine built as &lt;span class="caps"&gt;ASP&lt;/span&gt;.&lt;span class="caps"&gt;NET&lt;/span&gt; Core&amp;nbsp;middleware.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/microsoft/ProjectReunion"&gt;Project Reunion&lt;/a&gt; - A polyfill library so you can use the same libraries (WinUI 3, WebView2, &lt;span class="caps"&gt;MSIX&lt;/span&gt;) on both WinForms and &lt;span class="caps"&gt;UWP&lt;/span&gt;&amp;nbsp;platforms.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="visual-studio"&gt;
&lt;h2&gt;Visual&amp;nbsp;Studio&lt;/h2&gt;
&lt;div class="section" id="released-1"&gt;
&lt;h3&gt;Released&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://devblogs.microsoft.com/visualstudio/visual-studio-2019-v16-6-and-v16-7-preview-1-ship-today/"&gt;&lt;span class="caps"&gt;VS2019&lt;/span&gt; 16.6 released, with 16.7 in preview&lt;/a&gt; - &lt;span class="caps"&gt;VS2019&lt;/span&gt; 16.6 contains a new &amp;#8220;.&lt;span class="caps"&gt;NET&lt;/span&gt; Async Tool&amp;#8221; for debugging applications. Better snapshot debugging and refactorings. Has a new &amp;#8220;Web Tools for Azure&amp;#8221; tool, as well as new C++ 20 standard library&amp;nbsp;features.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://devblogs.microsoft.com/dotnet/windows-forms-designer-for-net-core-released/"&gt;Windows Forms Designer for .&lt;span class="caps"&gt;NET&lt;/span&gt; Core&lt;/a&gt; - The WinForms designer now works with .&lt;span class="caps"&gt;NET&lt;/span&gt; Core WinForms&amp;nbsp;applications.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://devblogs.microsoft.com/dotnet/ml-net-model-builder-is-now-a-part-of-visual-studio/"&gt;&lt;span class="caps"&gt;ML&lt;/span&gt;.&lt;span class="caps"&gt;NET&lt;/span&gt; Model Builder in Visual Studio&lt;/a&gt; - The existing &lt;span class="caps"&gt;ML&lt;/span&gt;.&lt;span class="caps"&gt;NET&lt;/span&gt; Model Builder extension (which is super cool) is now integrated into Visual Studio. Add &amp;#8220;Machine Learning&amp;#8221; with just two clicks! &amp;#8230;plus years of&amp;nbsp;study.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="preview-announced-2"&gt;
&lt;h3&gt;Preview /&amp;nbsp;Announced&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://devblogs.microsoft.com/visualstudio/expanding-visual-studio-2019-support-for-visual-studio-codespaces/"&gt;Visual Studio 2019 can be used with Codespaces&lt;/a&gt; - Visual Studio Online is renamed to Visual Studio Codespaces. Visual Studio 2019 can now serve as a &amp;#8220;client ui&amp;#8221; to a codespace in the&amp;nbsp;cloud.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://devblogs.microsoft.com/dotnet/using-visual-studio-codespaces-with-net-core/"&gt;How to use .&lt;span class="caps"&gt;NET&lt;/span&gt; Core with Visual Studio Codespaces&lt;/a&gt; - A tour of the editing / testing / debugging experience of .&lt;span class="caps"&gt;NET&lt;/span&gt; Core with Visual Studio &lt;span class="strike"&gt;Online&lt;/span&gt;&amp;nbsp;Codespaces.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="windows"&gt;
&lt;h2&gt;Windows&lt;/h2&gt;
&lt;div class="section" id="released-2"&gt;
&lt;h3&gt;Released&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://devblogs.microsoft.com/commandline/windows-terminal-1-0/"&gt;The new Windows Terminal hit 1.0&lt;/a&gt; - Supports tabs and split panes. &lt;span class="caps"&gt;GPU&lt;/span&gt; accelerated rendering will display your compile errors blazing&amp;nbsp;fast.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="preview-announced-3"&gt;
&lt;h3&gt;Preview /&amp;nbsp;Announced&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://devblogs.microsoft.com/commandline/windows-package-manager-preview/"&gt;winget - a new windows package manager&lt;/a&gt; - Windows command line package manager like chocolately. As far as I can tell, it does not manage dependencies or updates&amp;nbsp;(yet?).&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://devblogs.microsoft.com/commandline/the-windows-subsystem-for-linux-build-2020-summary/"&gt;Windows Subsystem For Linux (&lt;span class="caps"&gt;WSL&lt;/span&gt;) 2&lt;/a&gt; - &lt;span class="caps"&gt;WSL2&lt;/span&gt; will ship later this month in the Windows 10 May 2020 Update. Docker Desktop for Windows will replatform onto &lt;span class="caps"&gt;WSL2&lt;/span&gt;. &lt;span class="caps"&gt;GPU&lt;/span&gt; support for &lt;span class="caps"&gt;GPU&lt;/span&gt; processing (think &lt;span class="caps"&gt;CUDA&lt;/span&gt;, not intended for games). Linux &lt;span class="caps"&gt;GUI&lt;/span&gt; app support via&amp;nbsp;wayland.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Whew! Even for a short summary, that still ended up being long. It&amp;#8217;s been an exciting few days for the .&lt;span class="caps"&gt;NET&lt;/span&gt; ecosystem, and .&lt;span class="caps"&gt;NET&lt;/span&gt; 5 promises to keep that excitement&amp;nbsp;alive.&lt;/p&gt;
&lt;embed&gt;
    &lt;style&gt;
        .strike { text-decoration: line-through; }
        li { margin: 8px 0 8px 0; }
    &lt;/style&gt;
&lt;/embed&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="dotnet"></category><category term="csharp"></category><category term="presentation"></category></entry><entry><title>Native Websockets with Blazor WebAssembly</title><link href="https://fuqua.io/blog/2020/02/native-websockets-with-blazor-webassembly/" rel="alternate"></link><published>2020-02-01T00:00:00+07:00</published><updated>2020-02-01T00:00:00+07:00</updated><author><name>Will Fuqua</name></author><id>tag:fuqua.io,2020-02-01:/blog/2020/02/native-websockets-with-blazor-webassembly/</id><summary type="html">&lt;p&gt;A couple of days ago, Blazor WebAssembly 3.2.0 Preview 1 was released (&lt;a class="reference external" href="https://devblogs.microsoft.com/aspnet/blazor-webassembly-3-2-0-preview-1-release-now-available/"&gt;announcement&lt;/a&gt;). I&amp;#8217;m personally excited about this release
because it&amp;#8217;s the first Blazor release that contains native support for client-side&amp;nbsp;websockets!&lt;/p&gt;
&lt;p&gt;Previously, if you wanted to use websockets, you either had to write your own …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A couple of days ago, Blazor WebAssembly 3.2.0 Preview 1 was released (&lt;a class="reference external" href="https://devblogs.microsoft.com/aspnet/blazor-webassembly-3-2-0-preview-1-release-now-available/"&gt;announcement&lt;/a&gt;). I&amp;#8217;m personally excited about this release
because it&amp;#8217;s the first Blazor release that contains native support for client-side&amp;nbsp;websockets!&lt;/p&gt;
&lt;p&gt;Previously, if you wanted to use websockets, you either had to write your own wrapper, or use a larger library like
SignalR that did the wrapping for you. However, if you just wanted to use the normal &lt;tt class="docutils literal"&gt;System.Net.WebSockets.ClientWebSocket&lt;/tt&gt; class that&amp;#8217;s built into .&lt;span class="caps"&gt;NET&lt;/span&gt;, you could&amp;nbsp;not.&lt;/p&gt;
&lt;p&gt;The Mono/&lt;span class="caps"&gt;WASM&lt;/span&gt; project has actually supported &lt;tt class="docutils literal"&gt;ClientWebSocket&lt;/tt&gt; for about a year (&lt;a class="reference external" href="https://github.com/mono/mono/pull/12615"&gt;&lt;span class="caps"&gt;PR&lt;/span&gt; 12615&lt;/a&gt;). However, some recent changes in Blazor allowed the Blazor project to be able to consume them (&lt;a class="reference external" href="https://github.com/dotnet/aspnetcore/issues/10489"&gt;&lt;span class="caps"&gt;PR&lt;/span&gt; 10489&lt;/a&gt;).
The ClientWebSocket implementation is ultimately just &lt;a class="reference external" href="https://github.com/mono/mono/blob/a2d1aec5d2c01483738dfa6e69202462bca68e2b/sdks/wasm/framework/src/WebAssembly.Net.WebSockets/ClientWebSocket.cs"&gt;wrapping the &lt;span class="caps"&gt;JS&lt;/span&gt; interop&lt;/a&gt; for you, but this greatly simplifies your code and removes third-party libraries from your&amp;nbsp;project.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s an example class that uses a ClientWebSocket in a Blazor chat client of mine, all bundled up neatly into the new &lt;tt class="docutils literal"&gt;IAsyncEnumerable&lt;/tt&gt; feature of&amp;nbsp;C#8:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;ChatClientConnection&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;readonly&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ClientWebSocket&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;readonly&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;websocketUrl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;ChatClientConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ClientWebSocket&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;websocketUrl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;websocketUrl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;websocketUrl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;/// Connect to the websocket and begin yielding messages&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;/// received from the connection.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IAsyncEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ConnectAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="na"&gt;[EnumeratorCancellation]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CancellationToken&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cancellationToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;websocketUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cancellationToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ArraySegment&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2048&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;cancellationToken&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsCancellationRequested&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;WebSocketReceiveResult&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MemoryStream&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReceiveAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cancellationToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EndOfMessage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Seek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SeekOrigin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Begin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Encoding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UTF8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToArray&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MessageType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;WebSocketMessageType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;/// Send a message on the websocket.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;/// This method assumes you&amp;#39;ve already connected via ConnectAsync&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;SendStringAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CancellationToken&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cancellation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;encoded&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Encoding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UTF8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetBytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ArraySegment&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;encoded&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;encoded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SendAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;WebSocketMessageType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;endOfMessage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cancellation&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What I love about this is it&amp;#8217;s just normal .&lt;span class="caps"&gt;NET&lt;/span&gt; code &amp;#8211; no third-party libraries at all, and it just works flawlessly when compiled to WebAssembly. Happy&amp;nbsp;WASMing!&lt;/p&gt;
</content><category term="misc"></category><category term="dotnet"></category><category term="web"></category><category term="blazor"></category><category term="wasm"></category><category term="csharp"></category><category term="websockets"></category></entry><entry><title>.NET Conf Thailand 2019</title><link href="https://fuqua.io/blog/2019/11/net-conf-thailand-2019/" rel="alternate"></link><published>2019-11-02T00:00:00+07:00</published><updated>2019-11-02T00:00:00+07:00</updated><author><name>Will Fuqua</name></author><id>tag:fuqua.io,2019-11-02:/blog/2019/11/net-conf-thailand-2019/</id><summary type="html">&lt;p&gt;.&lt;span class="caps"&gt;NET&lt;/span&gt; Conf Thailand 2019 was a huge success, thanks again to &lt;a class="reference external" href="https://twitter.com/kidchenko"&gt;Jose Barbosa&lt;/a&gt; and &lt;a class="reference external" href="https://www.facebook.com/codesanookpage"&gt;Theeranit (Aaron) Pongtongmuang&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I was invited to speak, and I covered the new features in C# 8.0. There are a&amp;nbsp;ton!&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Nullable Reference&amp;nbsp;Types&lt;/li&gt;
&lt;li&gt;Async&amp;nbsp;Enumerables&lt;/li&gt;
&lt;li&gt;Recursive&amp;nbsp;Patterns&lt;/li&gt;
&lt;li&gt;Indices and&amp;nbsp;Ranges&lt;/li&gt;
&lt;li&gt;Default Interface&amp;nbsp;Members&lt;/li&gt;
&lt;li&gt;Static …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;.&lt;span class="caps"&gt;NET&lt;/span&gt; Conf Thailand 2019 was a huge success, thanks again to &lt;a class="reference external" href="https://twitter.com/kidchenko"&gt;Jose Barbosa&lt;/a&gt; and &lt;a class="reference external" href="https://www.facebook.com/codesanookpage"&gt;Theeranit (Aaron) Pongtongmuang&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I was invited to speak, and I covered the new features in C# 8.0. There are a&amp;nbsp;ton!&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Nullable Reference&amp;nbsp;Types&lt;/li&gt;
&lt;li&gt;Async&amp;nbsp;Enumerables&lt;/li&gt;
&lt;li&gt;Recursive&amp;nbsp;Patterns&lt;/li&gt;
&lt;li&gt;Indices and&amp;nbsp;Ranges&lt;/li&gt;
&lt;li&gt;Default Interface&amp;nbsp;Members&lt;/li&gt;
&lt;li&gt;Static Local&amp;nbsp;Functions&lt;/li&gt;
&lt;li&gt;Null Coallescing&amp;nbsp;Assignment&lt;/li&gt;
&lt;li&gt;Readonly&amp;nbsp;Members&lt;/li&gt;
&lt;li&gt;Using&amp;nbsp;Statements&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I have my presentation slides and code available &lt;a class="reference external" href="https://github.com/waf/DotNetConfThailand.2019.CSharp8"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can see my talk on &lt;a class="reference external" href="https://www.facebook.com/dotnetconf/videos/487578191836482/"&gt;the dotnetconf page&lt;/a&gt;, however the audio volume is too soft to hear. Oh well! You can get
similar content by watching Mads Torgersen&amp;#8217;s talk (&lt;a class="reference external" href="https://channel9.msdn.com/Events/dotnetConf/NET-Conf-2019/Whats-new-in-C-8-Part-1"&gt;Part 1&lt;/a&gt;) and Bill Wagner&amp;#8217;s talk (&lt;a class="reference external" href="https://channel9.msdn.com/Events/dotnetConf/NET-Conf-2019/B103"&gt;Part 2&lt;/a&gt;).&lt;/p&gt;
</content><category term="misc"></category><category term="dotnet"></category><category term="csharp"></category><category term="presentation"></category></entry><entry><title>Troubleshooting Assembly Binding Issues in .NET</title><link href="https://fuqua.io/blog/2019/03/troubleshooting-assembly-binding-issues-in-net/" rel="alternate"></link><published>2019-03-16T00:00:00+07:00</published><updated>2019-03-16T00:00:00+07:00</updated><author><name>Will Fuqua</name></author><id>tag:fuqua.io,2019-03-16:/blog/2019/03/troubleshooting-assembly-binding-issues-in-net/</id><summary type="html">&lt;p&gt;If you&amp;#8217;ve developed .&lt;span class="caps"&gt;NET&lt;/span&gt; for any length of time, chances are you&amp;#8217;ve run into a gnarly error like&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;System.&lt;span class="caps"&gt;IO&lt;/span&gt;.FileLoadException: Could not load file or assembly &amp;#8216;AcmeCorp.Foobar.Utilities, Version=1.2.0, Culture=neutral, PublicKeyToken=367d582291c765f7&amp;#8217; or one of its dependencies.
The located assembly&amp;#8217;s …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you&amp;#8217;ve developed .&lt;span class="caps"&gt;NET&lt;/span&gt; for any length of time, chances are you&amp;#8217;ve run into a gnarly error like&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;System.&lt;span class="caps"&gt;IO&lt;/span&gt;.FileLoadException: Could not load file or assembly &amp;#8216;AcmeCorp.Foobar.Utilities, Version=1.2.0, Culture=neutral, PublicKeyToken=367d582291c765f7&amp;#8217; or one of its dependencies.
The located assembly&amp;#8217;s manifest definition does not match the assembly&amp;nbsp;reference.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a pretty puzzling error. It means that it &lt;strong&gt;found&lt;/strong&gt; version 1.2.0 of a &lt;span class="caps"&gt;DLL&lt;/span&gt;, but did not use it because a different version was requested (e.g.&amp;nbsp;1.3.0).&lt;/p&gt;
&lt;p&gt;There are a couple of gotchas when troubleshooting these types of&amp;nbsp;errors.&lt;/p&gt;
&lt;div class="section" id="ensure-you-don-t-have-any-version-mismatches"&gt;
&lt;h2&gt;Ensure you don&amp;#8217;t have any version&amp;nbsp;mismatches&lt;/h2&gt;
&lt;p&gt;As a first step, ensure that all projects in your solution reference the same version of the problematic &lt;span class="caps"&gt;DLL&lt;/span&gt; or NuGet package. This is by far the easiest fix. For NuGet packages in Visual Studio, you can right-click your Solution, choose &amp;#8220;Manage NuGet Packages for Solution&amp;#8221; and use the &amp;#8220;Consolidate&amp;#8221; tab to fix the&amp;nbsp;issue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-fusion-logs-to-better-understand-the-problem"&gt;
&lt;h2&gt;Use Fusion Logs to better understand the&amp;nbsp;problem&lt;/h2&gt;
&lt;p&gt;.&lt;span class="caps"&gt;NET&lt;/span&gt; will log more details about the problem to the &amp;#8220;Fusion Logs&amp;#8221; system. By default, it&amp;#8217;s disabled. Enable it by opening your &amp;#8220;Developer Command Prompt for Visual Studio&amp;#8221; from the start menu &lt;strong&gt;as administrator&lt;/strong&gt;. Type the command &lt;tt class="docutils literal"&gt;fuslogvw&lt;/tt&gt; to start the &amp;#8220;Fusion Log&amp;nbsp;Viewer.&amp;#8221;&lt;/p&gt;
&lt;img alt="" class="align-center" src="/img/fuslogvw.png" style="width: 80%;" /&gt;
&lt;p&gt;Click the settings button, choose &amp;#8220;Log bind failures to disk&amp;#8221; and then click &lt;span class="caps"&gt;OK&lt;/span&gt;. Start your application again and you should see more details about the bind failures show up in the Fusion Log&amp;nbsp;Viewer.&lt;/p&gt;
&lt;p&gt;If you don&amp;#8217;t see any log entries show up, there are a few things you can&amp;nbsp;try:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;First try restarting your application and, if you&amp;#8217;re developing a web application, restarting your App&amp;nbsp;Pool.&lt;/li&gt;
&lt;li&gt;The Fusion Log Viewer surprisingly uses the Internet Explorer cache, so you can try clearing the cache by going to &amp;#8220;Internet Options → Browsing History → Delete&amp;#8221; and deleting the Temporary Internet Files option. Weird but&amp;nbsp;true!&lt;/li&gt;
&lt;li&gt;If you&amp;#8217;re using &lt;span class="caps"&gt;ASP&lt;/span&gt;.&lt;span class="caps"&gt;NET&lt;/span&gt;, you&amp;#8217;ll see additional error information on your &lt;span class="caps"&gt;ASP&lt;/span&gt;.&lt;span class="caps"&gt;NET&lt;/span&gt; error page simply by having Fusion Logs&amp;nbsp;enabled.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Don&amp;#8217;t forget to disable Fusion Logs when you&amp;#8217;re done! There&amp;#8217;s a performance impact for having it&amp;nbsp;enabled.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create-an-assembly-binding-redirect"&gt;
&lt;h2&gt;Create an Assembly Binding&amp;nbsp;Redirect&lt;/h2&gt;
&lt;p&gt;Finally, you can add an &lt;a class="reference external" href="https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/redirect-assembly-versions"&gt;Assembly Binding Redirect&lt;/a&gt; to your App.config or Web.config of your entry project by using the &lt;a class="reference external" href="https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/runtime/bindingredirect-element"&gt;bindingRedirect&lt;/a&gt; element. This only works if there are no breaking changes between the two different versions of the &lt;span class="caps"&gt;DLL&lt;/span&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;&amp;lt;!-- the following should be placed under the hierarchy &amp;lt;configuration&amp;gt;&amp;lt;runtime&amp;gt;&amp;lt;assemblyBinding&amp;gt; --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;dependentAssembly&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;assemblyIdentity&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;AcmeCorp.Foobar.Utilities&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;publicKeyToken=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;367d582291c765f7&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;culture=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;neutral&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;bindingRedirect&lt;/span&gt; &lt;span class="na"&gt;oldVersion=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0.0.0.0-1.3.0.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;newVersion=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1.3.0.0&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependentAssembly&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above configuration states &amp;#8220;If you find an AcmeCorp.Foobar.Utilities.dll with a version between 0.0.0.0 and 1.3.0.0, redirect it to&amp;nbsp;1.3.0.0.&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;publicKeyToken&lt;/strong&gt; can be retrieved using the &lt;tt class="docutils literal"&gt;sn&lt;/tt&gt; utility. From your Developer Command Prompt, &lt;tt class="docutils literal"&gt;cd&lt;/tt&gt; to the location of your &lt;span class="caps"&gt;DLL&lt;/span&gt;, and run &lt;tt class="docutils literal"&gt;sn &lt;span class="pre"&gt;-T&lt;/span&gt; YourDll.dll&lt;/tt&gt;. It will display the public key&amp;nbsp;token.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;oldVersion / newVersion&lt;/strong&gt; can be confusing. There are many different types of versions that a &lt;span class="caps"&gt;DLL&lt;/span&gt; can have. What we care about is version in the assembly manifest. From your Developer Command Prompt, &lt;tt class="docutils literal"&gt;cd&lt;/tt&gt; to the location of your &lt;span class="caps"&gt;DLL&lt;/span&gt; and run &lt;tt class="docutils literal"&gt;ildasm YourDll.dll&lt;/tt&gt;. &lt;span class="caps"&gt;ILDASM&lt;/span&gt; will open your assembly. Click on the &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;MANIFEST&lt;/span&gt;&lt;/tt&gt; node, and you&amp;#8217;ll see a version like &lt;tt class="docutils literal"&gt;.ver 1:3:0:0&lt;/tt&gt; which would correspond to version &lt;tt class="docutils literal"&gt;1.3.0.0&lt;/tt&gt; in your&amp;nbsp;App/Web.config.&lt;/p&gt;
&lt;p&gt;These are all the tricks I&amp;#8217;ve learned to troubleshooting various assembly binding issues. Ideally you can have consistent versions of each &lt;span class="caps"&gt;DLL&lt;/span&gt; in your application, but hey, the world is a complex&amp;nbsp;place!&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="dotnet"></category><category term="csharp"></category></entry><entry><title>A Caching HTTP Proxy using Titanium Web Proxy</title><link href="https://fuqua.io/blog/2019/01/a-caching-http-proxy-using-titanium-web-proxy/" rel="alternate"></link><published>2019-01-19T00:00:00+07:00</published><updated>2019-01-19T00:00:00+07:00</updated><author><name>Will Fuqua</name></author><id>tag:fuqua.io,2019-01-19:/blog/2019/01/a-caching-http-proxy-using-titanium-web-proxy/</id><summary type="html">&lt;p&gt;At my work at Jetabroad I do a lot of integration with third-party webservices (like everyone these days).
The webservices, especially the test endpoints, are of variable stability and&amp;nbsp;responsiveness.&lt;/p&gt;
&lt;p&gt;The responsiveness issue can be maddening when you&amp;#8217;re trying to iterate quickly. I prefer doing
the bulk of my …&lt;/p&gt;</summary><content type="html">&lt;p&gt;At my work at Jetabroad I do a lot of integration with third-party webservices (like everyone these days).
The webservices, especially the test endpoints, are of variable stability and&amp;nbsp;responsiveness.&lt;/p&gt;
&lt;p&gt;The responsiveness issue can be maddening when you&amp;#8217;re trying to iterate quickly. I prefer doing
the bulk of my development via unit tests or integration tests to isolate myself as much as possible.
However, I still ultimately find myself developing directly against these third-party services from
time to&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;I built &lt;a class="reference external" href="https://github.com/waf/catchy"&gt;Catchy&lt;/a&gt; to help solve this pain. When you start it, you provide a whitelist of domains to
intercept. Catchy will examine your outbound &lt;span class="caps"&gt;REST&lt;/span&gt; or &lt;span class="caps"&gt;SOAP&lt;/span&gt; requests to those domains, and then
cache the inbound response based on the hash of the outbound&amp;nbsp;request.&lt;/p&gt;
&lt;img alt="" class="align-center" src="https://raw.githubusercontent.com/waf/catchy/master/demo.gif" style="width: 80%;" /&gt;
&lt;div class="section" id="titanium-web-proxy-an-amazing-library"&gt;
&lt;h2&gt;Titanium Web Proxy &amp;#8211; an amazing&amp;nbsp;library&lt;/h2&gt;
&lt;p&gt;Early prototypes were originally built on top of Fiddler Core, but after Fiddler Core was killed by
Telerik, I transitioned it over to the excellent &lt;a class="reference external" href="https://github.com/justcoding121/Titanium-Web-Proxy"&gt;Titanium Web Proxy&lt;/a&gt; project. It makes intercepting
and analyzing requests, even over &lt;span class="caps"&gt;TLS&lt;/span&gt;, very&amp;nbsp;straightforward.&lt;/p&gt;
&lt;p&gt;The proxy code itself is straightforward. The following snippet of Titanium Web Proxy code allows
you to intercept &lt;span class="caps"&gt;HTTP&lt;/span&gt; and &lt;span class="caps"&gt;HTTPS&lt;/span&gt; requests (via &lt;span class="caps"&gt;HTTP&lt;/span&gt; 1.1 and &lt;span class="caps"&gt;HTTP2&lt;/span&gt;!) and run arbitrary C# functions
to inspect / modify the requests and&amp;nbsp;responses:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;proxyServer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ProxyServer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;explicitEndPoint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ExplicitProxyEndPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ipAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;proxyServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EnableHttp2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;proxyServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CertificateManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateRootCertificate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;proxyServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CertificateManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TrustRootCertificate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;proxyServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddEndPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;explicitEndPoint&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// specify your callbacks here&lt;/span&gt;
&lt;span class="n"&gt;explicitEndPoint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BeforeTunnelConnectRequest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BeforeTunnelConnectRequest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;proxyServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BeforeRequest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OnRequestHandler&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;proxyServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BeforeResponse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OnResponseHandler&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;proxyServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExceptionFunc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OnErrorFunc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;proxyServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;proxyServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetAsSystemProxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;explicitEndPoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ProxyProtocolType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AllHttp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;#8217;s rare to find a network library that works completely as advertised, and exposes a complex
concept behind an easy to understand &lt;span class="caps"&gt;API&lt;/span&gt;. Well done to&amp;nbsp;them!&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="dotnet"></category><category term="web"></category><category term="tools"></category></entry><entry><title>.NET Conf Thailand 2018</title><link href="https://fuqua.io/blog/2018/11/net-conf-thailand-2018/" rel="alternate"></link><published>2018-11-10T00:00:00+07:00</published><updated>2018-11-10T00:00:00+07:00</updated><author><name>Will Fuqua</name></author><id>tag:fuqua.io,2018-11-10:/blog/2018/11/net-conf-thailand-2018/</id><summary type="html">&lt;p&gt;I recently spoke at .&lt;span class="caps"&gt;NET&lt;/span&gt; Conf Thailand 2018! Thanks to &lt;a class="reference external" href="https://twitter.com/kidchenko"&gt;Jose Barbosa&lt;/a&gt; and &lt;a class="reference external" href="https://www.facebook.com/codesanookpage"&gt;Theeranit (Aaron) Pongtongmuang&lt;/a&gt; for&amp;nbsp;organizing!&lt;/p&gt;
&lt;p&gt;I covered what&amp;#8217;s new in C# 7.0 to 7.3 (performance, performance, performance!), and a sneak preview of what&amp;#8217;s upcoming in C#8 (non-nullable reference&amp;nbsp;types).&lt;/p&gt;
&lt;p&gt;Demo code is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently spoke at .&lt;span class="caps"&gt;NET&lt;/span&gt; Conf Thailand 2018! Thanks to &lt;a class="reference external" href="https://twitter.com/kidchenko"&gt;Jose Barbosa&lt;/a&gt; and &lt;a class="reference external" href="https://www.facebook.com/codesanookpage"&gt;Theeranit (Aaron) Pongtongmuang&lt;/a&gt; for&amp;nbsp;organizing!&lt;/p&gt;
&lt;p&gt;I covered what&amp;#8217;s new in C# 7.0 to 7.3 (performance, performance, performance!), and a sneak preview of what&amp;#8217;s upcoming in C#8 (non-nullable reference&amp;nbsp;types).&lt;/p&gt;
&lt;p&gt;Demo code is available &lt;a class="reference external" href="https://github.com/waf/DotNetConfThailand.2018.CSharpDemo"&gt;on GitHub&lt;/a&gt; and, while recordings are not available, you can see Mads Torgersen cover similar topics &lt;a class="reference external" href="https://channel9.msdn.com/Events/dotnetConf/2018/S103"&gt;on Channel9&lt;/a&gt;.&lt;/p&gt;
</content><category term="misc"></category><category term="dotnet"></category><category term="csharp"></category><category term="presentation"></category></entry></feed>